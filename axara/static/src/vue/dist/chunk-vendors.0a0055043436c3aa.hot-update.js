"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatefrontend"]("chunk-vendors",{

/***/ "./node_modules/@formkit/core/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@formkit/core/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bfs\": function() { return /* binding */ bfs; },\n/* harmony export */   \"clearErrors\": function() { return /* binding */ clearErrors; },\n/* harmony export */   \"compile\": function() { return /* binding */ compile; },\n/* harmony export */   \"createClasses\": function() { return /* binding */ createClasses; },\n/* harmony export */   \"createConfig\": function() { return /* binding */ createConfig$1; },\n/* harmony export */   \"createMessage\": function() { return /* binding */ createMessage; },\n/* harmony export */   \"createNode\": function() { return /* binding */ createNode; },\n/* harmony export */   \"createValue\": function() { return /* binding */ createValue; },\n/* harmony export */   \"deregister\": function() { return /* binding */ deregister; },\n/* harmony export */   \"error\": function() { return /* binding */ error; },\n/* harmony export */   \"errorHandler\": function() { return /* binding */ errorHandler; },\n/* harmony export */   \"generateClassList\": function() { return /* binding */ generateClassList; },\n/* harmony export */   \"getNode\": function() { return /* binding */ getNode$1; },\n/* harmony export */   \"isComponent\": function() { return /* binding */ isComponent; },\n/* harmony export */   \"isConditional\": function() { return /* binding */ isConditional; },\n/* harmony export */   \"isDOM\": function() { return /* binding */ isDOM; },\n/* harmony export */   \"isList\": function() { return /* binding */ isList; },\n/* harmony export */   \"isNode\": function() { return /* binding */ isNode; },\n/* harmony export */   \"isSugar\": function() { return /* binding */ isSugar; },\n/* harmony export */   \"names\": function() { return /* binding */ names; },\n/* harmony export */   \"register\": function() { return /* binding */ register; },\n/* harmony export */   \"reset\": function() { return /* binding */ reset; },\n/* harmony export */   \"resetCount\": function() { return /* binding */ resetCount; },\n/* harmony export */   \"resetRegistry\": function() { return /* binding */ resetRegistry; },\n/* harmony export */   \"setErrors\": function() { return /* binding */ setErrors; },\n/* harmony export */   \"submitForm\": function() { return /* binding */ submitForm; },\n/* harmony export */   \"sugar\": function() { return /* binding */ sugar; },\n/* harmony export */   \"use\": function() { return /* binding */ use; },\n/* harmony export */   \"useIndex\": function() { return /* binding */ useIndex; },\n/* harmony export */   \"valueInserted\": function() { return /* binding */ valueInserted; },\n/* harmony export */   \"valueMoved\": function() { return /* binding */ valueMoved; },\n/* harmony export */   \"valueRemoved\": function() { return /* binding */ valueRemoved; },\n/* harmony export */   \"warn\": function() { return /* binding */ warn; },\n/* harmony export */   \"warningHandler\": function() { return /* binding */ warningHandler; },\n/* harmony export */   \"watchRegistry\": function() { return /* binding */ watchRegistry; }\n/* harmony export */ });\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n\n\n/**\n * Creates a new dispatcher that allows the addition/removal of middleware\n * functions, and the ability to dispatch a payload to all middleware.\n * @returns FormKitDispatcher\n */\nfunction createDispatcher() {\n    const middleware = [];\n    let currentIndex = 0;\n    const use = (dispatchable) => middleware.push(dispatchable);\n    const dispatch = (payload) => {\n        const current = middleware[currentIndex];\n        if (typeof current === 'function') {\n            return current(payload, (explicitPayload) => {\n                currentIndex++;\n                return dispatch(explicitPayload === undefined ? payload : explicitPayload);\n            });\n        }\n        currentIndex = 0;\n        return payload;\n    };\n    use.dispatch = dispatch;\n    use.unshift = (dispatchable) => middleware.unshift(dispatchable);\n    use.remove = (dispatchable) => {\n        const index = middleware.indexOf(dispatchable);\n        if (index > -1)\n            middleware.splice(index, 1);\n    };\n    return use;\n}\n\n/**\n * Creates a new event emitter, each node uses one of these to allow it to emit\n * events to local listeners and tree listeners.\n * @returns FormKitEventEmitter\n */\nfunction createEmitter() {\n    const listeners = new Map();\n    const receipts = new Map();\n    let buffer = undefined;\n    const emitter = (node, event) => {\n        if (buffer) {\n            buffer.set(event.name, [node, event]);\n            return;\n        }\n        if (listeners.has(event.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            listeners.get(event.name).forEach((wrapper) => {\n                if (event.origin === node || wrapper.modifiers.includes('deep')) {\n                    wrapper.listener(event);\n                }\n            });\n        }\n        if (event.bubble) {\n            node.bubble(event);\n        }\n    };\n    /**\n     * Add an event listener\n     * @param eventName - The name of the event to listen to\n     * @param listener - The callback\n     * @returns string\n     */\n    emitter.on = (eventName, listener) => {\n        const [event, ...modifiers] = eventName.split('.');\n        const receipt = listener.receipt || (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.token)();\n        const wrapper = {\n            modifiers,\n            event,\n            listener,\n            receipt,\n        };\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n        listeners.has(event)\n            ? listeners.get(event).push(wrapper)\n            : listeners.set(event, [wrapper]);\n        receipts.has(receipt)\n            ? receipts.get(receipt).push(event)\n            : receipts.set(receipt, [event]);\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        return receipt;\n    };\n    /**\n     * Remove an event listener\n     * @param listenerOrReceipt - Either a receipt or the callback function.\n     */\n    emitter.off = (receipt) => {\n        var _a;\n        if (receipts.has(receipt)) {\n            (_a = receipts.get(receipt)) === null || _a === void 0 ? void 0 : _a.forEach((event) => {\n                const eventListeners = listeners.get(event);\n                if (Array.isArray(eventListeners)) {\n                    listeners.set(event, eventListeners.filter((wrapper) => wrapper.receipt !== receipt));\n                }\n            });\n            receipts.delete(receipt);\n        }\n    };\n    /**\n     * Pause emitting values. Any events emitted while paused will not be emitted\n     * but rather \"stored\" — and whichever events are emitted last will be output.\n     * For example:\n     * pause()\n     * emit('foo', 1)\n     * emit('foo', 2)\n     * emit('bar', 3)\n     * emit('bar', 4)\n     * play()\n     * // would result in\n     * emit('foo', 2)\n     * emit('bar', 4)\n     * Optionally pauses all children as well.\n     * @param node - A node to pause all children on.\n     */\n    emitter.pause = (node) => {\n        if (!buffer)\n            buffer = new Map();\n        if (node) {\n            node.walk((child) => child._e.pause());\n        }\n    };\n    /**\n     * Release the current event buffer.\n     * @param node - A node to unpause all children on.\n     */\n    emitter.play = (node) => {\n        if (!buffer)\n            return;\n        const events = buffer;\n        buffer = undefined;\n        events.forEach(([node, event]) => emitter(node, event));\n        if (node) {\n            node.walk((child) => child._e.play());\n        }\n    };\n    return emitter;\n}\n/**\n * Emit an event from this node.\n * @param node - The node that is emitting\n * @param context - The context of that node\n * @param name - The name of the event\n * @param payload - The payload to emit\n * @returns FormKitNode\n */\nfunction emit$1(node, context, name, payload, // eslint-disable-line @typescript-eslint/explicit-module-boundary-types,\nbubble = true) {\n    context._e(node, {\n        payload,\n        name,\n        bubble,\n        origin: node,\n    });\n    return node;\n}\n/**\n * Send an event from the given node up it's ancestor tree.\n * @param node -\n * @param _context -\n * @param event -\n */\nfunction bubble(node, _context, event) {\n    if (isNode(node.parent)) {\n        node.parent._e(node.parent, event);\n    }\n    return node;\n}\n/**\n * Adds an event listener to the node for a specific event. The event name is a\n * simple string matching the name of the event to listen to. It can optionally\n * include modifiers like eventName.deep\n * @param node -\n * @param context -\n * @param name -\n * @param listener -\n * @returns FormKitNode\n */\nfunction on(_node, context, name, listener) {\n    return context._e.on(name, listener);\n}\n/**\n * Removes an event listener from a node by the returned receipt from .on().\n * @param node - The node to remote the listener from\n * @param context - The context to remove\n * @param receipt - The receipt returned by .on()\n * @returns FormKitNode\n */\nfunction off(node, context, receipt) {\n    context._e.off(receipt);\n    return node;\n}\n\n/**\n * FormKit's global error handler.\n * @public\n */\nconst errorHandler = createDispatcher();\n/**\n * The default error handler just sets the error as the message.\n */\nerrorHandler((error, next) => {\n    if (!error.message)\n        error.message = String(`E${error.code}`);\n    return next(error);\n});\n/**\n * FormKit's global warning handler.\n * @public\n */\nconst warningHandler = createDispatcher();\nwarningHandler((warning, next) => {\n    if (!warning.message)\n        warning.message = String(`W${warning.code}`);\n    const result = next(warning);\n    if (console && typeof console.warn === 'function')\n        console.warn(result.message);\n    return result;\n});\n/**\n * Globally emits a warning.\n * @param code - The integer error code.\n * @param data - Usually an object of information to include.\n * @public\n */\nfunction warn(code, data = {}) {\n    warningHandler.dispatch({ code, data });\n}\n/**\n * Emits an error, generally should result in an exception.\n * @param code - The integer error code.\n * @param data - Usually an object of information to include.\n * @public\n */\nfunction error(code, data = {}) {\n    throw Error(errorHandler.dispatch({ code, data }).message);\n}\n\n/**\n * Creates a new FormKitMessage object.\n * @param conf - The message configuration\n * @returns FormKitMessage\n * @public\n */\nfunction createMessage(conf, node) {\n    const m = {\n        blocking: false,\n        key: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.token)(),\n        meta: {},\n        type: 'state',\n        visible: true,\n        ...conf,\n    };\n    if (node && m.value && m.meta.localize !== false) {\n        m.value = node.t(m);\n        m.meta.locale = node.config.locale;\n    }\n    return m;\n}\n/**\n * The available traps on the node's store.\n */\nconst storeTraps = {\n    apply: applyMessages,\n    set: setMessage,\n    remove: removeMessage,\n    filter: filterMessages,\n    reduce: reduceMessages,\n    release: releaseBuffer,\n    touch: touchMessages,\n};\n/**\n * Creates a new FormKit message store.\n * @returns FormKitStore\n */\nfunction createStore(_buffer = false) {\n    const messages = {};\n    let node;\n    let buffer = _buffer;\n    let _b = [];\n    const _m = new Map();\n    let _r = undefined;\n    const store = new Proxy(messages, {\n        get(...args) {\n            const [_target, property] = args;\n            if (property === 'buffer')\n                return buffer;\n            if (property === '_b')\n                return _b;\n            if (property === '_m')\n                return _m;\n            if (property === '_r')\n                return _r;\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(storeTraps, property)) {\n                return storeTraps[property].bind(null, messages, store, node);\n            }\n            return Reflect.get(...args);\n        },\n        set(_t, prop, value) {\n            if (prop === '_n') {\n                node = value;\n                if (_r === '__n')\n                    releaseMissed(node, store);\n                return true;\n            }\n            else if (prop === '_b') {\n                _b = value;\n                return true;\n            }\n            else if (prop === 'buffer') {\n                buffer = value;\n                return true;\n            }\n            else if (prop === '_r') {\n                _r = value;\n                return true;\n            }\n            error(101, node);\n            return false;\n        },\n    });\n    return store;\n}\n/**\n * Adds a new value to a FormKit message bag.\n * @param store - The store itself\n * @param store - The store interface\n * @param node - The node this store belongs to\n * @param message - The message object\n * @returns FormKitStore\n */\nfunction setMessage(messageStore, store, node, message) {\n    if (store.buffer) {\n        store._b.push([[message]]);\n        return store;\n    }\n    if (messageStore[message.key] !== message) {\n        if (typeof message.value === 'string' && message.meta.localize !== false) {\n            // Expose the value to translation\n            const previous = message.value;\n            message.value = node.t(message);\n            if (message.value !== previous) {\n                message.meta.locale = node.props.locale;\n            }\n        }\n        const e = `message-${(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(messageStore, message.key) ? 'updated' : 'added'}`;\n        messageStore[message.key] = Object.freeze(node.hook.message.dispatch(message));\n        node.emit(e, message);\n    }\n    return store;\n}\n/**\n * Run through each message in the store, and ensure it has been translated\n * to the proper language. This most frequently happens after a locale change.\n */\nfunction touchMessages(messageStore, store) {\n    for (const key in messageStore) {\n        const message = { ...messageStore[key] };\n        store.set(message);\n    }\n}\n/**\n * Remove a message from the store.\n * @param store - The store itself\n * @param store - The store interface\n * @param node - The node this store belongs to\n * @param key - The message key\n * @returns FormKitStore\n */\nfunction removeMessage(messageStore, store, node, key) {\n    if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(messageStore, key)) {\n        const message = messageStore[key];\n        delete messageStore[key];\n        node.emit('message-removed', message);\n    }\n    if (store.buffer === true) {\n        store._b = store._b.filter((buffered) => {\n            buffered[0] = buffered[0].filter((m) => m.key !== key);\n            return buffered[1] || buffered[0].length;\n        });\n    }\n    return store;\n}\n/**\n * Iterates over all messages removing those that are no longer wanted.\n * @param messageStore - The store itself\n * @param store - The store interface\n * @param node - The node to filter for\n * @param callback - A callback accepting a message and returning a boolean\n * @param type - Pre filtered by a given message type\n */\nfunction filterMessages(messageStore, store, node, callback, type) {\n    for (const key in messageStore) {\n        const message = messageStore[key];\n        if ((!type || message.type === type) && !callback(message)) {\n            removeMessage(messageStore, store, node, key);\n        }\n    }\n}\n/**\n * Reduce the message store to some other generic value.\n * @param messageStore - The store itself\n * @param _store - Unused but curried — the store interface itself\n * @param _node - The node owner of this store\n * @param reducer - The callback that performs the reduction\n * @param accumulator - The initial value\n * @returns\n */\nfunction reduceMessages(messageStore, _store, _node, reducer, accumulator) {\n    for (const key in messageStore) {\n        const message = messageStore[key];\n        accumulator = reducer(accumulator, message);\n    }\n    return accumulator;\n}\n/**\n *\n * @param messageStore - The store itself\n * @param _store - Unused but curried — the store interface itself\n * @param node - The node owner of this store\n * @param messages - An array of FormKitMessages to apply to this input, or an object of messages to apply to children.\n */\nfunction applyMessages(_messageStore, store, node, messages, clear) {\n    if (Array.isArray(messages)) {\n        if (store.buffer) {\n            store._b.push([messages, clear]);\n            return;\n        }\n        // In this case we are applying messages to this node’s store.\n        const applied = new Set(messages.map((message) => {\n            store.set(message);\n            return message.key;\n        }));\n        // Remove any messages that were not part of the initial apply:\n        if (typeof clear === 'string') {\n            store.filter((message) => message.type !== clear || applied.has(message.key));\n        }\n        else if (typeof clear === 'function') {\n            store.filter((message) => !clear(message) || applied.has(message.key));\n        }\n    }\n    else {\n        for (const address in messages) {\n            const child = node.at(address);\n            if (child) {\n                child.store.apply(messages[address], clear);\n            }\n            else {\n                missed(node, store, address, messages[address], clear);\n            }\n        }\n    }\n}\n/**\n * Creates an array of message arrays from strings.\n * @param errors - Arrays or objects of form errors or input errors\n * @returns\n * @internal\n */\nfunction createMessages(node, ...errors) {\n    const sourceKey = `${node.name}-set`;\n    const make = (error) => createMessage({\n        key: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.slugify)(error),\n        type: 'error',\n        value: error,\n        meta: { source: sourceKey, autoClear: true },\n    });\n    return errors\n        .filter((m) => !!m)\n        .map((errorSet) => {\n        if (typeof errorSet === 'string')\n            errorSet = [errorSet];\n        if (Array.isArray(errorSet)) {\n            return errorSet.map((error) => make(error));\n        }\n        else {\n            const errors = {};\n            for (const key in errorSet) {\n                if (Array.isArray(errorSet[key])) {\n                    errors[key] = errorSet[key].map((error) => make(error));\n                }\n                else {\n                    errors[key] = [make(errorSet[key])];\n                }\n            }\n            return errors;\n        }\n    });\n}\n/**\n *\n * @param store - The store to apply this missed applications.\n * @param address - The address that was missed (a node path that didn't yet exist)\n * @param messages - The messages that should have been applied.\n * @param clear - The clearing function (if any)\n */\nfunction missed(node, store, address, messages, clear) {\n    var _a;\n    const misses = store._m;\n    if (!misses.has(address))\n        misses.set(address, []);\n    // The created receipt\n    if (!store._r)\n        store._r = releaseMissed(node, store);\n    (_a = misses.get(address)) === null || _a === void 0 ? void 0 : _a.push([messages, clear]);\n}\n/**\n * Releases messages that were applied to a child via parent, but the child did\n * not exist. Once the child does exist, the created event for that child will\n * bubble to this point, and any stored applications will be applied serially.\n * @param store - The store object.\n * @returns\n */\nfunction releaseMissed(node, store) {\n    return node.on('child.deep', ({ payload: child }) => {\n        store._m.forEach((misses, address) => {\n            if (node.at(address) === child) {\n                misses.forEach(([messages, clear]) => {\n                    child.store.apply(messages, clear);\n                });\n                store._m.delete(address);\n            }\n        });\n        // If all the stored misses were applied, remove the listener.\n        if (store._m.size === 0 && store._r) {\n            node.off(store._r);\n            store._r = undefined;\n        }\n    });\n}\n/**\n * Iterates over all buffered messages and applies them in sequence.\n * @param messageStore - The store itself\n * @param store - The store interface\n * @param node - The node to filter for\n */\nfunction releaseBuffer(_messageStore, store) {\n    store.buffer = false;\n    store._b.forEach(([messages, clear]) => store.apply(messages, clear));\n    store._b = [];\n}\n\n/**\n * Creates a new ledger for use on a single node's context.\n * @returns\n */\nfunction createLedger() {\n    const ledger = {};\n    let n;\n    return {\n        count: (...args) => createCounter(n, ledger, ...args),\n        init(node) {\n            n = node;\n            node.on('message-added.deep', add(ledger, 1));\n            node.on('message-removed.deep', add(ledger, -1));\n        },\n        merge: (child) => merge(n, ledger, child),\n        settled(counterName) {\n            return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(ledger, counterName)\n                ? ledger[counterName].promise\n                : Promise.resolve();\n        },\n        unmerge: (child) => merge(n, ledger, child, true),\n        value(counterName) {\n            return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(ledger, counterName) ? ledger[counterName].count : 0;\n        },\n    };\n}\n/**\n * Creates a new counter object in the counting ledger.\n * @param ledger - The actual ledger storage object\n * @param counterName - The name of the counter, can be arbitrary\n * @param condition - The condition function (or string) that filters messages\n * @param initialValue - The initial counter value\n * @returns\n */\nfunction createCounter(node, ledger, counterName, condition, increment = 0) {\n    condition = parseCondition(condition || counterName);\n    if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(ledger, counterName)) {\n        const counter = {\n            condition,\n            count: 0,\n            name: counterName,\n            node,\n            promise: Promise.resolve(),\n            resolve: () => { }, // eslint-disable-line @typescript-eslint/no-empty-function\n        };\n        ledger[counterName] = counter;\n        increment = node.store.reduce((sum, m) => sum + counter.condition(m) * 1, increment);\n        node.each((child) => {\n            child.ledger.count(counter.name, counter.condition);\n            increment += child.ledger.value(counter.name);\n        });\n    }\n    return count(ledger[counterName], increment).promise;\n}\n/**\n * We parse the condition to allow flexibility in how counters are specified.\n * @param condition - The condition that, if true, allows a message to change a counter's value\n * @returns\n */\nfunction parseCondition(condition) {\n    if (typeof condition === 'function') {\n        return condition;\n    }\n    return (m) => m.type === condition;\n}\n/**\n * Perform a counting action on the a given counter object of the ledger.\n * @param counter - A counter object\n * @param increment - The amount by which we are changing the count value\n * @returns\n */\nfunction count(counter, increment) {\n    const initial = counter.count;\n    const post = counter.count + increment;\n    counter.count = post;\n    if (initial === 0 && post !== 0) {\n        counter.node.emit(`unsettled:${counter.name}`, counter.count, false);\n        counter.promise = new Promise((r) => (counter.resolve = r));\n    }\n    else if (initial !== 0 && post === 0) {\n        counter.node.emit(`settled:${counter.name}`, counter.count, false);\n        counter.resolve();\n    }\n    counter.node.emit(`count:${counter.name}`, counter.count, false);\n    return counter;\n}\n/**\n * Returns a function to be used as an event listener for message events.\n * @param ledger - A ledger to operate on\n * @param delta - The amount to add or subtract\n * @returns\n */\nfunction add(ledger, delta) {\n    return (e) => {\n        for (const name in ledger) {\n            const counter = ledger[name];\n            if (counter.condition(e.payload)) {\n                count(counter, delta);\n            }\n        }\n    };\n}\n/**\n * Given a child node, add the parent node's counters to the child and then\n * rectify the upstream ledger counts. Generally used when attaching a child\n * to an already counted tree.\n * @param parent - The parent that is \"receiving\" the child\n * @param ledger - The ledger object\n * @param child - The child (can be a subtree) that is being attached\n */\nfunction merge(parent, ledger, child, remove = false) {\n    for (const key in ledger) {\n        const condition = ledger[key].condition;\n        if (!remove)\n            child.ledger.count(key, condition);\n        const increment = child.ledger.value(key) * (remove ? -1 : 1);\n        if (!parent)\n            continue;\n        do {\n            parent.ledger.count(key, condition, increment);\n            parent = parent.parent;\n        } while (parent);\n    }\n}\n\n/**\n * A global registry of nodes by their alias or name (if root).\n */\nconst registry = new Map();\nconst reflected = new Map();\n/**\n * An event emitter for registered/set/unset nodes\n */\nconst emit = createEmitter();\n/**\n * Receipts of listeners.\n */\nconst receipts = [];\n/**\n * Registers a node to the registry _if_ the node is a root node, _or_ if the\n * node has an explicit node.props.alias. If these two things are not true\n * then no node is registered (idempotent).\n *\n * @param node - A node to register\n * @public\n */\nfunction register(node) {\n    if (node.props.id) {\n        registry.set(node.props.id, node);\n        reflected.set(node, node.props.id);\n        emit(node, {\n            payload: node,\n            name: node.props.id,\n            bubble: false,\n            origin: node,\n        });\n    }\n}\n/**\n * Deregister a node from the registry.\n * @param node - A node to remove\n * @public\n */\nfunction deregister(node) {\n    if (reflected.has(node)) {\n        const id = reflected.get(node); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        reflected.delete(node);\n        registry.delete(id);\n        emit(node, {\n            payload: null,\n            name: id,\n            bubble: false,\n            origin: node,\n        });\n    }\n}\n/**\n * Get a node by a particular id.\n * @param node - Get a node by a given id\n * @public\n */\nfunction getNode$1(id) {\n    return registry.get(id);\n}\n/**\n * Reset the entire registry.\n * @public\n */\nfunction resetRegistry() {\n    registry.forEach((node) => {\n        deregister(node);\n    });\n    receipts.forEach((receipt) => emit.off(receipt));\n}\n/**\n *\n * @param id - An id to watch\n * @param callback - A callback to notify when the node is set or removed.\n * @public\n */\nfunction watchRegistry(id, callback) {\n    // register a listener\n    receipts.push(emit.on(id, callback));\n}\n\n/**\n * Applies a given config change to the node.\n * @param node - The node to check for config change\n * @param prop - Checks if this property exists in the local config or props\n * @param value - The value to set\n * @internal\n */\nfunction configChange(node, prop, value) {\n    // When we return false, node.walk will not continue into that child.\n    let usingFallback = true;\n    !(prop in node.config._t)\n        ? node.emit(`config:${prop}`, value, false)\n        : (usingFallback = false);\n    if (!(prop in node.props)) {\n        node.emit('prop', { prop, value });\n        node.emit(`prop:${prop}`, value);\n    }\n    return usingFallback;\n}\n/**\n * Creates a new instance of a global configuration option. This object is\n * essentially just a FormKitOption object, but it can be used as the root for\n * FormKitConfig's proxy and retain event \"emitting\".\n *\n * @param options - FormKit node options to be used globally.\n * @public\n */\nfunction createConfig$1(options = {}) {\n    const nodes = new Set();\n    const target = {\n        ...options,\n        ...{\n            _add: (node) => nodes.add(node),\n            _rm: (node) => node.remove(node),\n        },\n    };\n    const rootConfig = new Proxy(target, {\n        set(t, prop, value, r) {\n            if (typeof prop === 'string') {\n                nodes.forEach((node) => configChange(node, prop, value));\n            }\n            return Reflect.set(t, prop, value, r);\n        },\n    });\n    return rootConfig;\n}\n\n/**\n * Submits a FormKit form programmatically.\n * @param id - The id of the form\n * @public\n */\nfunction submitForm(id) {\n    const formElement = document.getElementById(id);\n    if (formElement instanceof HTMLFormElement) {\n        const event = new Event('submit', { cancelable: true, bubbles: true });\n        formElement.dispatchEvent(event);\n        return;\n    }\n    warn(151, id);\n}\n\n/**\n * Clear all state and error messages.\n */\nfunction clearState(node) {\n    const clear = (n) => {\n        for (const key in n.store) {\n            const message = n.store[key];\n            if (message.type === 'error' ||\n                (message.type === 'ui' && key === 'incomplete')) {\n                n.store.remove(key);\n            }\n            else if (message.type === 'state') {\n                n.store.set({ ...message, value: false });\n            }\n        }\n    };\n    clear(node);\n    node.walk(clear);\n}\n/**\n * Resets an input to it’s \"initial\" value — if the input is a group or list it\n * resets all the children as well.\n * @param id - The id of an input to reset\n * @returns\n * @public\n */\nfunction reset(id, resetTo) {\n    const node = typeof id === 'string' ? getNode$1(id) : id;\n    if (node) {\n        const initial = (n) => (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.cloneAny)(n.props.initial) ||\n            (n.type === 'group' ? {} : n.type === 'list' ? [] : undefined);\n        // pause all events in this tree.\n        node._e.pause(node);\n        // Set it back to basics\n        node.input((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.cloneAny)(resetTo) || initial(node), false);\n        // Set children back to basics in case they were additive (had their own value for example)\n        node.walk((child) => child.input(initial(child), false));\n        // Finally we need to lay any values back on top (if it is a group/list) since group values\n        // take precedence over child values.\n        const finalInit = initial(node);\n        node.input(typeof finalInit === 'object'\n            ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.cloneAny)(resetTo) || (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.init)(finalInit)\n            : finalInit, false);\n        // release the events.\n        node._e.play(node);\n        clearState(node);\n        node.emit('reset', node);\n        return node;\n    }\n    warn(152, id);\n    return;\n}\n\n/**\n * Default configuration options.\n */\nconst defaultConfig = {\n    delimiter: '.',\n    delay: 0,\n    locale: 'en',\n    rootClasses: (key) => ({ [`formkit-${(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.kebab)(key)}`]: true }),\n};\n/**\n * If a node’s name is set to useIndex, it replaces the node’s name with the\n * index of the node relative to its parent’s children.\n * @public\n */\nconst useIndex = Symbol('index');\n/**\n * When propagating values up a tree, this value indicates the child should be\n * removed.\n * @public\n */\nconst valueRemoved = Symbol('removed');\n/**\n * When propagating values up a tree, this value indicates the child should be\n * moved.\n * @public\n */\nconst valueMoved = Symbol('moved');\n/**\n * When creating a new node and having its value injected directly at a specific\n * location.\n * @public\n */\nconst valueInserted = Symbol('inserted');\n/**\n * A simple type guard to determine if the context being evaluated is a list\n * type.\n * @param arg -\n * @returns arg is FormKitListContext\n * @public\n */\nfunction isList(arg) {\n    return arg.type === 'list' && Array.isArray(arg._value);\n}\n/**\n * Determine if a given object is a node\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction isNode(node) {\n    return node && typeof node === 'object' && node.__FKNode__ === true;\n}\n/**\n * The setter you are trying to access is invalid.\n */\nconst invalidSetter = (node, _context, property) => {\n    error(102, [node, property]);\n};\nconst traps = {\n    _c: trap(getContext, invalidSetter, false),\n    add: trap(addChild),\n    addProps: trap(addProps),\n    address: trap(getAddress, invalidSetter, false),\n    at: trap(getNode),\n    bubble: trap(bubble),\n    clearErrors: trap(clearErrors$1),\n    calm: trap(calm),\n    config: trap(false),\n    define: trap(define),\n    disturb: trap(disturb),\n    destroy: trap(destroy),\n    hydrate: trap(hydrate),\n    index: trap(getIndex, setIndex, false),\n    input: trap(input),\n    each: trap(eachChild),\n    emit: trap(emit$1),\n    find: trap(find),\n    on: trap(on),\n    off: trap(off),\n    parent: trap(false, setParent),\n    plugins: trap(false),\n    remove: trap(removeChild),\n    root: trap(getRoot, invalidSetter, false),\n    reset: trap(resetValue),\n    resetConfig: trap(resetConfig),\n    setErrors: trap(setErrors$1),\n    submit: trap(submit),\n    t: trap(text),\n    use: trap(use),\n    name: trap(getName, false, false),\n    walk: trap(walkTree),\n};\n/**\n * These are all the available \"traps\" for a given node. You can think of these\n * a little bit like methods, but they are really Proxy interceptors.\n */\nfunction createTraps() {\n    return new Map(Object.entries(traps));\n}\n/**\n * Creates a getter/setter trap and curries the context/node pair\n * @param getter - The getter function\n * @param setter - The setter function\n * @param curryGetter - Indicates if the getter should be curried or not\n * @returns\n */\nfunction trap(getter, setter, curryGetter = true) {\n    return {\n        get: getter\n            ? (node, context) => curryGetter\n                ? (...args) => getter(node, context, ...args)\n                : getter(node, context)\n            : false,\n        set: setter !== undefined ? setter : invalidSetter.bind(null),\n    };\n}\n/**\n * Create all of the node's hook dispatchers.\n */\nfunction createHooks() {\n    const hooks = new Map();\n    return new Proxy(hooks, {\n        get(_, property) {\n            if (!hooks.has(property)) {\n                hooks.set(property, createDispatcher());\n            }\n            return hooks.get(property);\n        },\n    });\n}\n/**\n * This is a simple integer counter of every createName() where the name needs\n * to be generated.\n */\nlet nameCount = 0;\n/**\n * This is a simple integer counter of every default id created.\n */\nlet idCount = 0;\n/**\n * Reports the global number of node registrations, useful for deterministic\n * node naming.\n * @public\n */\nfunction resetCount() {\n    nameCount = 0;\n    idCount = 0;\n}\n/**\n * Create a name based dictionary of all children in an array.\n * @param children -\n * @public\n */\nfunction names(children) {\n    return children.reduce((named, child) => Object.assign(named, { [child.name]: child }), {});\n}\n/**\n * This node is responsible for deterministically generating an id for this\n * node. This cannot just be a random id, it _must_ be deterministic to ensure\n * re-hydration of the form (like post-SSR) produces the same names/ids.\n *\n * @param options -\n * @returns string\n */\nfunction createName(options) {\n    var _a, _b;\n    if (((_a = options.parent) === null || _a === void 0 ? void 0 : _a.type) === 'list')\n        return useIndex;\n    return options.name || `${((_b = options.props) === null || _b === void 0 ? void 0 : _b.type) || 'input'}_${++nameCount}`;\n}\n/**\n * Creates the initial value for a node based on the options passed in and the\n * type of the input.\n * @param options -\n * @param type -\n * @returns\n * @internal\n */\nfunction createValue(options) {\n    if (options.type === 'group') {\n        return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.init)(options.value &&\n            typeof options.value === 'object' &&\n            !Array.isArray(options.value)\n            ? options.value\n            : {});\n    }\n    else if (options.type === 'list') {\n        return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.init)(Array.isArray(options.value) ? options.value : []);\n    }\n    return options.value === null ? '' : options.value;\n}\n/**\n * Sets the internal value of the node.\n * @param node -\n * @param context -\n * @param value -\n * @returns T\n */\nfunction input(node, context, value, async = true) {\n    context._value = validateInput(node, node.hook.input.dispatch(value));\n    node.emit('input', context._value);\n    if (context.isSettled)\n        node.disturb();\n    if (async) {\n        if (context._tmo)\n            clearTimeout(context._tmo);\n        context._tmo = setTimeout(commit, node.props.delay, node, context);\n    }\n    else {\n        commit(node, context);\n    }\n    return context.settled;\n}\n/**\n * Validate that the current input is allowed.\n * @param type - The type of node (input, list, group)\n * @param value - The value that is being set\n */\nfunction validateInput(node, value) {\n    switch (node.type) {\n        // Inputs are allowed to have any type\n        case 'input':\n            break;\n        case 'group':\n            if (!value || typeof value !== 'object')\n                error(107, [node, value]);\n            break;\n        case 'list':\n            if (!Array.isArray(value))\n                error(108, [node, value]);\n            break;\n    }\n    return value;\n}\n/**\n * Commits the working value to the node graph as the value of this node.\n * @param node -\n * @param context -\n * @param calm -\n * @param hydrate -\n */\nfunction commit(node, context, calm = true, hydrate = true) {\n    context._value = context.value = node.hook.commit.dispatch(context._value);\n    if (node.type !== 'input' && hydrate)\n        node.hydrate();\n    node.emit('commit', context.value);\n    if (calm)\n        node.calm();\n}\n/**\n * Perform a modification to a single element of a parent aggregate value. This\n * is only performed on the pre-committed value (_value), although typically\n * the value and _value are both linked in memory.\n * @param context -\n * @param name -\n * @param value -\n */\nfunction partial(context, { name, value, from }) {\n    if (Object.isFrozen(context._value))\n        return;\n    if (isList(context)) {\n        const insert = value === valueRemoved\n            ? []\n            : value === valueMoved && typeof from === 'number'\n                ? context._value.splice(from, 1)\n                : [value];\n        context._value.splice(name, value === valueMoved || from === valueInserted ? 0 : 1, ...insert);\n        return;\n    }\n    // In this case we know for sure we're dealing with a group, TS doesn't\n    // know that however, so we use some unpleasant casting here\n    if (value !== valueRemoved) {\n        context._value[name] = value;\n    }\n    else {\n        delete context._value[name];\n    }\n}\n/**\n * Pass values down to children by calling hydrate on them.\n * @param parent -\n * @param child -\n */\nfunction hydrate(node, context) {\n    const _value = context._value;\n    context.children.forEach((child) => {\n        if (typeof _value !== 'object')\n            return;\n        // if (has(context._value as FormKitGroupValue, child.name)) {\n        if (child.name in _value) {\n            // In this case, the parent has a value to give to the child, so we\n            // perform a down-tree synchronous input which will cascade values down\n            // and then ultimately back up.\n            const childValue = child.type !== 'input' ||\n                (_value[child.name] && typeof _value[child.name] === 'object')\n                ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.init)(_value[child.name])\n                : _value[child.name];\n            child.input(childValue, false);\n        }\n        else {\n            if (node.type !== 'list' || typeof child.name === 'number') {\n                // In this case, the parent’s values have no knowledge of the child\n                // value — this typically occurs on the commit at the end of addChild()\n                // we need to create a value reservation for this node’s name. This is\n                // especially important when dealing with lists where index matters.\n                partial(context, { name: child.name, value: child.value });\n            }\n            if (!_value.__init) {\n                // In this case, someone has explicitly set the value to an empty object\n                // with node.input({}) so we do not define the __init property:\n                if (child.type === 'group')\n                    child.input({}, false);\n                else if (child.type === 'list')\n                    child.input([], false);\n                else\n                    child.input(undefined, false);\n            }\n        }\n    });\n    return node;\n}\n/**\n * Disturbs the state of a node from settled to unsettled — creating appropriate\n * promises and resolutions.\n * @param node -\n * @param context -\n */\nfunction disturb(node, context) {\n    var _a;\n    if (context._d <= 0) {\n        context.isSettled = false;\n        node.emit('settled', false, false);\n        context.settled = new Promise((resolve) => {\n            context._resolve = resolve;\n        });\n        if (node.parent)\n            (_a = node.parent) === null || _a === void 0 ? void 0 : _a.disturb();\n    }\n    context._d++;\n    return node;\n}\n/**\n * Calms the given node's disturbed state by one.\n * @param node -\n * @param context -\n */\nfunction calm(node, context, value) {\n    var _a;\n    if (value !== undefined && node.type !== 'input') {\n        partial(context, value);\n        // Commit the value up, but do not hydrate back down\n        return commit(node, context, true, false);\n    }\n    if (context._d > 0)\n        context._d--;\n    if (context._d === 0) {\n        context.isSettled = true;\n        node.emit('settled', true, false);\n        if (node.parent)\n            (_a = node.parent) === null || _a === void 0 ? void 0 : _a.calm({ name: node.name, value: context.value });\n        if (context._resolve)\n            context._resolve(context.value);\n    }\n}\n/**\n * This node is being removed and needs to be cleaned up.\n * @param node - The node to shut down\n * @param context - The context to clean up\n */\nfunction destroy(node, context) {\n    node.emit('destroying', node);\n    // flush all messages out\n    node.store.filter(() => false);\n    if (node.parent) {\n        node.parent.remove(node);\n    }\n    deregister(node);\n    context._value = context.value = undefined;\n    node.emit('destroyed', node);\n}\n/**\n * Defines the current input type concretely.\n * @param definition - The definition of the current input type.\n */\nfunction define(node, context, definition) {\n    // Assign the type\n    context.type = definition.type;\n    // Assign the definition\n    context.props.definition = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.clone)(definition);\n    // Ensure the type is seeded with the `__init` value.\n    context.value = context._value = createValue({\n        type: node.type,\n        value: context.value,\n    });\n    // Apply any input features before resetting the props.\n    if (definition.features) {\n        definition.features.forEach((feature) => feature(node));\n    }\n    // Its possible that input-defined \"props\" have ended up in the context attrs\n    // these should be moved back out of the attrs object.\n    if (definition.props) {\n        node.addProps(definition.props);\n    }\n    node.emit('defined', definition);\n}\n/**\n * Adds props to a given node by stripping them out of the node.props.attrs and\n * then adding them to the nodes.\n *\n * @param node - The node to add props to\n * @param context - The internal context object\n * @param props - An array of prop strings (in camelCase!)\n */\nfunction addProps(node, context, props) {\n    var _a;\n    if (node.props.attrs) {\n        const attrs = { ...node.props.attrs };\n        // Temporarily disable prop emits\n        node.props._emit = false;\n        for (const attr in attrs) {\n            const camelName = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.camel)(attr);\n            if (props.includes(camelName)) {\n                node.props[camelName] = attrs[attr];\n                delete attrs[attr];\n            }\n        }\n        const initial = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.cloneAny)(context._value);\n        node.props.initial =\n            node.type !== 'input' ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.init)(initial) : initial;\n        // Re-enable prop emits\n        node.props._emit = true;\n        node.props.attrs = attrs;\n        if (node.props.definition) {\n            node.props.definition.props = [\n                ...(((_a = node.props.definition) === null || _a === void 0 ? void 0 : _a.props) || []),\n                ...props,\n            ];\n        }\n    }\n    node.emit('added-props', props);\n    return node;\n}\n/**\n * (node.add) Adds a child to the node.\n * @param context -\n * @param node -\n * @param child -\n */\nfunction addChild(parent, parentContext, child, listIndex) {\n    if (parent.type === 'input')\n        error(100, parent);\n    if (child.parent && child.parent !== parent) {\n        child.parent.remove(child);\n    }\n    // Synchronously set the initial value on the parent\n    if (!parentContext.children.includes(child)) {\n        if (listIndex !== undefined && parent.type === 'list') {\n            // Inject the child:\n            parentContext.children.splice(listIndex, 0, child);\n            if (Array.isArray(parent.value) &&\n                parent.value.length < parentContext.children.length) {\n                // When adding an node or value to a list it is absolutely critical to\n                // know if, at the moment of injection, the parent’s value or the node\n                // children are the source of truth. For example, if a user pushes or\n                // splices a new value onto the lists’s array then we want to use that\n                // value as the value of the new node, but if a user adds a node to the\n                // list then we want the node’s value. In this specific case, we\n                // assume (due to length) that a new node was injected into the list, so\n                // we want that new node’s value injected into the parent list value.\n                parent.disturb().calm({\n                    name: listIndex,\n                    value: child.value,\n                    from: valueInserted,\n                });\n            }\n        }\n        else {\n            parentContext.children.push(child);\n        }\n        if (!child.isSettled)\n            parent.disturb();\n    }\n    if (child.parent !== parent) {\n        child.parent = parent;\n        // In this edge case middleware changed the parent assignment so we need to\n        // re-add the child\n        if (child.parent !== parent) {\n            parent.remove(child);\n            child.parent.add(child);\n            return parent;\n        }\n    }\n    else {\n        // When a parent is properly assigned, we inject the parent's plugins on the\n        // child.\n        child.use(parent.plugins);\n    }\n    // Finally we call commit here, which sub-calls hydrate(), hydrate() will\n    // resolve any conflict between the parent and child values, and also ensure\n    // proper \"placeholders\" are made on the parent.\n    commit(parent, parentContext, false);\n    parent.ledger.merge(child);\n    parent.emit('child', child);\n    return parent;\n}\n/**\n * The setter for node.parent = FormKitNode\n * @param _context -\n * @param node -\n * @param _property -\n * @param parent -\n * @returns boolean\n */\nfunction setParent(child, context, _property, parent) {\n    if (isNode(parent)) {\n        if (child.parent && child.parent !== parent) {\n            child.parent.remove(child);\n        }\n        context.parent = parent;\n        child.resetConfig();\n        !parent.children.includes(child)\n            ? parent.add(child)\n            : child.use(parent.plugins);\n        return true;\n    }\n    if (parent === null) {\n        context.parent = null;\n        return true;\n    }\n    return false;\n}\n/**\n * (node.remove) Removes a child from the node.\n * @param context -\n * @param node -\n * @param child -\n */\nfunction removeChild(node, context, child) {\n    const childIndex = context.children.indexOf(child);\n    if (childIndex !== -1) {\n        if (child.isSettled)\n            node.disturb();\n        context.children.splice(childIndex, 1);\n        // If an ancestor uses the preserve prop, then we are expected to not remove\n        // our values on this node either, see #53\n        let preserve = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)(child.props.preserve);\n        let parent = child.parent;\n        while (preserve === undefined && parent) {\n            preserve = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)(parent.props.preserve);\n            parent = parent.parent;\n        }\n        if (!preserve) {\n            node.calm({\n                name: node.type === 'list' ? childIndex : child.name,\n                value: valueRemoved,\n            });\n        }\n        else {\n            node.calm();\n        }\n        child.parent = null;\n        // Remove the child from the config. Is this weird? Yes. Is it ok? Yes.\n        child.config._rmn = child;\n    }\n    node.ledger.unmerge(child);\n    return node;\n}\n/**\n * Iterate over each immediate child and perform a callback.\n * @param context -\n * @param _node -\n * @param callback -\n */\nfunction eachChild(_node, context, callback) {\n    context.children.forEach((child) => callback(child));\n}\n/**\n * Walk all nodes below this one and execute a callback.\n * @param _node -\n * @param context -\n * @param callback -\n */\nfunction walkTree(_node, context, callback, stopIfFalse = false) {\n    context.children.forEach((child) => {\n        if (callback(child) !== false || !stopIfFalse) {\n            child.walk(callback);\n        }\n    });\n}\n/**\n * Set the configuration options of the node and it's subtree.\n * @param node -\n * @param context -\n * @param _property -\n * @param config -\n */\nfunction resetConfig(node, context) {\n    const parent = node.parent || undefined;\n    context.config = createConfig(node.config._t, parent);\n    node.walk((n) => n.resetConfig());\n}\n/**\n * Adds a plugin to the node, it’s children, and executes it.\n * @param context -\n * @param node -\n * @param plugin -\n * @public\n */\nfunction use(node, context, plugin, run = true, library = true) {\n    if (Array.isArray(plugin) || plugin instanceof Set) {\n        plugin.forEach((p) => use(node, context, p));\n        return node;\n    }\n    if (!context.plugins.has(plugin)) {\n        if (library && typeof plugin.library === 'function')\n            plugin.library(node);\n        // When plugins return false, they are never added as to the plugins Set\n        // meaning they only ever have access to the single node they were added on.\n        if (run && plugin(node) !== false) {\n            context.plugins.add(plugin);\n            node.children.forEach((child) => child.use(plugin));\n        }\n    }\n    return node;\n}\n/**\n * Moves a node in the parent’s children to the given index.\n * @param node -\n * @param _context -\n * @param _property -\n * @param setIndex -\n */\nfunction setIndex(node, _context, _property, setIndex) {\n    if (isNode(node.parent)) {\n        const children = node.parent.children;\n        const index = setIndex >= children.length\n            ? children.length - 1\n            : setIndex < 0\n                ? 0\n                : setIndex;\n        const oldIndex = children.indexOf(node);\n        if (oldIndex === -1)\n            return false;\n        children.splice(oldIndex, 1);\n        children.splice(index, 0, node);\n        node.parent.children = children;\n        if (node.parent.type === 'list')\n            node.parent\n                .disturb()\n                .calm({ name: index, value: valueMoved, from: oldIndex });\n        return true;\n    }\n    return false;\n}\n/**\n * Retrieves the index of a node from the parent’s children.\n * @param node -\n */\nfunction getIndex(node) {\n    if (node.parent) {\n        const index = [...node.parent.children].indexOf(node);\n        // If the index is currently -1 then the node isnt finished booting, so it\n        // must be the next node.\n        return index === -1 ? node.parent.children.length : index;\n    }\n    return -1;\n}\n/**\n * Retrieves the context object of a given node. This is intended to be a\n * private trap and should absolutely not be used in plugins or user-land code.\n * @param _node -\n * @param context -\n */\nfunction getContext(_node, context) {\n    return context;\n}\n/**\n * Get the name of the current node, allowing for slight mutations.\n * @param node -\n * @param context -\n */\nfunction getName(node, context) {\n    var _a;\n    if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === 'list')\n        return node.index;\n    return context.name !== useIndex ? context.name : node.index;\n}\n/**\n * Returns the address of the current node.\n * @param node -\n * @param context -\n */\nfunction getAddress(node, context) {\n    return context.parent\n        ? context.parent.address.concat([node.name])\n        : [node.name];\n}\n/**\n * Fetches a node from the tree by its address.\n * @param context -\n * @param node -\n * @param location -\n * @returns FormKitNode\n */\nfunction getNode(node, _context, locator) {\n    const address = typeof locator === 'string' ? locator.split(node.config.delimiter) : locator;\n    if (!address.length)\n        return undefined;\n    const first = address[0];\n    let pointer = node.parent;\n    if (!pointer) {\n        // This address names the root node, remove it to get child name:\n        if (String(address[0]) === String(node.name))\n            address.shift();\n        // All root nodes start at themselves ultimately:\n        pointer = node;\n    }\n    // Any addresses starting with $parent should discard it\n    if (first === '$parent')\n        address.shift();\n    while (pointer && address.length) {\n        const name = address.shift();\n        switch (name) {\n            case '$root':\n                pointer = node.root;\n                break;\n            case '$parent':\n                pointer = pointer.parent;\n                break;\n            case '$self':\n                pointer = node;\n                break;\n            default:\n                pointer =\n                    pointer.children.find((c) => String(c.name) === String(name)) ||\n                        select(pointer, name);\n        }\n    }\n    return pointer || undefined;\n}\n/**\n * Perform selections on a subtree using the address \"selector\" methods.\n * @param node -\n * @param selector -\n * @returns FormKitNode | undefined\n */\nfunction select(node, selector) {\n    const matches = String(selector).match(/^(find)\\((.*)\\)$/);\n    if (matches) {\n        const [, action, argStr] = matches;\n        const args = argStr.split(',').map((arg) => arg.trim());\n        switch (action) {\n            case 'find':\n                return node.find(args[0], args[1]);\n            default:\n                return undefined;\n        }\n    }\n    return undefined;\n}\n/**\n * Perform a breadth first search and return the first instance of a node that\n * is found in the subtree or undefined.\n * @param node - The node to start the search on/under\n * @param _context - The context object\n * @param searchTerm - The term we are searching for\n * @param searcher - Either a key to search on, or a function\n * @returns\n */\nfunction find(node, _context, searchTerm, searcher) {\n    return bfs(node, searchTerm, searcher);\n}\n/**\n * Perform a breadth-first-search on a node subtree and locate the first\n * instance of a match.\n * @param node -\n * @param name -\n * @returns FormKitNode\n * @public\n */\nfunction bfs(tree, searchValue, searchGoal = 'name') {\n    const search = typeof searchGoal === 'string'\n        ? (n) => n[searchGoal] == searchValue // non-strict comparison is intentional\n        : searchGoal;\n    const stack = [tree];\n    while (stack.length) {\n        const node = stack.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        if (search(node, searchValue))\n            return node;\n        stack.push(...node.children);\n    }\n    return undefined;\n}\n/**\n * Get the root node of the tree.\n */\nfunction getRoot(n) {\n    let node = n;\n    while (node.parent) {\n        node = node.parent;\n    }\n    return node;\n}\n/**\n * Creates a new configuration option.\n * @param parent -\n * @param configOptions -\n * @returns FormKitConfig\n */\nfunction createConfig(target = {}, parent) {\n    let node = undefined;\n    return new Proxy(target, {\n        get(...args) {\n            const prop = args[1];\n            if (prop === '_t')\n                return target;\n            const localValue = Reflect.get(...args);\n            // Check our local values first\n            if (localValue !== undefined)\n                return localValue;\n            // Then check our parent values next\n            if (parent) {\n                const parentVal = parent.config[prop];\n                if (parentVal !== undefined)\n                    return parentVal;\n            }\n            if (target.rootConfig && typeof prop === 'string') {\n                const rootValue = target.rootConfig[prop];\n                if (rootValue !== undefined)\n                    return rootValue;\n            }\n            // The default delay value should be 20\n            if (prop === 'delay' && (node === null || node === void 0 ? void 0 : node.type) === 'input')\n                return 20;\n            // Finally check the default values\n            return defaultConfig[prop];\n        },\n        set(...args) {\n            const prop = args[1];\n            const value = args[2];\n            if (prop === '_n') {\n                node = value;\n                if (target.rootConfig)\n                    target.rootConfig._add(node);\n                return true;\n            }\n            if (prop === '_rmn') {\n                if (target.rootConfig)\n                    target.rootConfig._rm(node);\n                node = undefined;\n                return true;\n            }\n            if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.eq)(target[prop], value, false)) {\n                const didSet = Reflect.set(...args);\n                if (node) {\n                    node.emit(`config:${prop}`, value, false);\n                    configChange(node, prop, value);\n                    // Walk the node tree and notify of config/prop changes where relevant\n                    node.walk((n) => configChange(n, prop, value), true);\n                }\n                return didSet;\n            }\n            return true;\n        },\n    });\n}\n/**\n * Given a string of text, expose it for modification, translation, or full\n * replacement.\n * @param key - A message key, or generic string of text\n * @returns\n */\nfunction text(node, _context, key, type = 'ui') {\n    const fragment = typeof key === 'string' ? { key, value: key, type } : key;\n    const value = node.hook.text.dispatch(fragment);\n    node.emit('text', value, false);\n    return value.value;\n}\n/**\n * Submits the nearest ancestor that is a FormKit \"form\". It determines which\n * node is a form by locating an ancestor where node.props.isForm = true.\n * @param node - The node to initiate the submit\n */\nfunction submit(node) {\n    const name = node.name;\n    do {\n        if (node.props.isForm === true)\n            break;\n        if (!node.parent)\n            error(106, name);\n        node = node.parent;\n    } while (node);\n    if (node.props.id) {\n        submitForm(node.props.id);\n    }\n}\n/**\n * Reset to the original value.\n * @param node - The node to reset\n * @param _context - The context\n * @param value - The value to reset to\n */\nfunction resetValue(node, _context, value) {\n    return reset(node, value);\n}\n/**\n * Sets errors on the node and optionally its children.\n * @param node - The node to set errors on\n * @param _context - Not used\n * @param localErrors - An array of errors to set on this node\n * @param childErrors - An object of name to errors to set on children.\n */\nfunction setErrors$1(node, _context, localErrors, childErrors) {\n    const sourceKey = `${node.name}-set`;\n    createMessages(node, localErrors, childErrors).forEach((errors) => {\n        node.store.apply(errors, (message) => message.meta.source === sourceKey);\n    });\n    return node;\n}\n/**\n * Clears errors on the node and optionally its children.\n * @param node - The node to set errors on\n * @param _context - Not used\n * @param localErrors - An array of errors to set on this node\n * @param childErrors - An object of name to errors to set on children.\n */\nfunction clearErrors$1(node, context, clearChildErrors = true) {\n    setErrors$1(node, context, []);\n    if (clearChildErrors) {\n        const sourceKey = `${node.name}-set`;\n        node.walk((child) => {\n            child.store.filter((message) => {\n                return !(message.type === 'error' &&\n                    message.meta &&\n                    message.meta.source === sourceKey);\n            });\n        });\n    }\n    return node;\n}\n/**\n * Middleware to assign default prop values as issued by core.\n * @param node - The node being registered\n * @param next - Calls the next middleware.\n * @returns\n */\nfunction defaultProps(node) {\n    if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node.props, 'id'))\n        node.props.id = `input_${idCount++}`;\n    return node;\n}\n/**\n * @param options -\n * @param config -\n */\nfunction createProps(initial) {\n    const props = {\n        initial: typeof initial === 'object' ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.cloneAny)(initial) : initial,\n    };\n    let node;\n    let isEmitting = true;\n    return new Proxy(props, {\n        get(...args) {\n            const [_t, prop] = args;\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(props, prop))\n                return Reflect.get(...args);\n            if (node && typeof prop === 'string' && node.config[prop] !== undefined)\n                return node.config[prop];\n            return undefined;\n        },\n        set(target, property, originalValue, receiver) {\n            if (property === '_n') {\n                node = originalValue;\n                return true;\n            }\n            if (property === '_emit') {\n                isEmitting = originalValue;\n                return true;\n            }\n            const { prop, value } = node.hook.prop.dispatch({\n                prop: property,\n                value: originalValue,\n            });\n            // Typescript compiler cannot handle a symbol index, even though js can:\n            if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.eq)(props[prop], value, false) ||\n                typeof value === 'object') {\n                const didSet = Reflect.set(target, prop, value, receiver);\n                if (isEmitting) {\n                    node.emit('prop', { prop, value });\n                    if (typeof prop === 'string')\n                        node.emit(`prop:${prop}`, value);\n                }\n                return didSet;\n            }\n            return true;\n        },\n    });\n}\n/**\n * A cheap function that iterates over all plugins and stops once node.define\n * is called.\n * @param node - A formkit node\n * @param plugins - An array of plugins\n * @returns\n */\nfunction findDefinition(node, plugins) {\n    // If the definition is already there, force call to define.\n    if (node.props.definition)\n        return node.define(node.props.definition);\n    for (const plugin of plugins) {\n        if (node.props.definition)\n            return;\n        if (typeof plugin.library === 'function') {\n            plugin.library(node);\n        }\n    }\n}\n/**\n * Create a new context object for our a FormKit node, given default information\n * @param options - An options object to override the defaults.\n * @returns FormKitContext\n */\nfunction createContext(options) {\n    const value = createValue(options);\n    const config = createConfig(options.config || {}, options.parent);\n    return {\n        _d: 0,\n        _e: createEmitter(),\n        _resolve: false,\n        _tmo: false,\n        _value: value,\n        children: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.dedupe)(options.children || []),\n        config,\n        hook: createHooks(),\n        isCreated: false,\n        isSettled: true,\n        ledger: createLedger(),\n        name: createName(options),\n        parent: options.parent || null,\n        plugins: new Set(),\n        props: createProps(value),\n        settled: Promise.resolve(value),\n        store: createStore(true),\n        traps: createTraps(),\n        type: options.type || 'input',\n        value,\n    };\n}\n/**\n * Initialize a node object's internal properties.\n * @param node - The node to initialize\n * @returns FormKitNode\n */\nfunction nodeInit(node, options) {\n    var _a;\n    // Set the internal node on the props, config, ledger and store\n    node.ledger.init((node.store._n = node.props._n = node.config._n = node));\n    // Apply given in options to the node.\n    node.props._emit = false;\n    if (options.props)\n        Object.assign(node.props, options.props);\n    node.props._emit = true;\n    // Attempt to find a definition from the pre-existing plugins.\n    findDefinition(node, new Set([\n        ...(options.plugins || []),\n        ...(node.parent ? node.parent.plugins : []),\n    ]));\n    // Then we apply each plugin's root code, we do this with an explicit loop\n    // for that ity-bitty performance bump.\n    if (options.plugins) {\n        for (const plugin of options.plugins) {\n            use(node, node._c, plugin, true, false);\n        }\n    }\n    // Initialize the default props\n    defaultProps(node);\n    // Apply the parent to each child.\n    node.each((child) => node.add(child));\n    // If the node has a parent, ensure it's properly nested bi-directionally.\n    if (node.parent)\n        node.parent.add(node, options.index);\n    // Inputs are leafs, and cannot have children\n    if (node.type === 'input' && node.children.length)\n        error(100, node);\n    // Apply the input hook to the initial value.\n    input(node, node._c, node._value, false);\n    // Release the store buffer\n    node.store.release();\n    // Register the node globally if someone explicitly gave it an id\n    if ((_a = options.props) === null || _a === void 0 ? void 0 : _a.id)\n        register(node);\n    // Our node is finally ready, emit it to the world\n    node.emit('created', node);\n    node.isCreated = true;\n    return node;\n}\n/**\n * Creates a new instance of a FormKit Node. Nodes are the atomic unit of\n * a FormKit graph.\n *\n * @param options - An object of options to define the node.\n * @returns FormKitNode\n * @public\n */\nfunction createNode(options) {\n    const ops = options || {};\n    const context = createContext(ops);\n    // Note: The typing for the proxy object cannot be fully modeled, thus we are\n    // force-typing to a FormKitNode. See:\n    // https://github.com/microsoft/TypeScript/issues/28067\n    const node = new Proxy(context, {\n        get(...args) {\n            const [, property] = args;\n            if (property === '__FKNode__')\n                return true;\n            const trap = context.traps.get(property);\n            if (trap && trap.get)\n                return trap.get(node, context);\n            return Reflect.get(...args);\n        },\n        set(...args) {\n            const [, property, value] = args;\n            const trap = context.traps.get(property);\n            if (trap && trap.set)\n                return trap.set(node, context, property, value);\n            return Reflect.set(...args);\n        },\n    });\n    return nodeInit(node, ops);\n}\n\n/**\n * Type narrow that a node is a DOM node.\n * @param node - A schema node to check\n * @returns\n * @public\n */\nfunction isDOM(node) {\n    return typeof node !== 'string' && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node, '$el');\n}\n/**\n * Type narrow that a node is a DOM node.\n * @param node - A schema node to check\n * @returns\n * @public\n */\nfunction isComponent(node) {\n    return typeof node !== 'string' && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node, '$cmp');\n}\n/**\n * Root declaration.\n * @param node - An object to check\n * @returns\n * @public\n */\nfunction isConditional(node) {\n    if (!node || typeof node === 'string')\n        return false;\n    return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node, 'if') && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node, 'then');\n}\n/**\n * Determines if the node is syntactic sugar or not.\n * @param node - Node\n * @returns\n * @public\n */\nfunction isSugar(node) {\n    return typeof node !== 'string' && '$formkit' in node;\n}\n/**\n * Converts syntactic sugar nodes to standard nodes.\n * @param node - A node to covert\n * @returns\n * @public\n */\nfunction sugar(node) {\n    if (typeof node === 'string') {\n        return {\n            $el: 'text',\n            children: node,\n        };\n    }\n    if (isSugar(node)) {\n        const { $formkit: type, for: iterator, if: condition, children, key, bind, ...props } = node;\n        return Object.assign({\n            $cmp: 'FormKit',\n            props: { ...props, type },\n        }, condition ? { if: condition } : {}, iterator ? { for: iterator } : {}, children ? { children } : {}, key ? { key } : {}, bind ? { bind } : {});\n    }\n    return node;\n}\n\n/**\n * Compiles a logical string like \"a != z || b == c\" into a single function.\n * The return value is an object with a \"provide\" method that iterates over all\n * requirement tokens to use as replacements.\n * ```typescript\n * let name = {\n *   value: 'jon'\n * }\n * const condition = compile(\"$name == 'bob'\").provide((token) => {\n *  return () => name.value // must return a function!\n * })\n *\n * condition() // false\n * ```\n * @param expr - A string to compile\n * @returns\n * @public\n */\nfunction compile(expr) {\n    /**\n     * These tokens are replacements used in evaluating a given condition.\n     */\n    // const tokens: FormKitTokens = {}\n    /**\n     * The value of the provide() callback. Used for late binding.\n     */\n    let provideTokens;\n    /**\n     * These are token requirements like \"$name.value\" that are need to fulfill\n     * a given condition call.\n     */\n    const requirements = new Set();\n    /**\n     * Expands the current value if it is a function.\n     * @param operand - A left or right hand operand\n     * @returns\n     */\n    const x = function expand(operand, tokens) {\n        return typeof operand === 'function' ? operand(tokens) : operand;\n    };\n    /**\n     * Comprehensive list of operators. This list MUST be\n     * ordered by the length of the operator characters in descending order.\n     */\n    const operatorRegistry = [\n        {\n            '&&': (l, r, t) => x(l, t) && x(r, t),\n            '||': (l, r, t) => x(l, t) || x(r, t),\n        },\n        {\n            '===': (l, r, t) => !!(x(l, t) === x(r, t)),\n            '!==': (l, r, t) => !!(x(l, t) !== x(r, t)),\n            '==': (l, r, t) => !!(x(l, t) == x(r, t)),\n            '!=': (l, r, t) => !!(x(l, t) != x(r, t)),\n            '>=': (l, r, t) => !!(x(l, t) >= x(r, t)),\n            '<=': (l, r, t) => !!(x(l, t) <= x(r, t)),\n            '>': (l, r, t) => !!(x(l, t) > x(r, t)),\n            '<': (l, r, t) => !!(x(l, t) < x(r, t)),\n        },\n        {\n            '+': (l, r, t) => x(l, t) + x(r, t),\n            '-': (l, r, t) => x(l, t) - x(r, t),\n        },\n        {\n            '*': (l, r, t) => x(l, t) * x(r, t),\n            '/': (l, r, t) => x(l, t) / x(r, t),\n            '%': (l, r, t) => x(l, t) % x(r, t),\n        },\n    ];\n    /**\n     * A full list of all operator symbols.\n     */\n    const operatorSymbols = operatorRegistry.reduce((s, g) => {\n        return s.concat(Object.keys(g));\n    }, []);\n    /**\n     * An array of the first character of each operator.\n     */\n    const operatorChars = new Set(operatorSymbols.map((key) => key.charAt(0)));\n    /**\n     * Determines if the current character is the start of an operator symbol, if it\n     * is, it returns that symbol.\n     * @param symbols - An array of symbols that are considered operators\n     * @param char - The current character being operated on\n     * @param p - The position of the pointer\n     * @param expression - The full string expression\n     * @returns\n     */\n    function getOp(symbols, char, p, expression) {\n        const candidates = symbols.filter((s) => s.startsWith(char));\n        if (!candidates.length)\n            return false;\n        return candidates.find((symbol) => {\n            if (expression.length >= p + symbol.length) {\n                const nextChars = expression.substring(p, p + symbol.length);\n                if (nextChars === symbol)\n                    return symbol;\n            }\n            return false;\n        });\n    }\n    /**\n     * Determines the step number of the right or left hand operator.\n     * @param p - The position of the pointer\n     * @param expression - The full string expression\n     * @param direction - 1 = right, 0 = left\n     */\n    function getStep(p, expression, direction = 1) {\n        let next = direction\n            ? expression.substring(p + 1).trim()\n            : expression.substring(0, p).trim();\n        if (!next.length)\n            return -1;\n        if (!direction) {\n            // left hand direction could include a function name we need to remove\n            const reversed = next.split('').reverse();\n            const start = reversed.findIndex((char) => operatorChars.has(char));\n            next = reversed.slice(start).join('');\n        }\n        const char = next[0];\n        return operatorRegistry.findIndex((operators) => {\n            const symbols = Object.keys(operators);\n            return !!getOp(symbols, char, 0, next);\n        });\n    }\n    /**\n     * Extracts a tail call. For example:\n     * ```\n     * $foo().bar(baz) + 7\n     * ```\n     * Would extract \"bar(baz)\" and return p of 15 (after the (baz)).\n     *\n     * @param p - The position of a closing parenthetical.\n     * @param expression - The full expression being parsed.\n     */\n    function getTail(pos, expression) {\n        let tail = '';\n        const length = expression.length;\n        let depth = 0;\n        for (let p = pos; p < length; p++) {\n            const char = expression.charAt(p);\n            if (char === '(') {\n                depth++;\n            }\n            else if (char === ')') {\n                depth--;\n            }\n            else if (depth === 0 && char === ' ') {\n                continue;\n            }\n            if (depth === 0 && getOp(operatorSymbols, char, p, expression)) {\n                return [tail, p - 1];\n            }\n            else {\n                tail += char;\n            }\n        }\n        return [tail, expression.length - 1];\n    }\n    /**\n     * Parse a string expression into a function that returns a boolean. This is\n     * the magic behind schema logic like $if.\n     * @param expression - A string expression to parse\n     * @returns\n     */\n    function parseLogicals(expression, step = 0) {\n        const operators = operatorRegistry[step];\n        const length = expression.length;\n        const symbols = Object.keys(operators);\n        let depth = 0;\n        let quote = false;\n        let op = null;\n        let operand = '';\n        let left = null;\n        let operation;\n        let lastChar = '';\n        let char = '';\n        let parenthetical = '';\n        let parenQuote = '';\n        let startP = 0;\n        const addTo = (depth, char) => {\n            depth ? (parenthetical += char) : (operand += char);\n        };\n        for (let p = 0; p < length; p++) {\n            lastChar = char;\n            char = expression.charAt(p);\n            if ((char === \"'\" || char === '\"') &&\n                lastChar !== '\\\\' &&\n                ((depth === 0 && !quote) || (depth && !parenQuote))) {\n                if (depth) {\n                    parenQuote = char;\n                }\n                else {\n                    quote = char;\n                }\n                addTo(depth, char);\n                continue;\n            }\n            else if ((quote && (char !== quote || lastChar === '\\\\')) ||\n                (parenQuote && (char !== parenQuote || lastChar === '\\\\'))) {\n                addTo(depth, char);\n                continue;\n            }\n            else if (quote === char) {\n                quote = false;\n                addTo(depth, char);\n                continue;\n            }\n            else if (parenQuote === char) {\n                parenQuote = false;\n                addTo(depth, char);\n                continue;\n            }\n            else if (char === ' ') {\n                continue;\n            }\n            else if (char === '(') {\n                if (depth === 0) {\n                    startP = p;\n                }\n                else {\n                    parenthetical += char;\n                }\n                depth++;\n            }\n            else if (char === ')') {\n                depth--;\n                if (depth === 0) {\n                    // Parenthetical statements cannot be grouped up in the implicit order\n                    // of left/right statements based on which step they are on because\n                    // they are parsed on every step and then must be applied to the\n                    // operator. Example:\n                    //\n                    // 5 + (3) * 2\n                    //\n                    // This should yield 11 not 16. This order is normally implicit in the\n                    // sequence of operators being parsed, but with parenthesis the parse\n                    // happens each time. Instead we need to know if the resulting value\n                    // should be applied to the left or the right hand operator. The\n                    // general algorithm is:\n                    //\n                    // 1. Does this paren have an operator on the left or right side\n                    // 2. If not, it's unnecessarily wrapped (3 + 2)\n                    // 3. If it does, then which order of operation is highest?\n                    // 4. Wait for the highest order of operation to bind to an operator.\n                    // If the parenthetical has a preceding token like $fn(1 + 2) then we\n                    // need to subtract the existing operand length from the start\n                    // to determine if this is a left or right operation\n                    const fn = typeof operand === 'string' && operand.startsWith('$')\n                        ? operand\n                        : undefined;\n                    const hasTail = fn && expression.charAt(p + 1) === '.';\n                    // It's possible the function has a chained tail call:\n                    let tail = '';\n                    if (hasTail) {\n                        [tail, p] = getTail(p + 2, expression);\n                    }\n                    const lStep = op ? step : getStep(startP, expression, 0);\n                    const rStep = getStep(p, expression);\n                    if (lStep === -1 && rStep === -1) {\n                        // This parenthetical was unnecessarily wrapped at the root, or\n                        // these are args of a function call.\n                        operand = evaluate(parenthetical, -1, fn, tail);\n                    }\n                    else if (op && (lStep >= rStep || rStep === -1) && step === lStep) {\n                        // has a left hand operator with a higher order of operation\n                        left = op.bind(null, evaluate(parenthetical, -1, fn, tail));\n                        op = null;\n                        operand = '';\n                    }\n                    else if (rStep > lStep && step === rStep) {\n                        // should be applied to the right hand operator when it gets one\n                        operand = evaluate(parenthetical, -1, fn, tail);\n                    }\n                    else {\n                        operand += `(${parenthetical})${hasTail ? `.${tail}` : ''}`;\n                    }\n                    parenthetical = '';\n                }\n                else {\n                    parenthetical += char;\n                }\n            }\n            else if (depth === 0 &&\n                (operation = getOp(symbols, char, p, expression))) {\n                if (p === 0) {\n                    error(103, [operation, expression]);\n                }\n                // We identified the operator by looking ahead in the string, so we need\n                // our position to move past the operator\n                p += operation.length - 1;\n                if (p === expression.length - 1) {\n                    error(104, [operation, expression]);\n                }\n                if (!op) {\n                    // Bind the left hand operand\n                    if (left) {\n                        // In this case we've already parsed the left hand operator\n                        op = operators[operation].bind(null, evaluate(left, step));\n                        left = null;\n                    }\n                    else {\n                        op = operators[operation].bind(null, evaluate(operand, step));\n                        operand = '';\n                    }\n                }\n                else if (operand) {\n                    // Bind the right hand operand, and return the resulting expression as a new left hand operator\n                    left = op.bind(null, evaluate(operand, step));\n                    op = operators[operation].bind(null, left);\n                    operand = '';\n                }\n                continue;\n            }\n            else {\n                addTo(depth, char);\n            }\n        }\n        if (operand && op) {\n            // If we were left with an operand after the loop, and an op, it should\n            // be the right hand assignment.\n            op = op.bind(null, evaluate(operand, step));\n        }\n        // If we don't have an op, but we do have a left hand assignment, then that\n        // is actually our operator, so just re-assign it to op\n        op = !op && left ? left : op;\n        if (!op && operand) {\n            // If we don't have any op but we do have an operand so there is no boolean\n            // logic to perform, but that operand still means something so we need to\n            // evaluate it and return it as a function\n            op = (v, t) => {\n                return typeof v === 'function' ? v(t) : v;\n            };\n            op = op.bind(null, evaluate(operand, step));\n        }\n        if (!op && !operand) {\n            error(105, expression);\n        }\n        return op;\n    }\n    /**\n     * Given a string like '$name==bobby' evaluate it to true or false\n     * @param operand - A left or right boolean operand — usually conditions\n     * @param step - The current order of operation\n     * @param fnToken - The token (string) representation of a function being called\n     * @returns\n     */\n    function evaluate(operand, step, fnToken, tail //eslint-disable-line\n    ) {\n        if (fnToken) {\n            const fn = evaluate(fnToken, operatorRegistry.length);\n            let userFuncReturn;\n            // \"Tail calls\" are dot accessors after a function $foo().value. We need\n            // to compile tail calls, and then provide the function result to the\n            // exposed tokens.\n            let tailCall = tail\n                ? compile(`$${tail}`)\n                : false;\n            if (typeof fn === 'function') {\n                const args = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.parseArgs)(String(operand)).map((arg) => evaluate(arg, -1));\n                return (tokens) => {\n                    const userFunc = fn(tokens);\n                    if (typeof userFunc !== 'function') {\n                        warn(150, fnToken);\n                        return userFunc;\n                    }\n                    userFuncReturn = userFunc(...args.map((arg) => typeof arg === 'function' ? arg(tokens) : arg));\n                    if (tailCall) {\n                        tailCall = tailCall.provide((subTokens) => {\n                            const rootTokens = provideTokens(subTokens);\n                            const t = subTokens.reduce((tokenSet, token) => {\n                                const isTail = token === tail || (tail === null || tail === void 0 ? void 0 : tail.startsWith(`${token}(`));\n                                if (isTail) {\n                                    const value = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.getAt)(userFuncReturn, token);\n                                    tokenSet[token] = () => value;\n                                }\n                                else {\n                                    tokenSet[token] = rootTokens[token];\n                                }\n                                return tokenSet;\n                            }, {});\n                            return t;\n                        });\n                    }\n                    return tailCall ? tailCall() : userFuncReturn;\n                };\n            }\n        }\n        else if (typeof operand === 'string') {\n            // the word true or false will never contain further operations\n            if (operand === 'true')\n                return true;\n            if (operand === 'false')\n                return false;\n            if (operand === 'undefined')\n                return undefined;\n            // Truly quotes strings cannot contain an operation, return the string\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.isQuotedString)(operand))\n                return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.rmEscapes)(operand.substring(1, operand.length - 1));\n            // Actual numbers cannot be contain an operation\n            if (!isNaN(+operand))\n                return Number(operand);\n            if (step < operatorRegistry.length - 1) {\n                return parseLogicals(operand, step + 1);\n            }\n            else {\n                if (operand.startsWith('$')) {\n                    const cleaned = operand.substring(1);\n                    requirements.add(cleaned);\n                    return function getToken(tokens) {\n                        return cleaned in tokens ? tokens[cleaned]() : undefined;\n                    };\n                }\n                // In this case we are dealing with an unquoted string, just treat it\n                // as a plain string.\n                return operand;\n            }\n        }\n        return operand;\n    }\n    /**\n     * Compile the string.\n     */\n    const compiled = parseLogicals(expr.startsWith('$:') ? expr.substring(2) : expr);\n    /**\n     * Convert compiled requirements to an array.\n     */\n    const reqs = Array.from(requirements);\n    /**\n     * Provides token values via callback to compiled output.\n     * @param callback - A callback that needs to provide all token requirements\n     * @returns\n     */\n    function provide(callback) {\n        provideTokens = callback;\n        return Object.assign(compiled.bind(null, callback(reqs)), {\n            provide,\n        });\n    }\n    return Object.assign(compiled, {\n        provide,\n    });\n}\n\n/**\n * Function that produces a standardized object representation of CSS classes\n * @param propertyKey - section key\n * @param node - FormKit node\n * @param sectionClassList - Things to turn into classes\n * @returns\n * @public\n */\nfunction createClasses(propertyKey, node, sectionClassList) {\n    if (!sectionClassList)\n        return {};\n    if (typeof sectionClassList === 'string') {\n        const classKeys = sectionClassList.split(' ');\n        return classKeys.reduce((obj, key) => Object.assign(obj, { [key]: true }), {});\n    }\n    else if (typeof sectionClassList === 'function') {\n        return createClasses(propertyKey, node, sectionClassList(node, propertyKey));\n    }\n    return sectionClassList;\n}\n/**\n * Combines multiple class lists into a single list\n * @param node - the FormKit node being operated on\n * @param property - The property key to which the class list will be applied\n * @param args - CSS class list(s)\n * @returns\n * @public\n */\nfunction generateClassList(node, property, ...args) {\n    const combinedClassList = args.reduce((finalClassList, currentClassList) => {\n        if (!currentClassList)\n            return finalClassList;\n        const { $reset, ...classList } = currentClassList;\n        if ($reset) {\n            return classList;\n        }\n        return Object.assign(finalClassList, classList);\n    }, {});\n    return (Object.keys(node.hook.classes.dispatch({ property, classes: combinedClassList })\n        .classes)\n        .filter((key) => combinedClassList[key])\n        .join(' ') || null);\n}\n\n/**\n * Sets errors on a form, group, or input.\n * @param formId - The id of a form\n * @param localErrors - The errors to set on the form or the form’s inputs\n * @param childErrors - (optional) The errors to set on the form or the form’s inputs\n * @public\n */\nfunction setErrors(id, localErrors, childErrors) {\n    const node = getNode$1(id);\n    if (node) {\n        node.setErrors(localErrors, childErrors);\n    }\n    else {\n        warn(651, id);\n    }\n}\n/**\n * Clears child errors.\n * @param id - The id of the node you want to clear errors for\n * @param clearChildren - Determines if the the children of this node should have their errors cleared.\n * @public\n */\nfunction clearErrors(id, clearChildren = true) {\n    const node = getNode$1(id);\n    if (node) {\n        node.clearErrors(clearChildren);\n    }\n    else {\n        warn(652, id);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/core/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/dev/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@formkit/dev/dist/index.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"errors\": function() { return /* binding */ errors; },\n/* harmony export */   \"warnings\": function() { return /* binding */ warnings; }\n/* harmony export */ });\n/* harmony import */ var _formkit_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/core */ \"./node_modules/@formkit/core/dist/index.mjs\");\n\n\nlet registered = false;\n/**\n * Catalog of the error message codes in FormKit.\n * @public\n */\nconst errors = {\n    /**\n     * FormKit errors:\n     */\n    100: ({ data: node }) => `Only groups, lists, and forms can have children (${node.name}).`,\n    101: ({ data: node }) => `You cannot directly modify the store (${node.name}). See: https://formkit.com/advanced/core#message-store`,\n    102: ({ data: [node, property], }) => `You cannot directly assign node.${property} (${node.name})`,\n    103: ({ data: [operator] }) => `Schema expressions cannot start with an operator (${operator})`,\n    104: ({ data: [operator, expression] }) => `Schema expressions cannot end with an operator (${operator} in \"${expression}\")`,\n    105: ({ data: expression }) => `Invalid schema expression: ${expression}`,\n    106: ({ data: name }) => `Cannot submit because (${name}) is not in a form.`,\n    107: ({ data: [node, value] }) => `Cannot set ${node.name} to non object value: ${value}`,\n    108: ({ data: [node, value] }) => `Cannot set ${node.name} to non array value: ${value}`,\n    /**\n     * FormKit vue errors:\n     */\n    600: ({ data: node }) => `Unknown input type${typeof node.props.type === 'string' ? ' \"' + node.props.type + '\"' : ''} (\"${node.name}\")`,\n    601: ({ data: node }) => `Input definition${typeof node.props.type === 'string' ? ' \"' + node.props.type + '\"' : ''} is missing a schema or component property (${node.name}).`,\n};\n/**\n * Catalog of the warning message codes in FormKit.\n * @public\n */\nconst warnings = {\n    /**\n     * Core warnings:\n     */\n    150: ({ data: fn }) => `Schema function \"${fn}()\" is not a valid function.`,\n    151: ({ data: id }) => `No form element with id: ${id}`,\n    152: ({ data: id }) => `No input element with id: ${id}`,\n    /**\n     * Input specific warnings:\n     */\n    350: ({ data: node }) => `Invalid options prop for radio input (${node.name}). See https://formkit.com/inputs/radio`,\n    /**\n     * Vue warnings:\n     */\n    650: 'Schema \"$get()\" must use the id of an input to access.',\n    651: ({ data: id }) => `Cannot setErrors() on \"${id}\" because no such id exists.`,\n    652: ({ data: id }) => `Cannot clearErrors() on \"${id}\" because no such id exists.`,\n    /**\n     * Deprecation warnings:\n     */\n};\n/**\n * Decodes an error that is being emitted and console logs it.\n * @param error - The error currently being handled\n * @param next - Call additional handlers\n * @returns\n */\nconst decodeErrors = (error, next) => {\n    if (error.code in errors) {\n        const err = errors[error.code];\n        error.message = typeof err === 'function' ? err(error) : err;\n    }\n    return next(error);\n};\nif (!registered)\n    (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler)(decodeErrors);\n/**\n * Decodes an error that is being emitted and console logs it.\n * @param error - The error currently being handled\n * @param next - Call additional handlers\n * @returns\n */\nconst decodeWarnings = (warning, next) => {\n    if (warning.code in warnings) {\n        const warn = warnings[warning.code];\n        warning.message = typeof warn === 'function' ? warn(warning) : warn;\n    }\n    return next(warning);\n};\nif (!registered)\n    (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.warningHandler)(decodeWarnings);\nregistered = true;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZvcm1raXQvZGV2L2Rpc3QvaW5kZXgubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0Bmb3Jta2l0L2Rldi9kaXN0L2luZGV4Lm1qcz8zMGZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ySGFuZGxlciwgd2FybmluZ0hhbmRsZXIgfSBmcm9tICdAZm9ybWtpdC9jb3JlJztcblxubGV0IHJlZ2lzdGVyZWQgPSBmYWxzZTtcbi8qKlxuICogQ2F0YWxvZyBvZiB0aGUgZXJyb3IgbWVzc2FnZSBjb2RlcyBpbiBGb3JtS2l0LlxuICogQHB1YmxpY1xuICovXG5jb25zdCBlcnJvcnMgPSB7XG4gICAgLyoqXG4gICAgICogRm9ybUtpdCBlcnJvcnM6XG4gICAgICovXG4gICAgMTAwOiAoeyBkYXRhOiBub2RlIH0pID0+IGBPbmx5IGdyb3VwcywgbGlzdHMsIGFuZCBmb3JtcyBjYW4gaGF2ZSBjaGlsZHJlbiAoJHtub2RlLm5hbWV9KS5gLFxuICAgIDEwMTogKHsgZGF0YTogbm9kZSB9KSA9PiBgWW91IGNhbm5vdCBkaXJlY3RseSBtb2RpZnkgdGhlIHN0b3JlICgke25vZGUubmFtZX0pLiBTZWU6IGh0dHBzOi8vZm9ybWtpdC5jb20vYWR2YW5jZWQvY29yZSNtZXNzYWdlLXN0b3JlYCxcbiAgICAxMDI6ICh7IGRhdGE6IFtub2RlLCBwcm9wZXJ0eV0sIH0pID0+IGBZb3UgY2Fubm90IGRpcmVjdGx5IGFzc2lnbiBub2RlLiR7cHJvcGVydHl9ICgke25vZGUubmFtZX0pYCxcbiAgICAxMDM6ICh7IGRhdGE6IFtvcGVyYXRvcl0gfSkgPT4gYFNjaGVtYSBleHByZXNzaW9ucyBjYW5ub3Qgc3RhcnQgd2l0aCBhbiBvcGVyYXRvciAoJHtvcGVyYXRvcn0pYCxcbiAgICAxMDQ6ICh7IGRhdGE6IFtvcGVyYXRvciwgZXhwcmVzc2lvbl0gfSkgPT4gYFNjaGVtYSBleHByZXNzaW9ucyBjYW5ub3QgZW5kIHdpdGggYW4gb3BlcmF0b3IgKCR7b3BlcmF0b3J9IGluIFwiJHtleHByZXNzaW9ufVwiKWAsXG4gICAgMTA1OiAoeyBkYXRhOiBleHByZXNzaW9uIH0pID0+IGBJbnZhbGlkIHNjaGVtYSBleHByZXNzaW9uOiAke2V4cHJlc3Npb259YCxcbiAgICAxMDY6ICh7IGRhdGE6IG5hbWUgfSkgPT4gYENhbm5vdCBzdWJtaXQgYmVjYXVzZSAoJHtuYW1lfSkgaXMgbm90IGluIGEgZm9ybS5gLFxuICAgIDEwNzogKHsgZGF0YTogW25vZGUsIHZhbHVlXSB9KSA9PiBgQ2Fubm90IHNldCAke25vZGUubmFtZX0gdG8gbm9uIG9iamVjdCB2YWx1ZTogJHt2YWx1ZX1gLFxuICAgIDEwODogKHsgZGF0YTogW25vZGUsIHZhbHVlXSB9KSA9PiBgQ2Fubm90IHNldCAke25vZGUubmFtZX0gdG8gbm9uIGFycmF5IHZhbHVlOiAke3ZhbHVlfWAsXG4gICAgLyoqXG4gICAgICogRm9ybUtpdCB2dWUgZXJyb3JzOlxuICAgICAqL1xuICAgIDYwMDogKHsgZGF0YTogbm9kZSB9KSA9PiBgVW5rbm93biBpbnB1dCB0eXBlJHt0eXBlb2Ygbm9kZS5wcm9wcy50eXBlID09PSAnc3RyaW5nJyA/ICcgXCInICsgbm9kZS5wcm9wcy50eXBlICsgJ1wiJyA6ICcnfSAoXCIke25vZGUubmFtZX1cIilgLFxuICAgIDYwMTogKHsgZGF0YTogbm9kZSB9KSA9PiBgSW5wdXQgZGVmaW5pdGlvbiR7dHlwZW9mIG5vZGUucHJvcHMudHlwZSA9PT0gJ3N0cmluZycgPyAnIFwiJyArIG5vZGUucHJvcHMudHlwZSArICdcIicgOiAnJ30gaXMgbWlzc2luZyBhIHNjaGVtYSBvciBjb21wb25lbnQgcHJvcGVydHkgKCR7bm9kZS5uYW1lfSkuYCxcbn07XG4vKipcbiAqIENhdGFsb2cgb2YgdGhlIHdhcm5pbmcgbWVzc2FnZSBjb2RlcyBpbiBGb3JtS2l0LlxuICogQHB1YmxpY1xuICovXG5jb25zdCB3YXJuaW5ncyA9IHtcbiAgICAvKipcbiAgICAgKiBDb3JlIHdhcm5pbmdzOlxuICAgICAqL1xuICAgIDE1MDogKHsgZGF0YTogZm4gfSkgPT4gYFNjaGVtYSBmdW5jdGlvbiBcIiR7Zm59KClcIiBpcyBub3QgYSB2YWxpZCBmdW5jdGlvbi5gLFxuICAgIDE1MTogKHsgZGF0YTogaWQgfSkgPT4gYE5vIGZvcm0gZWxlbWVudCB3aXRoIGlkOiAke2lkfWAsXG4gICAgMTUyOiAoeyBkYXRhOiBpZCB9KSA9PiBgTm8gaW5wdXQgZWxlbWVudCB3aXRoIGlkOiAke2lkfWAsXG4gICAgLyoqXG4gICAgICogSW5wdXQgc3BlY2lmaWMgd2FybmluZ3M6XG4gICAgICovXG4gICAgMzUwOiAoeyBkYXRhOiBub2RlIH0pID0+IGBJbnZhbGlkIG9wdGlvbnMgcHJvcCBmb3IgcmFkaW8gaW5wdXQgKCR7bm9kZS5uYW1lfSkuIFNlZSBodHRwczovL2Zvcm1raXQuY29tL2lucHV0cy9yYWRpb2AsXG4gICAgLyoqXG4gICAgICogVnVlIHdhcm5pbmdzOlxuICAgICAqL1xuICAgIDY1MDogJ1NjaGVtYSBcIiRnZXQoKVwiIG11c3QgdXNlIHRoZSBpZCBvZiBhbiBpbnB1dCB0byBhY2Nlc3MuJyxcbiAgICA2NTE6ICh7IGRhdGE6IGlkIH0pID0+IGBDYW5ub3Qgc2V0RXJyb3JzKCkgb24gXCIke2lkfVwiIGJlY2F1c2Ugbm8gc3VjaCBpZCBleGlzdHMuYCxcbiAgICA2NTI6ICh7IGRhdGE6IGlkIH0pID0+IGBDYW5ub3QgY2xlYXJFcnJvcnMoKSBvbiBcIiR7aWR9XCIgYmVjYXVzZSBubyBzdWNoIGlkIGV4aXN0cy5gLFxuICAgIC8qKlxuICAgICAqIERlcHJlY2F0aW9uIHdhcm5pbmdzOlxuICAgICAqL1xufTtcbi8qKlxuICogRGVjb2RlcyBhbiBlcnJvciB0aGF0IGlzIGJlaW5nIGVtaXR0ZWQgYW5kIGNvbnNvbGUgbG9ncyBpdC5cbiAqIEBwYXJhbSBlcnJvciAtIFRoZSBlcnJvciBjdXJyZW50bHkgYmVpbmcgaGFuZGxlZFxuICogQHBhcmFtIG5leHQgLSBDYWxsIGFkZGl0aW9uYWwgaGFuZGxlcnNcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IGRlY29kZUVycm9ycyA9IChlcnJvciwgbmV4dCkgPT4ge1xuICAgIGlmIChlcnJvci5jb2RlIGluIGVycm9ycykge1xuICAgICAgICBjb25zdCBlcnIgPSBlcnJvcnNbZXJyb3IuY29kZV07XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgPSB0eXBlb2YgZXJyID09PSAnZnVuY3Rpb24nID8gZXJyKGVycm9yKSA6IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoZXJyb3IpO1xufTtcbmlmICghcmVnaXN0ZXJlZClcbiAgICBlcnJvckhhbmRsZXIoZGVjb2RlRXJyb3JzKTtcbi8qKlxuICogRGVjb2RlcyBhbiBlcnJvciB0aGF0IGlzIGJlaW5nIGVtaXR0ZWQgYW5kIGNvbnNvbGUgbG9ncyBpdC5cbiAqIEBwYXJhbSBlcnJvciAtIFRoZSBlcnJvciBjdXJyZW50bHkgYmVpbmcgaGFuZGxlZFxuICogQHBhcmFtIG5leHQgLSBDYWxsIGFkZGl0aW9uYWwgaGFuZGxlcnNcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IGRlY29kZVdhcm5pbmdzID0gKHdhcm5pbmcsIG5leHQpID0+IHtcbiAgICBpZiAod2FybmluZy5jb2RlIGluIHdhcm5pbmdzKSB7XG4gICAgICAgIGNvbnN0IHdhcm4gPSB3YXJuaW5nc1t3YXJuaW5nLmNvZGVdO1xuICAgICAgICB3YXJuaW5nLm1lc3NhZ2UgPSB0eXBlb2Ygd2FybiA9PT0gJ2Z1bmN0aW9uJyA/IHdhcm4od2FybmluZykgOiB3YXJuO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dCh3YXJuaW5nKTtcbn07XG5pZiAoIXJlZ2lzdGVyZWQpXG4gICAgd2FybmluZ0hhbmRsZXIoZGVjb2RlV2FybmluZ3MpO1xucmVnaXN0ZXJlZCA9IHRydWU7XG5cbmV4cG9ydCB7IGVycm9ycywgd2FybmluZ3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@formkit/dev/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/i18n/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@formkit/i18n/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ar\": function() { return /* binding */ ar; },\n/* harmony export */   \"createI18nPlugin\": function() { return /* binding */ createI18nPlugin; },\n/* harmony export */   \"cs\": function() { return /* binding */ cs; },\n/* harmony export */   \"da\": function() { return /* binding */ da; },\n/* harmony export */   \"date\": function() { return /* binding */ date; },\n/* harmony export */   \"de\": function() { return /* binding */ de; },\n/* harmony export */   \"en\": function() { return /* binding */ en; },\n/* harmony export */   \"es\": function() { return /* binding */ es; },\n/* harmony export */   \"fa\": function() { return /* binding */ fa; },\n/* harmony export */   \"fi\": function() { return /* binding */ fi; },\n/* harmony export */   \"fr\": function() { return /* binding */ fr; },\n/* harmony export */   \"fy\": function() { return /* binding */ fy; },\n/* harmony export */   \"he\": function() { return /* binding */ he; },\n/* harmony export */   \"hr\": function() { return /* binding */ hr; },\n/* harmony export */   \"id\": function() { return /* binding */ id; },\n/* harmony export */   \"it\": function() { return /* binding */ it; },\n/* harmony export */   \"ja\": function() { return /* binding */ ja; },\n/* harmony export */   \"ko\": function() { return /* binding */ ko; },\n/* harmony export */   \"list\": function() { return /* binding */ list; },\n/* harmony export */   \"locales\": function() { return /* binding */ locales; },\n/* harmony export */   \"nl\": function() { return /* binding */ nl; },\n/* harmony export */   \"order\": function() { return /* binding */ order; },\n/* harmony export */   \"pl\": function() { return /* binding */ pl; },\n/* harmony export */   \"pt\": function() { return /* binding */ pt; },\n/* harmony export */   \"ro\": function() { return /* binding */ ro; },\n/* harmony export */   \"ru\": function() { return /* binding */ ru; },\n/* harmony export */   \"sentence\": function() { return /* binding */ sentence; },\n/* harmony export */   \"sl\": function() { return /* binding */ sl; },\n/* harmony export */   \"sv\": function() { return /* binding */ sv; },\n/* harmony export */   \"th\": function() { return /* binding */ th; },\n/* harmony export */   \"tr\": function() { return /* binding */ tr; },\n/* harmony export */   \"vi\": function() { return /* binding */ vi; },\n/* harmony export */   \"zh\": function() { return /* binding */ zh; }\n/* harmony export */ });\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n\n\n/**\n * Given a string, convert it to sentence case.\n * @param item - The string to sentence case\n * @returns\n * @public\n */\nfunction sentence(str) {\n    return str[0].toUpperCase() + str.substr(1);\n}\n/**\n * Creates an oxford-comma separated list of items.\n * @param args - items to list out\n * @param conjunction - in: x, y, and z \"and\" is the conjunction to use\n * @returns\n * @public\n */\nfunction list(items, conjunction = 'or') {\n    return items.reduce((oxford, item, index) => {\n        oxford += item;\n        if (index <= items.length - 2 && items.length > 2) {\n            oxford += ', ';\n        }\n        if (index === items.length - 2) {\n            oxford += `${items.length === 2 ? ' ' : ''}${conjunction} `;\n        }\n        return oxford;\n    }, '');\n}\n/**\n * Given a string or a date return a nice human-readable version.\n * @param date - A string or a date.\n * @public\n */\nfunction date(date) {\n    const dateTime = typeof date === 'string' ? new Date(Date.parse(date)) : date;\n    if (!(dateTime instanceof Date)) {\n        return '(unknown)';\n    }\n    return new Intl.DateTimeFormat(undefined, {\n        dateStyle: 'medium',\n    }).format(dateTime);\n}\n/**\n * Orders two variables smallest to largest.\n * @param first - first argument\n * @param second - Second argument\n * @returns\n * @public\n */\nfunction order(first, second) {\n    return Number(first) >= Number(second) ? [second, first] : [first, second];\n}\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$q = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'إضافة',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'إزالة',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'إزالة الكل',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'عذرا، لم يتم تعبئة جميع الحقول بشكل صحيح.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'إرسال',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'لا يوجد ملف مختار',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$q = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `الرجاء قبول ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} بعد ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} في المستقبل.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف أبجدية فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف وأرقام فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `يمكن أن تحتوي ${sentence(name)} على أحرف ومسافات فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} قبل ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} في الماضي.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `يجب أن يكون ${sentence(name)} ما بين ${a} و ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} غير متطابق.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ليس تاريخًا صالحًا ، يرجى استخدام التنسيق ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `يجب أن يكون ${sentence(name)} بين ${date(args[0])} و ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'الرجاء أدخال بريد إليكتروني صالح.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `لا ينتهي ${sentence(name)} بـ ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `يجب أن يكون ${sentence(name)} حرفًا واحدًا على الأقل.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${max} حرفًا.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} أكبر من أو يساوي ${min} حرفًا.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} بين ${min} و ${max} حرفًا.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `لا يمكن أن يكون أكثر من ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'لا يسمح بتنسيقات الملفات.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} من النوع: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `لا يمكن أن يكون أقل من ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} على الأقل ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ليس ${name} مسموحًا به.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} يجب ان يكون رقماً`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} مطلوب.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `لا يبدأ ${sentence(name)} بـ ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `الرجاء تضمين عنوان رابط صحيح.`;\n        /* </i18n> */\n    },\n};\n\nvar ar = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$q,\n    validation: validation$q\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$p = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Přidat',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odebrat',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odebrat vše',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pardon, ale ne všechna pole jsou vyplněna správně.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Odeslat',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Žádný soubor nebyl vybrán',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$p = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosím, zaškrtněte ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musí být po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí být v budoucnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} může obsahovat pouze písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} může obsahovat pouze písmena a čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musí být před ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí být v minulosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} musí být mezi ${a} a ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nejsou shodná.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} není platné datum, prosím, použijte formát ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} musí být mezi ${date(args[0])} a ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Prosím, zadejte platnou e-mailovou adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nekončí na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} není povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} musí mít nejméně jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} může mít maximálně ${max} znaků.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} musí obsahovat minimálně ${min} znaků.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} musí být dlouhé ${min} až ${max} znaků.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} není povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nelze použít více než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} musí mít menší nebo rovno než ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nejsou nakonfigurovány povolené typy souborů.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musí být typu: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nelze mít méně než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} musí být minimálně ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” není dovolená hodnota pro ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musí být číslo.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je povinné.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nezačíná na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Zadejte, prosím, platnou URL adresu.`;\n        /* </i18n> */\n    },\n};\n\nvar cs = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$p,\n    validation: validation$p\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$o = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Tilføj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Fjern',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Fjern alle',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Alle felter er ikke korrekt udfyldt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Send',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen filer valgt',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$o = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Accepter venligst ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} skal være senere end ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} skal være i fremtiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver og tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver og mellemrum.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} skal være før ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} skal være før i dag.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} skal være mellem ${a} og ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} matcher ikke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} er ikke gyldig, brug venligst formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} skal være mellem ${date(args[0])} og ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Indtast venligst en gyldig email-adresse.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} er ikke en gyldig værdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} skal være på mindst ét tegn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} skal være på højst ${max} tegn.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} skal være på mindst ${min} tegn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} skal være på mindst ${min} og højst ${max} tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} er ikke en gyldig værdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan ikke have flere end ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} skal være mindre eller lig med ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ingen filformater tilladt.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} skal være af filtypen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan ikke have mindre end ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} skal være mindst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” er ikke en tilladt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} skal være et tal.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} er påkrævet.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Indtast venligst en gyldig URL.`;\n        /* </i18n> */\n    },\n};\n\nvar da = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$o,\n    validation: validation$o\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$n = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Hinzufügen',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Entfernen',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Alles entfernen',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Entschuldigung, nicht alle Felder wurden korrekt ausgefüllt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Senden',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Keine Datei ausgewählt',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$n = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Bitte ${name} akzeptieren.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} muss nach dem ${date(args[0])} liegen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} muss in der Zukunft liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} darf nur Buchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} darf nur Buchstaben und Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} dürfen nur Buchstaben und Leerzeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} muss vor dem ${date(args[0])} liegen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} muss in der Vergangenheit liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} muss zwischen ${args[0]} und ${args[1]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} stimmt nicht überein.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ist kein gültiges Datum im Format ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} muss zwischen ${date(args[0])} und ${date(args[1])} liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'E-Mail Adresse ist ungültig.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} endet nicht mit ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} muss mindestens ein Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} darf maximal ${max} Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} muss mindestens ${min} Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} muss zwischen ${min} und ${max} Zeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Darf maximal ${args[0]} ${name} haben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} darf maximal ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Keine Dateiformate konfiguriert.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} muss vom Typ ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mindestens ${args[0]} ${name} erforderlich.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} muss mindestens ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ist kein gültiger Wert für ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} muss eine Zahl sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} ist erforderlich.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} beginnt nicht mit ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `URL ist ungültig.`;\n        /* </i18n> */\n    },\n};\n\nvar de = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$n,\n    validation: validation$n\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$m = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Add',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Remove',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Remove all',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, not all fields are filled out correctly.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Submit',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'No file chosen',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$m = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Please accept the ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} must be after ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} must be in the future.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} can only contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} can only contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} can only contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} must be before ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} must be in the past.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `This field was configured incorrectly and can’t be submitted.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} must be between ${a} and ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} does not match.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is not a valid date, please use the format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'This field was configured incorrectly and can’t be submitted';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} must be between ${date(args[0])} and ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Please enter a valid email address.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} doesn’t end with ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is not an allowed value.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} must be at least one character.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} must be less than or equal to ${max} characters.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} must be greater than or equal to ${min} characters.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} must be between ${min} and ${max} characters.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is not an allowed value.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Cannot have more than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} must be less than or equal to ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No file formats allowed.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} must be of the type: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Cannot have less than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} must be at least ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” is not an allowed ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} must be a number.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is required.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} doesn’t start with ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Please include a valid url.`;\n        /* </i18n> */\n    },\n};\n\nvar en = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$m,\n    validation: validation$m\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$l = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Añadir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Quitar',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Quitar todos',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Discúlpe, los campos no fueron completados correctamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Archivo no seleccionado',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$l = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Acepte el ${name} por favor.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} debe ser posterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} debe ser una fecha futura.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} debe contener solo caractéres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} debe ser alfanumérico.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} espacios alfa solo pueden contener letras y espacios.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} debe ser anterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} debe ser una fecha pasada.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `El campo no fue completado correctamente y no puede ser enviado.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} debe estar entre ${a} y ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} no coincide.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} no es una fecha válida, por favor utilice el formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'El campo no fue completado correctamente y no puede ser enviado.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} debe estar entre ${date(args[0])} y ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Ingrese una dirección de correo electrónico válida por favor.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no termina con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} no es un valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} debe tener al menos una letra.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} debe tener como máximo ${max} caractéres.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} debe tener como mínimo ${min} caractéres.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} debe tener entre ${min} y ${max} caractéres.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} no es un valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Cannot have more than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} debe ser menor o igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No existen formatos de archivos permitidos.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} debe ser del tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Cannot have less than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} debe ser de al menos ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” no es un valor permitido de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} debe ser un número.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} es requerido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} debe comenzar con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Proporcione una URL válida por favor.`;\n        /* </i18n> */\n    },\n};\n\nvar es = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$l,\n    validation: validation$l\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$k = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'افزودن',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'حذف',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'همه را حذف کنید',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'همه فیلدها به‌درستی پر نشده‌اند',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'ثبت',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'هیچ فایلی انتخاب نشده است',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$k = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `لطفاً ${name} را بپذیرید.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} باید بعد از تاریخ ${date(args[0])} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} باید مربوط به آینده باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} فقط میتواند شامل حروف الفبا باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} فقط میتواند شامل حروف و اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} فقط می تواند شامل حروف و فاصله باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} باید قبل از تاریخ ${date(args[0])} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} باید مربوط به گذشته باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} باید بین ${args[0]} و ${args[1]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} مطابقت ندارد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} تاریخ معتبری نیست، لطفاً از قالب ${args[0]} استفاده کنید\n`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} باید بین ${date(args[0])} و ${date(args[1])} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'لطفا آدرس ایمیل معتبر وارد کنید.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} باید به ${list(args)} ختم شود.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} باید حداقل یک کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} باید کمتر یا برابر با ${max} کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} باید بزرگتر یا برابر با ${min} کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} باید بین ${min} و ${max} کاراکتر باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} نمی تواند بیش از ${args[0]} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} باید کمتر یا برابر با ${args[0]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'فرمت فایل مجاز نیست.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} باید از این نوع باشد: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} نمی تواند کمتر از ${args[0]} باشد.\n`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} باید حداقل ${args[0]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" یک ${name} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} باید عدد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `پر کردن ${sentence(name)} اجباری است.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} باید با ${list(args)} شروع شود.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `لطفاً آدرس اینترنتی معتبر وارد کنید.`;\n        /* </i18n> */\n    },\n};\n\nvar fa = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$k,\n    validation: validation$k\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$j = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Lisää',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Poista',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Poista kaikki',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Kaikkia kenttiä ei ole täytetty oikein.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Tallenna',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ei valittuja tiedostoja',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$j = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Ole hyvä ja hyväksy ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} tulee olla ${date(args[0])} jälkeen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} on oltava tulevaisuudessa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} saa sisältää vain kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} saa sisältää vain kirjaimia ja numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} voivat sisältää vain kirjaimia ja välilyöntejä.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} tulee olla ennen: ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} on oltava menneisyydessä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} on oltava välillä ${a} - ${b} `;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ei täsmää.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ei ole validi päivämäärä, ole hyvä ja syötä muodossa: ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} on oltava välillä ${date(args[0])} - ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Syötä validi sähköpostiosoite.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} tulee päättyä ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ei ole sallittu vaihtoehto.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} on oltava vähintään yksi merkki.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} on oltava ${max} tai alle merkkiä.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} on oltava vähintään ${min} merkkiä.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} on oltava vähintään ${min}, enintään ${max} merkkiä.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ei ole sallittu arvo.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Valitse enintään ${args[0]} ${name} vaihtoehtoa.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} on oltava ${args[0]} tai alle.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Tiedostoja ei sallita.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} tulee olla ${args[0]}-tiedostotyyppiä.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Valitse vähintään ${args[0]} ${name} vaihtoehtoa.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} tulee olla ${args[0]} tai suurempi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ei ole sallittu ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Kentän ${sentence(name)} tulee olla numero.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} vaaditaan.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} on alettava ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Syötä validi url-osoite.`;\n        /* </i18n> */\n    },\n};\n\nvar fi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$j,\n    validation: validation$j\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$i = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Ajouter',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Supprimer',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Enlever tout',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Désolé, tous les champs ne sont pas remplis correctement.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Valider',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Aucun fichier choisi',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$i = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Veuillez accepter le ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} doit être postérieure au ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} doit être dans le futur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} ne peut contenir que des caractères alphabétiques.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} ne peut contenir que des lettres et des chiffres.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ne peuvent contenir que des lettres et des espaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} doit être antérieure au ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} doit être dans le passé.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} doit être comprise entre ${a} et ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne correspond pas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} n'est pas une date valide, veuillez utiliser le format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} doit être comprise entre ${date(args[0])} et ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Veuillez saisir une adresse email valide.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne se termine pas par ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} doit comporter au moins un caractère.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} doit être inférieur ou égal à ${max} caractères.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} doit être supérieur ou égal à ${min} caractères.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} doit être comprise entre ${min} et ${max} caractères.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne peut pas avoir plus de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} doit être inférieur ou égal à ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Aucun format de fichier n’est autorisé';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} doit être du type: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ne peut pas avoir moins de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} doit être au moins de ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” n'est pas un ${name} autorisé.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} doit être un nombre.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} est requis.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne commence pas par ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Veuillez saisir une url valide.`;\n        /* </i18n> */\n    },\n};\n\nvar fr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$i,\n    validation: validation$i\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$h = {\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ferwider',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ferwider alles',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, net alle fjilden binne korrekt ynfolle.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Ferstjoere',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Gjin bestân keazen',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$h = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Akseptearje de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} moat nei ${date(args[0])} wêze.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moat yn de takomst lizze.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mei allinne alfabetyske tekens befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mei allinne letters en sifers befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} moat foar ${date(args[0])} falle.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moat yn it ferline wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} moat tusken ${a} en ${b} lizze.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} komt net oerien.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is gjin jildige datum, brûk de notaasje ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} moat tusken ${date(args[0])} en ${date(args[1])} lizze`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Folje in jildich e-mailadres yn.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} einiget net mei ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is gjin tastiene wearde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} moat minimaal ien teken wêze.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${max} tekens.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} moat grutter wêze as of gelyk wêze oan ${min} tekens.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} moat tusken de ${min} en ${max} tekens befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is gjin tastiene wearde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Mei net mear as ${args[0]} ${name} hawwe.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Gjin bestânsnotaasjes tastien.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} moat fan it type: ${args[0]} wêze`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mei net minder as ${args[0]} ${name} hawwe.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} moat minimaal ${args[0]} wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" is gjin tastiene ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} moat in getal wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is ferplicht.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} begjint net mei ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Doch der in jildige url by.`;\n        /* </i18n> */\n    },\n};\n\nvar fy = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$h,\n    validation: validation$h\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$g = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'הוסף',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'מחק',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'שים לב, לא כל השדות מלאים כראוי.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'שלח',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$g = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `אנא אשר את ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות אחרי ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בעתיד.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות אלפבת.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} יכול להכיל רק מספרים ואותיות.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} יכול להכיל רק אותיות ורווחים.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות לפני ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בעבר`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `שדה זה לא הוגדר כראוי ולא יכול להישלח.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} חייב להיות בין ${args[0]} ו-${args[1]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} לא מתאים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} הוא לא תאריך תקין, אנא השתמש בפורמט ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'שדה זה לא הוגדר כראוי ולא יכול להישלח.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} חייב להיות בין ${date(args[0])} ו- ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'אנא הקלד אימייל תקין.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} לא מסתיים ב- ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} הוא לא ערך מורשה.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} חייב להיות לפחות תו אחד.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות פחות או שווה ל- ${max} תווים.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} חייב ליות גדול או שווה ל- ${min} תווים.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בין ${min} ו- ${max} תווים.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} הוא לא ערך תקין.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} לא יכול להיות עם יותר מ- ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות פחות או שווה ל- ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'פורמט הקובץ לא מורשה.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות מסוג: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} לא יכול להיות עם פחות מ- ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות לפחות ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” לא מתאים ל- ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} חייב להיות מספר.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} הינו חובה.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} לא מתחיל ב- ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `אנא הקלד קישור תקין.`;\n        /* </i18n> */\n    },\n};\n\nvar he = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$g,\n    validation: validation$g\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$f = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ukloni',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Predaj',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$f = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Potrebno je potvrditi ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti u periodu poslije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u budućnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mora sadržavati samo slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora sadržavati slova i brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mogu sadržavati samo slova i razmake..`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti prije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u prošlosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Format sadržaja nije ispravan i ne može biti predan.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti između ${args[0]} i ${args[1]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne odgovara zadanoj vrijednosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nije ispravan format datuma. Molimo koristite sljedeći format: ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ovo polje nije ispravno postavljeno i ne može biti predano.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti vrijednost između ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Molimo upišite ispravnu email adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne završava s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nije dopuštena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora sadržavati barem jedan znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora imati ${max} ili manje znakova.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora imati barem ${min} znakova.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Broj znakova za polje ${sentence(name)} mora biti između ${min} i ${max}.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nije dozvoljena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne smije imati više od ${args[0]} ${name} polja.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} mora imati vrijednost manju ili jednaku ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Format datoteke nije dozvoljen.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Format datoteke na polju ${sentence(name)} mora odgovarati: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Broj upisanih vrijednosti na polju ${name} mora biti barem ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti barem ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nije dozvoljena vrijednost na polju ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti broj.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je obavezno.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne počinje s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Molimo unesite ispravnu poveznicu.`;\n        /* </i18n> */\n    },\n};\n\nvar hr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$f,\n    validation: validation$f\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$e = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Tambah',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Hapus',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hapus semua',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Maaf, tidak semua bidang formulir terisi dengan benar',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Kirim',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Tidak ada file yang dipilih',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$e = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Tolong terima kolom ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} nilainya harus lebih dari waktu ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} harus berisi waktu di masa depan.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} hanya bisa diisi huruf alfabet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} hanya bisa diisi huruf dan angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} hanya boleh berisi huruf dan spasi..`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} nilainya harus kurang dari waktu ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} harus berisi waktu yang sudah lampau.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} harus bernilai diantara ${a} dan ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nilainya tidak cocok.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} waktu tidak cocok, mohon gunakan format waktu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} harus diantara waktu ${date(args[0])} dan waktu ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Tolong tulis alamat email yang benar.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nilainya tidak berakhiran dengan ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} adalah nilai yang tidak diizinkan.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} nilainya setidaknya berisi satu karakter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} jumlah karakternya harus kurang dari atau sama dengan ${max} karakter.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} jumlah karakternya harus lebih dari atau sama dengan ${min} karakter.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} jumlah karakternya hanya bisa antara ${min} dan ${max} karakter.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nilainya tidak diizinkan.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Tidak bisa memiliki lebih dari ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} harus lebih kecil atau sama dengan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Format file tidak diizinkan';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} hanya bisa bertipe: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Tidak boleh kurang dari ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} setidaknya harus berisi ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” adalah nilai yang tidak diperbolehkan untuk ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} harus berupa angka.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} harus diisi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} tidak dimulai dengan ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Mohon tuliskan url yang benar.`;\n        /* </i18n> */\n    },\n};\n\nvar id = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$e,\n    validation: validation$e\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$d = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Inserisci',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Rimuovi',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Rimuovi tutti',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Ci dispiace, non tutti i campi sono compilati correttamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Invia',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nessun file selezionato',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$d = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Si prega di accettare ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `la data ${sentence(name)} deve essere successiva ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `la data ${sentence(name)} deve essere nel futuro.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} può contenere solo caratteri alfanumerici.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} può contenere solo lettere e numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} può contenere solo lettere e spazi.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `la data ${sentence(name)} deve essere antecedente ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} deve essere nel passato.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Questo campo è stato configurato male e non può essere inviato.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} deve essere tra ${a} e ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} non corrisponde.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} non è una data valida, per favore usa il formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Questo campo è stato configurato in modo errato e non può essere inviato.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} deve essere tra ${date(args[0])} e ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Per favore inserire un indirizzo email valido.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} non termina con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} non è un valore consentito.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} deve contenere almeno un carattere.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} deve essere minore o uguale a ${max} caratteri.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} deve essere maggiore o uguale a ${min} caratteri.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} deve essere tra ${min} e ${max} caratteri.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} non è un valore consentito.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Non può avere più di ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} deve essere minore o uguale a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Formato file non consentito.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} deve essere di tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Non può avere meno di ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} deve essere almeno ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" non è un ${name} consentito.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} deve essere un numero.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} è richiesto.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} non inizia con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Per favore utilizare un url valido.`;\n        /* </i18n> */\n    },\n};\n\nvar it = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$d,\n    validation: validation$d\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$c = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '追加',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '削除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '全て削除',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '項目が正しく入力されていません。',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '送信',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'ファイルが選択されていません',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$c = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name}の同意が必要です。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)}は${date(args[0])}より後の日付である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}は将来の日付でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)}には英字のみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)}には、文字と数字のみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)}には、文字とスペースのみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)}は${date(args[0])}より前の日付である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}は過去の日付である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `このフィールドは正しく構成されていないため、送信できません。`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)}は${a}と${b}の間にある必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)}が一致しません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)}は有効な日付ではありません。${args[0]}の形式を使用してください。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'このフィールドは正しく構成されておらず、送信できません。';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}は${date(args[0])}と${date(args[1])}の間にある必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: '有効なメールアドレスを入力してください。',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)}は${list(args)}で終わっていません。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)}は許可された値ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)}は少なくとも1文字である必要があります。`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}は${max}文字以下である必要があります。`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}は${min}文字以上である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}は${min}から${max}文字の間でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)}は許可された値ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}は${args[0]}を超えることはできません。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)}は${args[0]}以下である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'ファイル形式は許可されていません。';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}は${args[0]}である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}は${args[0]}未満にすることはできません。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}は少なくとも${args[0]}である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}”は許可された${name}ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)}は数値でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)}は必須です。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)}は${list(args)}で始まっていません。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `有効なURLを含めてください。`;\n        /* </i18n> */\n    },\n};\n\nvar ja = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$c,\n    validation: validation$c\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$b = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '추가',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '제거',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '모두 제거',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '모든 값을 채워주세요',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '제출하기',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '선택된 파일이 없습니다',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$b = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} 올바른 값을 선택 해주세요`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} 이후여야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 미래의 날짜여야합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} 알파벳 문자만 포함할 수 있습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} 문자와 숫자만 포함될 수 있습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 문자와 공백만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} 이전여야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 과거의 날짜여야합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `잘못된 구성으로 제출할 수 없습니다`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a}와 ${b} 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} 일치하지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} 유효한 날짜가 아닙니다. ${args[0]}과 같은 형식을 사용해주세요`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '잘못된 구성으로 제출할 수 없습니다';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])}에서 ${date(args[1])} 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: '올바른 이메일 주소를 입력해주세요',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)}로 끝나지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} 하나 이상의 문자여야 합니다`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max}자 이하여야 합니다`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} 문자보다 크거나 같아야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min}에서 ${max}자 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name} 초과할 수 없습니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]}보다 작거나 같아야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '파일 형식이 허용되지 않습니다';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} 유형이어야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name}보다 작을 수 없습니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} 이상이어야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `${value}\" 허용되지 않는 ${name}입니다`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} 숫자여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} 필수 값입니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)}로 시작하지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `올바른 URL을 입력해주세요`;\n        /* </i18n> */\n    },\n};\n\nvar ko = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$b,\n    validation: validation$b\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$a = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Toevoegen',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Verwijder',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Verwijder alles',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, niet alle velden zijn correct ingevuld.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Versturen',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Geen bestand gekozen',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$a = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Accepteer de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} moet na ${date(args[0])} zijn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moet in de toekomst liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mag alleen alfabetische tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mag alleen letters en cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kunnen alleen letters en spaties bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} moet vóór ${date(args[0])} vallen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moet in het verleden zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dit veld is onjuist geconfigureerd en kan niet worden verzonden.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} moet tussen ${a} en ${b} liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} komt niet overeen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is geen geldige datum, gebruik de notatie ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dit veld is onjuist geconfigureerd en kan niet worden verzonden';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} moet tussen ${date(args[0])} en ${date(args[1])} liggen`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Vul een geldig e-mailadres in.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} eindigt niet met ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is geen toegestane waarde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} moet minimaal één teken zijn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${max} tekens.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} moet groter zijn dan of gelijk zijn aan ${min} tekens.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} moet tussen de ${min} en ${max} tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is geen toegestane waarde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Mag niet meer dan ${args[0]} ${name} hebben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Geen bestandsformaten toegestaan.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} moet van het type: ${args[0]} zijn`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mag niet minder dan ${args[0]} ${name} hebben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} moet minimaal ${args[0]} zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" is geen toegestane ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} moet een getal zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is verplicht.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} begint niet met ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Voeg een geldige url toe.`;\n        /* </i18n> */\n    },\n};\n\nvar nl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$a,\n    validation: validation$a\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$9 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Usuń',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Usuń wszystko',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nie wszystkie pola zostały wypełnione poprawnie.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Wyślij',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nie wybrano pliku',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$9 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Proszę zaakceptować ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musi być po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musi być w przyszłości.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfabetyczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfanumeryczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `Pole ${sentence(name)} mogą zawierać tylko litery i spacje.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musi być przed ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musi być w przeszłości.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Pole zostało wypełnione niepoprawnie i nie może zostać wysłane.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Wartość pola ${sentence(name)} musi być pomiędzy ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nie pokrywa się.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Wartość pola ${sentence(name)} nie jest poprawną datą, proszę użyć formatu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'To pole zostało wypełnione niepoprawnie i nie może zostać wysłane';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Data w polu ${sentence(name)} musi być pomiędzy ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Proszę wpisać poprawny adres email.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Pole ${sentence(name)} nie kończy się na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Pole ${sentence(name)} nie jest dozwoloną wartością.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Pole ${sentence(name)} musi posiadać minimum jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi zawierać ${max} lub mniej znaków.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi zawierać ${min} lub więcej znaków.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Pole ${sentence(name)} musi mieć ${min}-${max} znaków.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Pole ${sentence(name)} zawiera niedozwolone znaki.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nie można mieć więcej niż ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Wartość pola ${sentence(name)} musi być mniejsza lub równa ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nie podano dozwolonych typów plików.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musi być typem: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Musisz podać więcej niż ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return ` Musisz podać conajmniej ${args[0]} ${sentence(name)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `Wartość pola ${name} jest niedozwolona.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musi być numerem.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Pole ${sentence(name)} jest wymagane.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Wartośc pola ${sentence(name)} nie zaczyna się od ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Proszę podać prawidłowy adres url.`;\n        /* </i18n> */\n    },\n};\n\nvar pl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$9,\n    validation: validation$9\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$8 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Adicionar',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Remover',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Deletar tudo',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Desculpe, nem todos os campos foram preenchidos corretamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nenhum arquivo',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$8 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Por favor aceite o ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} deve ser posterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} deve ser no futuro.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} só pode conter caracteres do alfabeto.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} só pode ter letras e números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} só podem conter letras e espaços.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} deve ser anterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} deve ser anterior a data atual.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `O campo foi configurado incorretamente e não pode ser enviado.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} deve estar entre ${args[0]} e ${args[1]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} não confere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} não é uma data válida, por favor use o formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'O campo foi configurado incorretamente e não pode ser enviado.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} deve ser entre ${date(args[0])} e ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Por favor informe um e-mail válido.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} não termina com ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} não é um valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} deve ter ao menos um caractere.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} não pode ter mais que ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} deve ter no mínimo ${min} caracteres.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} deve ter entre ${min} e ${max} caracteres.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} não é um valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Não pode ter mais que ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} deve ser igual ou menor que ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nenhum formato de arquivo permitido.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} deve ser do tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Não pode ter menos que ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} deve ter pelo menos ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” não permite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} deve ser um número.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} é obrigatório.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} não começa com ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Por favor informe um url válido.`;\n        /* </i18n> */\n    },\n};\n\nvar pt = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$8,\n    validation: validation$8\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$7 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Adăugare',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Elimină',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Elimină tot',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pare rău, unele câmpuri nu sunt corect completate.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Trimite',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nu este selectat nici un fișier',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$7 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Te rog acceptă ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să fie după ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} trebuie sa fie în viitor.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} poate conține doar caractere alafetice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} poate conține doar litere și numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} poate conține doar litere și spații.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să preceadă ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie în trecut.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Câmpul a fost configurat incorect și nu poate fi trimis.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} trebuie să fie între ${a} și ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nu se potrivește.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nu este validă, te rog foloște formatul ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Câmpul a fost incorect configurat și nu poate fi trimis.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} trebuie să fie între ${date(args[0])} și ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Te rog folosește o adresă de email validă.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nu se termină cu ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nu este o valoare acceptată.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} trebuie sa conțină cel puțin un caracter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} trebuie sa aibă cel mult ${max} caractere.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să aibă cel puțin ${min} caractere.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să aibă între ${min} și ${max} caractere.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nu este o valoare acceptată.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nu poate avea mai mult decat ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie cel mult egal cu ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Tipul de fișier neacceptat.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie de tipul: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nu poate avea mai puțin decât ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie cel puțin ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nu este o valoare acceptă pentru ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} trebuie să fie un număr.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} este necesar.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nu începe cu ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Te rog include o adresă web validă`;\n        /* </i18n> */\n    },\n};\n\nvar ro = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$7,\n    validation: validation$7\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$6 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Добавить',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Удалить',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Убрать все',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Извините, не все поля заполнены верно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Отправить',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Файл не выбран',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$6 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Пожалуйста, примите ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} должна быть позже ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} должна быть в будущем.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Поле ${sentence(name)} может содержать только буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Поле ${sentence(name)} может содержать только буквы и цифры.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} могут содержать только буквы и пробелы.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} должна быть раньше ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} должна быть в прошлом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Это поле заполнено неверно и не может быть отправлено.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Поле ${sentence(name)} должно быть между ${a} и ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `Поле ${sentence(name)} не совпадает.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Поле ${sentence(name)} имеет неверную дату. Пожалуйста, используйте формат ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Это поле заполнено неверно и не может быть отправлено.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Дата ${sentence(name)} должна быть между ${date(args[0])} и ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Пожалуйста, введите действительный электронный адрес.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} не должно заканчиваться на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Поле ${sentence(name)} имеет неподустимое значение.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Поле ${sentence(name)} должно содержать минимум один символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Длина поля ${sentence(name)} должна быть меньше или равна ${max} символам.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Длина поля ${sentence(name)} должна быть больше или равна ${min} символам.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Длина поля ${sentence(name)} должна быть между ${min} и ${max} символами.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Поле ${sentence(name)} имеет недопустимое значение.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не может быть выбрано больше, чем ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно быть меньше или равно ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не указаны поддержиавемые форматы файла.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Формат файла в поле ${sentence(name)} должен быть: ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не может быть выбрано меньше, чем ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно быть не менее, чем ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” не поддерживается в поле ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Поле ${sentence(name)} должно быть числом.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Поле ${sentence(name)} обязательно для заполнения.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно начинаться с ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Пожалуйста, введите действительный URL адрес.`;\n        /* </i18n> */\n    },\n};\n\nvar ru = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$6,\n    validation: validation$6\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$5 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odstrani',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odstrani vse',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nekatera polja niso pravilno izpolnjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pošlji',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nobena datoteka ni izbrana',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$5 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosimo popravite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti v prihodnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo znake abecede.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo črke in številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo črke in presledke.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti pred ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti v preteklosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `To polje je narobe nastavljeno in ne mora biti izpolnjeno.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti med ${a} in ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} se ne ujema.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ni pravilen datum, prosimo uporabite format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'To polje je narobe nastavljeno in ne mora biti izpolnjeno.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti med ${date(args[0])} in ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Vnesite veljaven e-poštni naslov.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se mora kočati z ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ni dovoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora vsebovati vsaj en znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora vsebovati največ ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora vsebovati vsaj ${min} znakov.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mora vsebovati med ${min} in ${max} znakov.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ni dovoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Največ je ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} je lahko največ ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nobena vrsta datoteke ni dovoljena.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Najmanj ${args[0]} ${name} je dovoljenih.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti vsaj ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ni dovoljen(a/o) ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti številka.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je zahtevan(o/a).`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se mora začeti z ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vnesite veljavno povezavo.`;\n        /* </i18n> */\n    },\n};\n\nvar sl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$5,\n    validation: validation$5\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$4 = {\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ta bort',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ta bort alla',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Tyvärr är inte alla fält korrekt ifyllda',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Skicka',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen fil vald',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$4 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Var god acceptera ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} måste vara efter ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} måste vara framåt i tiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan enbart innehålla bokstäver i alfabetet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan bara innehålla bokstäver och siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan bara innehålla bokstäver och blanksteg.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} måste vara före ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} måste vara bakåt i tiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Det här fältet ställdes inte in korrekt och kan inte användas.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} måste vara mellan ${a} och ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} matchar inte.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} är inte ett giltigt datum, var god använd formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Det här fältet ställdes inte in korrekt och kan inte användas';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} måste vara mellan ${date(args[0])} och ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Var god fyll i en giltig e-postadress.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutar inte med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} är inte ett godkänt värde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} måste ha minst ett tecken.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} måste vara ${max} tecken eller färre.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} måste vara ${min} tecken eller fler.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} måste vara mellan ${min} och ${max} tecken.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} är inte ett godkänt värde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan inte ha mer än ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} måste vara ${args[0]} eller mindre.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Inga filtyper tillåtna.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} måste vara av filtypen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan inte ha mindre än ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} måste vara minst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” är inte ett godkänt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} måste vara en siffra.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} är obligatoriskt.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} börjar inte med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Var god fyll i en giltig länk.`;\n        /* </i18n> */\n    },\n};\n\nvar sv = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$4,\n    validation: validation$4\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$3 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'เพิ่ม',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'เอาออก',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'เอาออกทั้งหมด',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'ขออภัย ข้อมูลบางช่องที่กรอกไม่ถูกต้อง',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'ส่ง',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'ยังไม่ได้เลือกไฟล์',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$3 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `กรุณายอมรับ ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องเป็นวันที่หลังจาก ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ยังไม่มาถึง`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและตัวเลขเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและเว้นวรรคเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องเป็นวันที่ที่มาก่อน ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ผ่านมาแล้ว`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} จะต้องเป็นค่าระหว่าง ${a} และ ${b}`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ไม่ตรงกัน`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ไม่อยู่ในรูปแบบวันที่ที่ถูกต้อง กรุณากรอกตามรูปแบบ ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ระหว่าง ${date(args[0])} และ ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'กรุณากรอกที่อยู่อีเมลทีถูกต้อง',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องลงท้ายด้วย ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} จะต้องมีความยาวอย่างน้อยหนึ่งตัวอักษร`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องมีความยาวไม่เกิน ${max} ตัวอักษร`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องมีความยาว ${min} ตัวอักษรขึ้นไป`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีความยาวระหว่าง ${min} และ ${max} ตัวอักษร`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `ไม่สามารถเลือกมากกว่า ${args[0]} ${name} ได้`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีค่าไม่เกิน ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'ไม่มีประเภทของไฟล์ที่อนุญาต';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นไฟล์ประเภท ${args[0]} เท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `ไม่สามารถเลือกน้อยกว่า ${args[0]} ${name} ได้`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีค่าอย่างน้อย ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ไม่ใช่ค่า ${name} ที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} จะต้องเป็นตัวเลขเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `กรุณากรอก ${sentence(name)}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเริ่มต้นด้วย ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `กรุณาระบุที่อยู่ลิงก์ให้ถูกต้อง`;\n        /* </i18n> */\n    },\n};\n\nvar th = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$3,\n    validation: validation$3\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$2 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Ekle',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Kaldır',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hepsini kaldır',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Maalesef, tüm alanlar doğru doldurulmadı.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Gönder',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Dosya yok',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$2 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Lütfen ${name}'yi kabul edin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])}'den sonra olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} gelecekte bir zaman olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} sadece alfabetik karakterler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} sadece alfabetik karakterler ve sayı içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} yalnızca harf ve boşluk içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} tarihinden önce olmalı.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} geçmişte olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Alan yanlış yapılandırılmış ve gönderilemez.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${args[0]} ve ${args[1]} aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} eşleşmiyor.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} geçerli bir tarih değil, lütfen ${args[0]} biçimini kullanın.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Alan yanlış yapılandırılmış ve gönderilemez.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}, ${date(args[0])} ve ${date(args[1])} aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Lütfen geçerli bir e-mail adresi girin.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ile bitmiyor.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} izin verilen bir değer değil.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} en azından bir karakter uzunluğunda olmalı.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max}'e eşit veya daha küçük olmalı.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min}'e eşit veya daha büyük olmalı.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}, ${min} ve ${max} karakter uzunluğu aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} izin verilen bir değer değil.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}'in uzunluğu ${args[0]}'dan daha uzun olamaz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda veya ona eşit olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Hiçbir dosya türüne izin verilmez.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} şu tiplerden biri olmalı: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}'in uzunluğu ${args[0]}'dan daha kısa olamaz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ${name} olamaz.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} sayı olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} gerekli.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ile başlamıyor.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Lütfen geçerli bir url dahil edin.`;\n        /* </i18n> */\n    },\n};\n\nvar tr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$2,\n    validation: validation$2\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$1 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Thêm',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Xoá',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Xoá tất cả',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Xin lỗi, không phải tất cả các trường đều được nhập đúng.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Gửi',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Chưa chọn file',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$1 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Hãy đồng ý với ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} phải sau ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} phải trong tương lai.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái alphabet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái và chữ số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa các chữ cái và khoảng trắng.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} phải trước ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} phải trong quá khứ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Trường này đã được thiết lập sai và không thể gửi.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} phải ở giữa ${a} và ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} không khớp.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} không phải ngày hợp lệ, hãy sử dụng định dạng ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Trường này đã được thiết lập sai và không thể gửi.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} phải ở giữa khoảng từ ${date(args[0])} đến ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: 'Hãy nhập một địa chỉ email hợp lệ.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} không kết thúc với ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} phải có độ dài tối thiểu một ký tự.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} phải có độ dài tối đa ${max} ký tự.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} phải có độ dài tối thiểu ${min} ký tự.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} phải có độ dài tối đa trong khoảng từ ${min} đến ${max} ký tự.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} không thể lớn hơn ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} phải tối đa bằng ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Định dạng tệp tin này không được phép.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} phải là một trong các dạng: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} không thể nhỏ hơn ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} phải tối thiểu bằng ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" không phải giá trị ${name} được phép.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} phải là một số.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} là bắt buộc.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} không bắt đầu với ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Hãy nhập một URL hợp lệ.`;\n        /* </i18n> */\n    },\n};\n\nvar vi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$1,\n    validation: validation$1\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '添加',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '移除',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '对不起，有些字段未被正确填写',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '提交',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `请接受${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)}必须晚于${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}必须是未来的日期`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)}仅能包含字母字符`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)}仅能包含字母和数字`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)}只能包含字母和空格`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)}必须早于${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}必须是过去的日期`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `该字段未被正确设置而无法被提交`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)}必须在${args[0]}和${args[1]}之间`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)}不匹配`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)}不是一个合法日期，请使用此格式${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '该字段未被正确设置而无法被提交';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}必须在${date(args[0])}和${date(args[1])}之间`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: '请输入一个合法的电子邮件地址',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)}并未以${list(args)}结尾`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)}不是一个允许值`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)}至少要有一个字符`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}必须少于或等于${max}个字符`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}必须多于或等于${min}个字符`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}必须有${min}至${max}个字符`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)}不是一个允许值`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}不能超过${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)}必须小于或等于${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '无允许的文件格式';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}必须为此类型：${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}不能少于${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}不能小于${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}”不是一个被允许的${name}`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)}必须是一个数字`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)}必须填写`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)}没有以${list(args)}开头`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `请包含一个合法的url`;\n        /* </i18n> */\n    },\n};\n\nvar zh = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui,\n    validation: validation\n});\n\n/**\n * Create a new internationalization plugin for FormKit.\n * @param locales - Creates the i18n plugin.\n * @public\n */\nfunction createI18nPlugin(registry) {\n    return function i18nPlugin(node) {\n        let localeKey = parseLocale(node.config.locale, registry);\n        let locale = localeKey ? registry[localeKey] : {};\n        /* If the locale prop changes, update the active locale */\n        node.on('prop:locale', ({ payload: lang }) => {\n            localeKey = parseLocale(lang, registry);\n            locale = localeKey ? registry[localeKey] : {};\n            // Run through all the messages in the store and update with new locale\n            node.store.touch();\n        });\n        node.on('prop:label', () => node.store.touch());\n        node.on('prop:validationLabel', () => node.store.touch());\n        /**\n         * Hook into the core text or t() hook to perform localization on the\n         * output of core functionality.\n         */\n        node.hook.text((fragment, next) => {\n            var _a, _b;\n            const key = ((_a = fragment.meta) === null || _a === void 0 ? void 0 : _a.messageKey) || fragment.key;\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(locale, fragment.type) && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(locale[fragment.type], key)) {\n                const t = locale[fragment.type][key];\n                if (typeof t === 'function') {\n                    fragment.value = Array.isArray((_b = fragment.meta) === null || _b === void 0 ? void 0 : _b.i18nArgs)\n                        ? t(...fragment.meta.i18nArgs) // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                        : t(fragment);\n                }\n                else {\n                    fragment.value = t;\n                }\n            }\n            return next(fragment);\n        });\n    };\n}\n/**\n * @param locale - An ISO 639-1 and (optionally) ISO 639-2 language tag. For\n * example these are valid locale keys:\n * zh\n * zh-CN\n * zh-HK\n * en\n * en-GB\n * @param availableLocales - An array of locales that may be valid.\n */\nfunction parseLocale(locale, availableLocales) {\n    if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(availableLocales, locale)) {\n        return locale;\n    }\n    const [lang] = locale.split('-');\n    if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(availableLocales, lang)) {\n        return lang;\n    }\n    for (const locale in availableLocales) {\n        return locale;\n    }\n    return false;\n}\n\n/**\n * Export all the available locales at once.\n * @public\n */\nconst locales = {\n    ar,\n    cs,\n    da,\n    de,\n    en,\n    es,\n    fa,\n    fi,\n    fr,\n    fy,\n    he,\n    hr,\n    id,\n    it,\n    ja,\n    ko,\n    nl,\n    pl,\n    pt,\n    ro,\n    ru,\n    sl,\n    sv,\n    th,\n    tr,\n    vi,\n    zh,\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/i18n/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/inputs/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@formkit/inputs/dist/index.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"button\": function() { return /* binding */ button; },\n/* harmony export */   \"checkbox\": function() { return /* binding */ checkbox; },\n/* harmony export */   \"color\": function() { return /* binding */ color; },\n/* harmony export */   \"composable\": function() { return /* binding */ composable; },\n/* harmony export */   \"createLibraryPlugin\": function() { return /* binding */ createLibraryPlugin; },\n/* harmony export */   \"date\": function() { return /* binding */ date; },\n/* harmony export */   \"datetimeLocal\": function() { return /* binding */ datetimeLocal; },\n/* harmony export */   \"email\": function() { return /* binding */ email; },\n/* harmony export */   \"extendSchema\": function() { return /* binding */ extendSchema; },\n/* harmony export */   \"features\": function() { return /* binding */ index; },\n/* harmony export */   \"file\": function() { return /* binding */ file; },\n/* harmony export */   \"form\": function() { return /* binding */ form; },\n/* harmony export */   \"group\": function() { return /* binding */ group; },\n/* harmony export */   \"hidden\": function() { return /* binding */ hidden; },\n/* harmony export */   \"inputs\": function() { return /* binding */ inputs; },\n/* harmony export */   \"list\": function() { return /* binding */ list; },\n/* harmony export */   \"localize\": function() { return /* binding */ localize; },\n/* harmony export */   \"month\": function() { return /* binding */ month; },\n/* harmony export */   \"number\": function() { return /* binding */ number; },\n/* harmony export */   \"password\": function() { return /* binding */ password; },\n/* harmony export */   \"radio\": function() { return /* binding */ radio; },\n/* harmony export */   \"range\": function() { return /* binding */ range; },\n/* harmony export */   \"search\": function() { return /* binding */ search; },\n/* harmony export */   \"select\": function() { return /* binding */ select; },\n/* harmony export */   \"submit\": function() { return /* binding */ submit; },\n/* harmony export */   \"tel\": function() { return /* binding */ tel; },\n/* harmony export */   \"text\": function() { return /* binding */ text; },\n/* harmony export */   \"textarea\": function() { return /* binding */ textarea; },\n/* harmony export */   \"time\": function() { return /* binding */ time; },\n/* harmony export */   \"url\": function() { return /* binding */ url; },\n/* harmony export */   \"useSchema\": function() { return /* binding */ useSchema; },\n/* harmony export */   \"week\": function() { return /* binding */ week; }\n/* harmony export */ });\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n/* harmony import */ var _formkit_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formkit/core */ \"./node_modules/@formkit/core/dist/index.mjs\");\n\n\n\nconst outer = composable('outer', () => ({\n    $el: 'div',\n    attrs: {\n        class: '$classes.outer',\n        'data-type': '$type',\n        'data-multiple': '$attrs.multiple',\n        'data-disabled': '$disabled || undefined',\n        'data-complete': '$state.complete || undefined',\n        'data-invalid': '$state.valid === false && $state.validationVisible || undefined',\n        'data-errors': '$state.errors || undefined',\n        'data-submitted': '$state.submitted || undefined',\n    },\n}));\n\nconst wrapper$2 = composable('wrapper', () => ({\n    $el: 'div',\n    attrs: {\n        class: '$classes.wrapper',\n    },\n}));\n\nconst inner = composable('inner', () => ({\n    $el: 'div',\n    attrs: {\n        class: '$classes.inner',\n    },\n}));\n\nconst help = (schema = {}, children = [], target = 'help', cond = '$help') => ({\n    if: `$slots.${target}`,\n    then: `$slots.${target}`,\n    else: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)({\n        $el: 'div',\n        attrs: {\n            id: `$: \"help-\" + ${target == 'optionHelp' ? '$option.attrs.id' : '$id'}`,\n            class: `$classes.${target}`,\n        },\n        if: cond,\n        children,\n    }, schema),\n});\n\nconst messages = composable('messages', () => ({\n    $el: 'ul',\n    if: '$fns.length($messages)',\n    attrs: {\n        class: '$classes.messages',\n        'aria-live': '$type === \"form\" && \"assertive\" || \"polite\"',\n    },\n}));\n\nconst message = composable('message', () => ({\n    $el: 'li',\n    for: ['message', '$messages'],\n    attrs: {\n        key: '$message.key',\n        class: '$classes.message',\n        id: `$id + '-' + $message.key`,\n        'data-message-type': '$message.type',\n    },\n}));\n\nconst prefix = composable('prefix', () => ({ $el: null }));\n\nconst suffix = composable('suffix', () => ({ $el: null }));\n\n/**\n * Type guard for schema objects.\n * @param schema - returns true if the node is a schema node but not a string or conditional.\n */\nfunction isSchemaObject(schema) {\n    return (typeof schema === 'object' &&\n        ('$el' in schema || '$cmp' in schema || '$formkit' in schema));\n}\n/**\n * Extends a single schema node with an extension. The extension can be any partial node including strings.\n * @param schema - Extend a base schema node.\n * @param extension - The values to extend on the base schema node.\n * @returns\n * @public\n */\nfunction extendSchema(schema, extension = {}) {\n    if (typeof schema === 'string') {\n        return isSchemaObject(extension) || typeof extension === 'string'\n            ? extension\n            : schema;\n    }\n    else if (Array.isArray(schema)) {\n        return isSchemaObject(extension) ? extension : schema;\n    }\n    return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)(schema, extension);\n}\n/**\n * Creates a new section key.\n *\n * @param key - A new section key name.\n * @param schema - The default schema in this composable slot.\n * @returns\n * @public\n */\nfunction composable(key, schema) {\n    return (extendWith = {}, children = undefined) => {\n        const root = typeof schema === 'function'\n            ? schema(children)\n            : typeof schema === 'object'\n                ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.clone)(schema)\n                : schema;\n        const isObj = isSchemaObject(root);\n        if (isObj && !('children' in root) && children) {\n            if (Array.isArray(children)) {\n                if (children.length) {\n                    root.children = children;\n                }\n            }\n            else {\n                root.children = [children];\n            }\n        }\n        const extended = extendSchema(root, extendWith);\n        return {\n            if: `$slots.${key}`,\n            then: `$slots.${key}`,\n            else: Array.isArray(extended) ? extended : [extended],\n        };\n    };\n}\n/**\n * Creates an input schema with all of the wrapping base schema.\n * @param inputSchema - Content to store in the input section key location.\n * @public\n */\nfunction useSchema(inputSchema) {\n    return (extensions = {}) => {\n        const input = composable('input', inputSchema)(extensions.input);\n        return [\n            outer(extensions.outer, [\n                wrapper$2(extensions.wrapper, [\n                    label(extensions.label, '$label'),\n                    inner(extensions.inner, [\n                        prefix(extensions.prefix),\n                        ...(Array.isArray(input) ? input : [input]),\n                        suffix(extensions.suffix),\n                    ]),\n                ]),\n                help(extensions.help, '$help'),\n                messages(extensions.messages, [\n                    message(extensions.message, '$message.value'),\n                ]),\n            ]),\n        ];\n    };\n}\n\nconst label = composable('label', () => ({\n    $el: 'label',\n    if: '$label',\n    attrs: {\n        for: '$id',\n        class: '$classes.label',\n    },\n}));\n\nconst text$1 = composable('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        disabled: '$disabled',\n        class: '$classes.input',\n        name: '$node.name',\n        onInput: '$handlers.DOMInput',\n        onBlur: '$handlers.blur',\n        value: '$_value',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * The schema for text classifications.\n * @public\n */\nconst textSchema$1 = (extensions = {}) => [\n    outer(extensions.outer, [\n        wrapper$2(extensions.wrapper, [\n            label(extensions.label, '$label'),\n            inner(extensions.inner, [\n                prefix(extensions.prefix),\n                text$1(extensions.input),\n                suffix(extensions.suffix),\n            ]),\n        ]),\n        help(extensions.help, '$help'),\n        messages(extensions.messages, [\n            message(extensions.message, '$message.value'),\n        ]),\n    ]),\n];\n\nconst file$1 = composable('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: 'file',\n        foo: 'bar',\n        disabled: '$disabled',\n        class: '$classes.input',\n        name: '$node.name',\n        onChange: '$handlers.files',\n        onBlur: '$handlers.blur',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\nconst fileList = composable('fileList', () => ({\n    $el: 'ul',\n    if: '$value.length',\n    attrs: {\n        class: '$classes.fileList',\n        'data-has-multiple': {\n            if: '$value.length > 1',\n            then: 'true',\n        },\n    },\n}));\n\nconst fileItem = composable('fileItem', () => ({\n    $el: 'li',\n    for: ['file', '$value'],\n    attrs: {\n        class: '$classes.fileItem',\n    },\n}));\n\nconst fileName = composable('fileName', () => ({\n    $el: 'span',\n    attrs: {\n        class: '$classes.fileName',\n    },\n}));\n\nconst noFiles = composable('noFiles', () => ({\n    $el: 'span',\n    if: '$value.length == 0',\n    attrs: {\n        class: '$classes.noFiles',\n    },\n}));\n\nconst removeFiles = composable('removeFiles', () => ({\n    $el: 'a',\n    attrs: {\n        href: '#',\n        class: '$classes.removeFiles',\n        onClick: '$handlers.resetFiles',\n    },\n}));\n\n/**\n * The schema for text classifications.\n * @public\n */\nconst fileSchema = (extensions = {}) => [\n    outer(extensions.outer, [\n        wrapper$2(extensions.wrapper, [\n            label(extensions.label, '$label'),\n            inner(extensions.inner, [\n                prefix(extensions.prefix),\n                file$1(extensions.input),\n                fileList(extensions.fileList, [\n                    fileItem(extensions.file, [\n                        fileName(extensions.fileName, '$file.name'),\n                        {\n                            if: '$value.length == 1',\n                            then: removeFiles(extensions.removeFiles, '$ui.remove.value'),\n                        },\n                    ]),\n                ]),\n                {\n                    if: '$value.length > 1',\n                    then: removeFiles(extensions.removeFiles, '$ui.removeAll.value'),\n                },\n                noFiles(extensions.noFiles, '$ui.noFiles.value'),\n                suffix(extensions.suffix),\n            ]),\n        ]),\n        help(extensions.help, '$help'),\n        messages(extensions.messages, [\n            message(extensions.message, '$message.value'),\n        ]),\n    ]),\n];\n\nconst textarea$1 = composable('input', () => ({\n    $el: 'textarea',\n    bind: '$attrs',\n    attrs: {\n        class: '$classes.input',\n        disabled: '$disabled',\n        name: '$node.name',\n        onInput: '$handlers.DOMInput',\n        onBlur: '$handlers.blur',\n        value: '$_value',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n    children: '$initialValue',\n}));\n\n/**\n * The schema for textarea classifications.\n * @public\n */\nconst textareaSchema = (extensions = {}) => [\n    outer(extensions.outer, [\n        wrapper$2(extensions.wrapper, [\n            label(extensions.label, '$label'),\n            inner(extensions.inner, [\n                prefix(extensions.prefix),\n                textarea$1(extensions.input),\n                suffix(extensions.suffix),\n            ]),\n        ]),\n        help(extensions.help, '$help'),\n        messages(extensions.messages, [\n            message(extensions.message, '$message.value'),\n        ]),\n    ]),\n];\n\n/**\n * The schema for text classifications.\n * @public\n */\nconst hiddenSchema = (extensions = {}) => [\n    text$1(extensions.input),\n];\n\nconst fragment = (schema = {}, children = []) => (Object.keys(schema).length || typeof children !== 'string'\n    ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)({ $el: 'div', children }, schema)\n    : children);\n\nconst groupSchema = (extensions = {}) => {\n    return [fragment(extensions.wrapper, '$slots.default')];\n};\n\nconst listSchema = (extensions = {}) => {\n    return [fragment(extensions.wrapper, '$slots.default')];\n};\n\nconst select$2 = composable('input', (children) => ({\n    $el: 'select',\n    bind: '$attrs',\n    attrs: {\n        id: '$id',\n        'data-placeholder': {\n            if: '$placeholder',\n            then: {\n                if: '$value',\n                then: undefined,\n                else: 'true',\n            },\n        },\n        disabled: '$disabled',\n        class: '$classes.input',\n        name: '$node.name',\n        onInput: '$handlers.selectInput',\n        onBlur: '$handlers.blur',\n        'aria-describedby': '$describedBy',\n    },\n    children: {\n        if: '$slots.default',\n        then: '$slots.default',\n        else: children,\n    },\n}));\n\nconst option = (schema = {}, children = []) => ({\n    if: '$slots.option',\n    then: [\n        {\n            $el: 'text',\n            if: '$options.length',\n            for: ['option', '$options'],\n            children: '$slots.option',\n        },\n    ],\n    else: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)({\n        $el: 'option',\n        if: '$options.length',\n        for: ['option', '$options'],\n        bind: '$option.attrs',\n        attrs: {\n            class: '$classes.option',\n            value: '$option.value',\n            selected: '$fns.isSelected($option.value)',\n        },\n        children,\n    }, schema),\n});\n\n/**\n * The schema for text classifications.\n * @public\n */\nconst textSchema = (extensions = {}) => [\n    outer(extensions.outer, [\n        wrapper$2(extensions.wrapper, [\n            label(extensions.label, '$label'),\n            inner(extensions.inner, [\n                prefix(extensions.prefix),\n                select$2(extensions.input, [option(extensions.option, '$option.label')]),\n                suffix(extensions.suffix),\n            ]),\n        ]),\n        help(extensions.help, '$help'),\n        messages(extensions.messages, [\n            message(extensions.message, '$message.value'),\n        ]),\n    ]),\n];\n\nconst boxLabel = composable('label', (children) => ({\n    $el: 'span',\n    if: typeof children === 'string' ? children : '$: true',\n    attrs: {\n        class: '$classes.label',\n    },\n}));\n\nconst wrapper$1 = composable('wrapper', () => ({\n    $el: 'label',\n    attrs: {\n        class: '$classes.wrapper',\n        'data-disabled': {\n            if: '$options.length',\n            then: undefined,\n            else: '$disabled',\n        },\n    },\n}));\n\nconst box = composable('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        class: '$classes.input',\n        name: '$node.props.altName || $node.name',\n        disabled: '$option.attrs.disabled || $disabled',\n        onInput: '$handlers.toggleChecked',\n        checked: '$fns.eq($_value, $onValue)',\n        onBlur: '$handlers.blur',\n        value: '$: true',\n        id: '$id',\n        'aria-describedby': {\n            if: '$options.length',\n            then: {\n                if: '$option.help',\n                then: '$: \"help-\" + $option.attrs.id',\n                else: undefined,\n            },\n            else: {\n                if: '$help',\n                then: '$: \"help-\" + $id',\n                else: undefined,\n            },\n        },\n    },\n}));\n\nconst fieldset = composable('fieldset', () => ({\n    $el: 'fieldset',\n    attrs: {\n        id: '$id',\n        class: '$classes.fieldset',\n        'aria-describedby': {\n            if: '$help',\n            then: '$: \"help-\" + $id',\n            else: undefined,\n        },\n    },\n}));\n\nconst legend = composable('legend', () => ({\n    $el: 'legend',\n    if: '$label',\n    attrs: {\n        class: '$classes.legend',\n    },\n}));\n\nconst boxes = composable('option', () => ({\n    $el: 'li',\n    for: ['option', '$options'],\n    attrs: {\n        class: '$classes.option',\n        'data-disabled': '$option.attrs.disabled || $disabled',\n    },\n}));\n\nconst wrapper = composable('options', () => ({\n    $el: 'ul',\n    attrs: {\n        class: '$classes.options',\n    },\n}));\n\nconst decorator = composable('decorator', () => ({\n    $el: 'span',\n    attrs: {\n        class: '$classes.decorator',\n        'aria-hidden': 'true',\n    },\n}));\n\n/**\n * The schema for text classifications.\n * @public\n */\nconst boxSchema = (extensions = {}) => {\n    const singleCheckbox = [\n        wrapper$1(extensions.wrapper, [\n            inner(extensions.inner, [\n                prefix(extensions.prefix),\n                box(extensions.input),\n                decorator(extensions.decorator),\n                suffix(extensions.suffix),\n            ]),\n            boxLabel(extensions.label, '$label'),\n        ]),\n        help(extensions.help, '$help'),\n    ];\n    const multiCheckbox = fieldset(extensions.fieldset, [\n        legend(extensions.legend, '$label'),\n        help(extensions.help, '$help'),\n        wrapper(extensions.options, [\n            boxes(extensions.option, [\n                wrapper$1(extensions.wrapper, [\n                    inner(extensions.inner, [\n                        prefix(extensions.prefix),\n                        box((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)({\n                            bind: '$option.attrs',\n                            attrs: {\n                                id: '$option.attrs.id',\n                                value: '$option.value',\n                                checked: '$fns.isChecked($option.value)',\n                            },\n                        }, extensions.input || {})),\n                        decorator(extensions.decorator),\n                        suffix(extensions.suffix),\n                    ]),\n                    boxLabel(extensions.label, '$option.label'),\n                ]),\n                help(extensions.optionHelp, '$option.help', 'optionHelp', '$option.help'),\n            ]),\n        ]),\n    ]);\n    return [\n        outer(extensions.outer, [\n            {\n                if: '$options.length',\n                then: multiCheckbox,\n                else: singleCheckbox,\n            },\n            messages(extensions.messages, [\n                message(extensions.message, '$message.value'),\n            ]),\n        ]),\n    ];\n};\n\nconst actions = composable('actions', () => ({\n    $el: 'div',\n    if: '$actions',\n    attrs: {\n        class: '$classes.actions',\n    },\n}));\n\nconst form$2 = composable('form', () => ({\n    $el: 'form',\n    bind: '$attrs',\n    attrs: {\n        id: '$id',\n        class: '$classes.form',\n        name: '$node.name',\n        onSubmit: '$handlers.submit',\n        'data-loading': '$state.loading || undefined',\n    },\n}));\n\nconst submit$1 = composable('submit', () => ({\n    $cmp: 'FormKit',\n    bind: '$submitAttrs',\n    props: {\n        ignore: true,\n        type: 'submit',\n        disabled: '$disabled',\n        label: '$submitLabel',\n    },\n}));\n\nconst formSchema = (extensions = {}) => {\n    return [\n        form$2(extensions.form, [\n            '$slots.default',\n            messages(extensions.messages, [\n                message(extensions.message, '$message.value'),\n            ]),\n            actions(extensions.actions, [submit$1(extensions.submit)]),\n        ]),\n    ];\n};\n\nconst button$1 = composable('input', () => ({\n    $el: 'button',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        disabled: '$disabled',\n        class: '$classes.input',\n        name: '$node.name',\n        id: '$id',\n    },\n}));\n\n/**\n * The schema for text classifications.\n * @public\n */\nconst buttonSchema = (extensions = {}) => [\n    outer(extensions.outer, [\n        messages(extensions.messages, [\n            message(extensions.message, '$message.value'),\n        ]),\n        wrapper$2(extensions.wrapper, [\n            button$1(extensions.input, [\n                prefix(extensions.prefix),\n                {\n                    if: '$slots.default',\n                    then: '$slots.default',\n                    else: {\n                        if: '$label',\n                        then: '$label',\n                        else: '$ui.submit.value',\n                    },\n                },\n                suffix(extensions.suffix),\n            ]),\n        ]),\n        help(extensions.help, '$help'),\n    ]),\n];\n\n/**\n * Accepts an array of objects, array of strings, or object of key-value pairs.\n * and returns an array of objects with value and label properties.\n * @param options -\n */\nfunction normalizeOptions(options) {\n    let i = 1;\n    if (Array.isArray(options)) {\n        return options.map((option) => {\n            if (typeof option === 'string' || typeof option === 'number') {\n                return {\n                    label: option,\n                    value: option,\n                };\n            }\n            if (typeof option == 'object') {\n                if ('value' in option && typeof option.value !== 'string') {\n                    Object.assign(option, {\n                        value: `__mask_${i++}`,\n                        __original: option.value,\n                    });\n                }\n            }\n            return option;\n        });\n    }\n    return Object.keys(options).map((value) => {\n        return {\n            label: options[value],\n            value,\n        };\n    });\n}\n/**\n * Given an option list, find the \"true\" value in the options.\n * @param options - The options to check for a given value\n * @param value - The value to return\n * @returns\n */\nfunction optionValue(options, value) {\n    if (Array.isArray(options)) {\n        for (const option of options) {\n            if (value == option.value) {\n                return '__original' in option ? option.__original : option.value;\n            }\n        }\n    }\n    return value;\n}\n/**\n * Determines if the value should be selected.\n * @param valueA - Any type of value\n * @param valueB - Any type of value\n */\nfunction shouldSelect(valueA, valueB) {\n    if (valueA == valueB)\n        return true;\n    if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.isPojo)(valueA) && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.isPojo)(valueB))\n        return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.eq)(valueA, valueB);\n    return false;\n}\n/**\n * Converts the options prop to usable values.\n * @param node - A formkit node.\n * @public\n */\nfunction options(node) {\n    node.hook.prop((prop, next) => {\n        if (prop.prop === 'options') {\n            const options = normalizeOptions(prop.value);\n            prop.value = options;\n        }\n        return next(prop);\n    });\n}\n\n/**\n * Checks if a the given option should have the selected attribute.\n * @param node - The node being evaluated.\n * @param option - The option value to check\n * @returns\n */\nfunction isSelected(node, option) {\n    // Here we trick reactivity (if at play) to watch this function.\n    node.context && node.context.value;\n    const value = optionValue(node.props.options, option);\n    return Array.isArray(node._value)\n        ? node._value.some((optionA) => shouldSelect(optionA, value))\n        : (node.value === undefined && !option) || shouldSelect(value, node._value);\n}\n/**\n * Select the correct values.\n * @param e - The input event emitted by the select.\n */\nfunction selectInput(node, e) {\n    const target = e.target;\n    const value = target.hasAttribute('multiple')\n        ? Array.from(target.selectedOptions).map((o) => optionValue(node.props.options, o.value))\n        : optionValue(node.props.options, target.value);\n    node.input(value);\n}\n/**\n * Appends a placeholder to the options list.\n * @param options - An options list\n * @param placeholder - A placeholder string to append\n * @returns\n */\nfunction applyPlaceholder(options, placeholder) {\n    if (!options.some((option) => option.attrs && option.attrs['data-is-placeholder'])) {\n        return [\n            {\n                label: placeholder,\n                value: '',\n                attrs: {\n                    hidden: true,\n                    disabled: true,\n                    'data-is-placeholder': 'true',\n                },\n            },\n            ...options,\n        ];\n    }\n    return options;\n}\n/**\n * Converts the options prop to usable values.\n * @param node - A formkit node.\n * @public\n */\nfunction select$1(node) {\n    // Set the initial value of a multi-input\n    node.on('created', () => {\n        var _a, _b, _c;\n        const isMultiple = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.multiple);\n        if (!isMultiple &&\n            node.props.placeholder &&\n            Array.isArray(node.props.options)) {\n            node.hook.prop(({ prop, value }, next) => {\n                if (prop === 'options') {\n                    value = applyPlaceholder(value, node.props.placeholder);\n                }\n                return next({ prop, value });\n            });\n            node.props.options = applyPlaceholder(node.props.options, node.props.placeholder);\n        }\n        if (isMultiple) {\n            if (node.value === undefined) {\n                node.input([], false);\n            }\n        }\n        else if (node.context && !node.context.options) {\n            // If this input is (probably) using the default slot, we need to add a\n            // \"value\" attribute to get bound\n            node.props.attrs = Object.assign({}, node.props.attrs, {\n                value: node._value,\n            });\n            node.on('input', ({ payload }) => {\n                node.props.attrs = Object.assign({}, node.props.attrs, {\n                    value: payload,\n                });\n            });\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.handlers) {\n            node.context.handlers.selectInput = selectInput.bind(null, node);\n        }\n        if ((_c = node.context) === null || _c === void 0 ? void 0 : _c.fns) {\n            node.context.fns.isSelected = isSelected.bind(null, node);\n        }\n    });\n    node.hook.input((value, next) => {\n        var _a, _b, _c;\n        if (!node.props.placeholder &&\n            value === undefined &&\n            Array.isArray((_a = node.props) === null || _a === void 0 ? void 0 : _a.options) &&\n            node.props.options.length &&\n            !(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)((_c = (_b = node.props) === null || _b === void 0 ? void 0 : _b.attrs) === null || _c === void 0 ? void 0 : _c.multiple)) {\n            value =\n                '__original' in node.props.options[0]\n                    ? node.props.options[0].__original\n                    : node.props.options[0].value;\n        }\n        return next(value);\n    });\n}\n\n/**\n * Normalize the boxes.\n * @param node - The node\n * @returns\n * @public\n */\nfunction normalizeBoxes(node) {\n    return function (prop, next) {\n        if (prop.prop === 'options' && Array.isArray(prop.value)) {\n            prop.value = prop.value.map((option) => {\n                var _a;\n                if (!((_a = option.attrs) === null || _a === void 0 ? void 0 : _a.id)) {\n                    return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)(option, {\n                        attrs: { id: `${node.name}-option-${(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.kebab)(String(option.value))}` },\n                    });\n                }\n                return option;\n            });\n            if (node.props.type === 'checkbox' && !Array.isArray(node.value)) {\n                if (node.isCreated) {\n                    node.input([], false);\n                }\n                else {\n                    node.on('created', () => {\n                        if (!Array.isArray(node.value)) {\n                            node.input([], false);\n                        }\n                    });\n                }\n            }\n        }\n        return next(prop);\n    };\n}\n\n/**\n * Event handler when an input is toggled.\n * @param node - The node being toggled\n * @param e - The input even related to the toggling\n */\nfunction toggleChecked$1(node, e) {\n    const el = e.target;\n    if (el instanceof HTMLInputElement) {\n        const value = Array.isArray(node.props.options)\n            ? optionValue(node.props.options, el.value)\n            : el.value;\n        if (Array.isArray(node.props.options) && node.props.options.length) {\n            if (!Array.isArray(node._value)) {\n                // There is no array value set\n                node.input([value]);\n            }\n            else if (!node._value.some((existingValue) => shouldSelect(value, existingValue))) {\n                // The value is not in the current set\n                node.input([...node._value, value]);\n            }\n            else {\n                // Filter out equivalent values\n                node.input(node._value.filter((existingValue) => !shouldSelect(value, existingValue)));\n            }\n        }\n        else {\n            if (el.checked) {\n                node.input(node.props.onValue);\n            }\n            else {\n                node.input(node.props.offValue);\n            }\n        }\n    }\n}\n/**\n * Checks if a given option is present in the node value.\n * @param node - The node being checked\n * @param value - The value of any option\n * @returns\n */\nfunction isChecked$1(node, value) {\n    var _a, _b;\n    // We need to force vue’s reactivity to respond when the value is run:\n    (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n    (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n    if (Array.isArray(node._value)) {\n        return node._value.some((existingValue) => shouldSelect(optionValue(node.props.options, value), existingValue));\n    }\n    return false;\n}\n/**\n * Adds checkbox selection support\n * @param node - Node the feature is added to\n * @public\n */\nfunction checkboxes(node) {\n    node.on('created', () => {\n        var _a, _b;\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.toggleChecked = toggleChecked$1.bind(null, node);\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n            node.context.fns.isChecked = isChecked$1.bind(null, node);\n        }\n        // Configure our default onValue and offValue\n        if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node.props, 'onValue'))\n            node.props.onValue = true;\n        if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node.props, 'offValue'))\n            node.props.offValue = false;\n    });\n    node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * Sets the value of a radio button when checked.\n * @param node - FormKitNode\n * @param value - Value\n */\nfunction toggleChecked(node, event) {\n    if (event.target instanceof HTMLInputElement) {\n        node.input(optionValue(node.props.options, event.target.value));\n    }\n}\n/**\n * Checks if the value being checked is the current value.\n * @param node - The node to check against.\n * @param value - The value to check\n * @returns\n */\nfunction isChecked(node, value) {\n    var _a, _b;\n    // We need to force vue’s reactivity to respond when the value is run:\n    (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n    (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n    return shouldSelect(optionValue(node.props.options, value), node._value);\n}\n/**\n * Determines if a given radio input is being evaluated.\n * @param node - The radio input group.\n * @public\n */\nfunction radios(node) {\n    node.on('created', () => {\n        var _a, _b;\n        if (!Array.isArray(node.props.options)) {\n            (0,_formkit_core__WEBPACK_IMPORTED_MODULE_1__.warn)(350, node);\n        }\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.toggleChecked = toggleChecked.bind(null, node);\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n            node.context.fns.isChecked = isChecked.bind(null, node);\n        }\n    });\n    node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * Allows disabling children of this.\n * @param node - The FormKitNode of the form/group/list\n * @public\n */\nfunction disables(node) {\n    node.on('created', () => {\n        node.props.disabled = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)(node.props.disabled);\n    });\n    node.hook.prop(({ prop, value }, next) => {\n        value = prop === 'disabled' ? (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)(value) : value;\n        return next({ prop, value });\n    });\n    node.on('prop:disabled', ({ payload: value }) => {\n        node.config.disabled = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)(value);\n    });\n    node.on('created', () => {\n        node.config.disabled = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.undefine)(node.props.disabled);\n    });\n}\n\n/**\n * Handle the submit event.\n * @param e - The event\n */\nasync function handleSubmit(node, submitEvent) {\n    submitEvent.preventDefault();\n    await node.settled;\n    // Set the submitted state on all children\n    node.walk((n) => {\n        n.store.set((0,_formkit_core__WEBPACK_IMPORTED_MODULE_1__.createMessage)({\n            key: 'submitted',\n            value: true,\n            visible: false,\n        }));\n    });\n    if (typeof node.props.onSubmitRaw === 'function') {\n        node.props.onSubmitRaw(submitEvent, node);\n    }\n    if (node.ledger.value('blocking')) {\n        // There is still a blocking message in the store.\n        if (node.props.incompleteMessage !== false) {\n            node.store.set((0,_formkit_core__WEBPACK_IMPORTED_MODULE_1__.createMessage)({\n                blocking: false,\n                key: `incomplete`,\n                meta: {\n                    localize: node.props.incompleteMessage === undefined,\n                    i18nArgs: [{ node }],\n                    showAsMessage: true,\n                },\n                type: 'ui',\n                value: node.props.incompleteMessage || 'Form incomplete.',\n            }));\n        }\n    }\n    else {\n        // No blocking messages\n        if (typeof node.props.onSubmit === 'function') {\n            // call onSubmit\n            const retVal = node.props.onSubmit((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.clone)(node.value), node);\n            if (retVal instanceof Promise) {\n                const autoDisable = node.props.disabled === undefined &&\n                    node.props.submitBehavior !== 'live';\n                if (autoDisable)\n                    node.props.disabled = true;\n                node.store.set((0,_formkit_core__WEBPACK_IMPORTED_MODULE_1__.createMessage)({\n                    key: 'loading',\n                    value: true,\n                    visible: false,\n                }));\n                await retVal;\n                if (autoDisable)\n                    node.props.disabled = false;\n                node.store.remove('loading');\n            }\n        }\n        else {\n            if (submitEvent.target instanceof HTMLFormElement) {\n                submitEvent.target.submit();\n            }\n        }\n    }\n}\n/**\n * Converts the options prop to usable values.\n * @param node - A formkit node.\n * @public\n */\nfunction form$1(node) {\n    node.props.isForm = true;\n    node.on('created', () => {\n        var _a;\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.submit = handleSubmit.bind(null, node);\n        }\n        if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(node.props, 'actions')) {\n            node.props.actions = true;\n        }\n    });\n    node.on('settled:blocking', () => node.store.remove('incomplete'));\n}\n\n/**\n * Creates a new feature that generates a localization message of type ui\n * for use on a given component.\n *\n * @param key - The key of the message\n * @param value - The value of the message\n * @returns\n * @public\n */\nfunction localize(key, value) {\n    return (node) => {\n        node.store.set((0,_formkit_core__WEBPACK_IMPORTED_MODULE_1__.createMessage)({\n            key,\n            type: 'ui',\n            value: value || key,\n            meta: {\n                localize: true,\n                i18nArgs: [node],\n            },\n        }));\n    };\n}\n\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Remove the data-file-hover attribute from the target.\n * @param e - Event\n */\nfunction removeHover(e) {\n    if (e.target instanceof HTMLElement &&\n        e.target.hasAttribute('data-file-hover')) {\n        e.target.removeAttribute('data-file-hover');\n    }\n}\n/**\n * Prevent stray drag/drop events from navigating the window.\n * @param e - Event\n * @public\n */\nfunction preventStrayDrop(type, e) {\n    if (!(e.target instanceof HTMLInputElement)) {\n        e.preventDefault();\n    }\n    else if (type === 'dragover') {\n        e.target.setAttribute('data-file-hover', 'true');\n    }\n    if (type === 'drop') {\n        removeHover(e);\n    }\n}\nfunction files(node) {\n    // Localize our content:\n    localize('noFiles', 'Select file')(node);\n    localize('removeAll', 'Remove all')(node);\n    localize('remove')(node);\n    if (isBrowser) {\n        if (!window._FormKit_File_Drop) {\n            window.addEventListener('dragover', preventStrayDrop.bind(null, 'dragover'));\n            window.addEventListener('drop', preventStrayDrop.bind(null, 'drop'));\n            window.addEventListener('dragleave', removeHover);\n            window._FormKit_File_Drop = true;\n        }\n    }\n    node.on('created', () => {\n        if (!Array.isArray(node.value)) {\n            node.input([], false);\n        }\n        if (!node.context)\n            return;\n        node.context.handlers.resetFiles = (e) => {\n            e.preventDefault();\n            node.input([]);\n            if (node.props.id && isBrowser) {\n                const el = document.getElementById(node.props.id);\n                if (el)\n                    el.value = '';\n            }\n        };\n        node.context.handlers.files = (e) => {\n            var _a, _b;\n            const files = [];\n            if (e.target instanceof HTMLInputElement && e.target.files) {\n                for (let i = 0; i < e.target.files.length; i++) {\n                    let file;\n                    if ((file = e.target.files.item(i))) {\n                        files.push({ name: file.name, file });\n                    }\n                }\n                node.input(files);\n            }\n            if (node.context)\n                node.context.files = files;\n            // Call the original listener if there is one.\n            if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n                (_b = node.props.attrs) === null || _b === void 0 ? void 0 : _b.onChange(e);\n            }\n        };\n    });\n}\n\n/**\n * Applies ignore=\"true\" by default.\n * @param node - The node\n * @public\n */\nfunction ignore(node) {\n    if (node.props.ignore === undefined) {\n        node.props.ignore = true;\n        node.parent = null;\n    }\n}\n\nfunction initialValue(node) {\n    node.on('created', () => {\n        if (node.context) {\n            node.context.initialValue = node.value || '';\n        }\n    });\n}\n\n/**\n * Default classifications that are available.\n */\nconst textClassification = {\n    type: 'input',\n    schema: textSchema$1,\n};\n/**\n * The color input.\n * @public\n */\nconst color = textClassification;\n/**\n * The date input.\n * @public\n */\nconst date = textClassification;\n/**\n * The datetime-local input.\n * @public\n */\nconst datetimeLocal = textClassification;\n/**\n * The email input.\n * @public\n */\nconst email = textClassification;\n/**\n * The month input.\n * @public\n */\nconst month = textClassification;\n/**\n * The number input.\n * @public\n */\nconst number = textClassification;\n/**\n * The password input.\n * @public\n */\nconst password = textClassification;\n/**\n * The search input.\n * @public\n */\nconst search = textClassification;\n/**\n * The tel input.\n * @public\n */\nconst tel = textClassification;\n/**\n * The time input.\n * @public\n */\nconst time = textClassification;\n/**\n * The text input.\n * @public\n */\nconst text = textClassification;\n/**\n * The url input.\n * @public\n */\nconst url = textClassification;\n/**\n * The week input.\n * @public\n */\nconst week = textClassification;\n/**\n * The range input.\n * @public\n */\nconst range = textClassification;\n/**\n * The textarea input.\n * @public\n */\nconst textarea = {\n    type: 'input',\n    schema: textareaSchema,\n    features: [initialValue],\n};\n/**\n * Buttons are all this classification:\n */\nconst buttonClassification = {\n    type: 'input',\n    schema: buttonSchema,\n    features: [localize('submit'), ignore],\n};\n/**\n * The submit input.\n * @public\n */\nconst submit = buttonClassification;\n/**\n * The button classification.\n * @public\n */\nconst button = buttonClassification;\n/**\n * The hidden input.\n * @public\n */\nconst hidden = {\n    type: 'input',\n    schema: hiddenSchema,\n};\n/**\n * The select input type.\n * @public\n */\nconst select = {\n    type: 'input',\n    schema: textSchema,\n    props: ['options', 'placeholder'],\n    features: [options, select$1],\n};\n/**\n * The checkbox input type.\n * @public\n */\nconst checkbox = {\n    type: 'input',\n    schema: boxSchema,\n    props: ['options', 'onValue', 'offValue'],\n    features: [options, checkboxes],\n};\n/**\n * The radio input type.\n * @public\n */\nconst radio = {\n    type: 'input',\n    schema: boxSchema,\n    props: ['options'],\n    features: [options, radios],\n};\n/**\n * The group input type.\n * @public\n */\nconst group = {\n    type: 'group',\n    schema: groupSchema,\n    features: [disables],\n};\n/**\n * The form input type.\n * @public\n */\nconst form = {\n    type: 'group',\n    schema: formSchema,\n    props: [\n        'actions',\n        'submit',\n        'submitLabel',\n        'submitAttrs',\n        'submitBehavior',\n        'incompleteMessage',\n    ],\n    features: [form$1, disables],\n};\n/**\n * The list input type.\n * @public\n */\nconst list = {\n    type: 'list',\n    schema: listSchema,\n    features: [disables],\n};\n/**\n * The file input.\n * @public\n */\nconst file = {\n    type: 'input',\n    schema: fileSchema,\n    features: [files],\n    props: ['files'],\n};\n\nvar inputs = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    color: color,\n    date: date,\n    datetimeLocal: datetimeLocal,\n    email: email,\n    month: month,\n    number: number,\n    password: password,\n    search: search,\n    tel: tel,\n    time: time,\n    text: text,\n    url: url,\n    week: week,\n    range: range,\n    textarea: textarea,\n    submit: submit,\n    button: button,\n    hidden: hidden,\n    select: select,\n    checkbox: checkbox,\n    radio: radio,\n    group: group,\n    form: form,\n    list: list,\n    file: file\n});\n\n/**\n *\n * @param libraries - One or many formkit urls.\n * @returns\n * @public\n */\nfunction createLibraryPlugin(...libraries) {\n    /**\n     * Merge all provided library items.\n     */\n    const library = libraries.reduce((merged, lib) => (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.extend)(merged, lib), {});\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    const plugin = () => { };\n    /**\n     * Enables the hook that exposes all library inputs.\n     * @param node - The primary plugin\n     */\n    plugin.library = function (node) {\n        const type = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.camel)(node.props.type);\n        if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(library, type)) {\n            node.define(library[type]);\n        }\n    };\n    return plugin;\n}\n\n/**\n * Export all features (#188):\n * @public\n */\nvar index = {\n    checkbox: checkboxes,\n    disables,\n    files,\n    form: form$1,\n    ignore,\n    initialValue,\n    localize,\n    normalizeBoxes,\n    options,\n    radios,\n    select: select$1,\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/inputs/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/observer/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@formkit/observer/dist/index.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyListeners\": function() { return /* binding */ applyListeners; },\n/* harmony export */   \"createObserver\": function() { return /* binding */ createObserver; },\n/* harmony export */   \"diffDeps\": function() { return /* binding */ diffDeps; },\n/* harmony export */   \"isKilled\": function() { return /* binding */ isKilled; },\n/* harmony export */   \"removeListeners\": function() { return /* binding */ removeListeners; }\n/* harmony export */ });\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n/* harmony import */ var _formkit_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formkit/core */ \"./node_modules/@formkit/core/dist/index.mjs\");\n\n\n\n/**\n * A registry of all revoked observers.\n */\nconst revokedObservers = new WeakSet();\n/**\n * The FormKitNode to observe.\n * @param node - Any formkit node to observe.\n * @returns\n * @public\n */\nfunction createObserver(node, dependencies) {\n    // The dependencies touched during tracking\n    const deps = dependencies || Object.assign(new Map(), { active: false });\n    // A registry of event receipts returned by the event system\n    const receipts = new Map();\n    /**\n     * Simple function to add a dependency to the deps map.\n     * @param event - The name of the event type (like commit/input etc)\n     */\n    const addDependency = function (event) {\n        var _a;\n        if (!deps.active)\n            return;\n        if (!deps.has(node))\n            deps.set(node, new Set());\n        (_a = deps.get(node)) === null || _a === void 0 ? void 0 : _a.add(event);\n    };\n    /**\n     * Proxies the props of a node so we know which ones were messed with, could\n     * potentially be more generalized in the future if we want to support\n     * more sub-objects.\n     * @param props - The props object from a node\n     * @returns\n     */\n    const observeProps = function (props) {\n        return new Proxy(props, {\n            get(...args) {\n                typeof args[1] === 'string' && addDependency(`prop:${args[1]}`);\n                return Reflect.get(...args);\n            },\n        });\n    };\n    /**\n     * Observes the FormKit ledger \"value\".\n     * @param ledger - A formkit ledger counter.\n     */\n    const observeLedger = function (ledger) {\n        return new Proxy(ledger, {\n            get(...args) {\n                if (args[1] === 'value') {\n                    return (key) => {\n                        addDependency(`count:${key}`);\n                        return ledger.value(key);\n                    };\n                }\n                return Reflect.get(...args);\n            },\n        });\n    };\n    /**\n     * Return values from our observer proxy first pass through this function\n     * which gives us a chance to listen sub-dependencies and properties.\n     */\n    const observe = function (value, property) {\n        if ((0,_formkit_core__WEBPACK_IMPORTED_MODULE_1__.isNode)(value)) {\n            return createObserver(value, deps);\n        }\n        if (property === 'value')\n            addDependency('commit');\n        if (property === 'props')\n            return observeProps(value);\n        if (property === 'ledger')\n            return observeLedger(value);\n        return value;\n    };\n    /**\n     * The actual proxy object of the original node.\n     */\n    const { proxy: observed, revoke, } = Proxy.revocable(node, {\n        get(...args) {\n            switch (args[1]) {\n                case 'deps':\n                    return deps;\n                case 'watch':\n                    return (block) => watch(observed, block);\n                case 'observe':\n                    return () => {\n                        const old = new Map(deps);\n                        deps.clear();\n                        deps.active = true;\n                        return old;\n                    };\n                case 'stopObserve':\n                    return () => {\n                        const newDeps = new Map(deps);\n                        deps.active = false;\n                        return newDeps;\n                    };\n                case 'receipts':\n                    return receipts;\n                case 'kill':\n                    return () => {\n                        removeListeners(receipts);\n                        revokedObservers.add(args[2]);\n                        revoke();\n                    };\n            }\n            const value = Reflect.get(...args);\n            // If we're dealing with a function, we need to sub-call the function\n            // get that return value, and pass it through the same logic.\n            if (typeof value === 'function') {\n                return (...subArgs) => {\n                    const subValue = value(...subArgs);\n                    return observe(subValue, args[1]);\n                };\n            }\n            return observe(value, args[1]);\n        },\n    });\n    return observed;\n}\n/**\n * Given two maps (toAdd and toRemove) apply the dependencies as event listeners\n * on the underlying nodes.\n * @param node - The node to apply dependencies to\n * @param delta - The toAdd and toRemove dependency Maps\n * @public\n */\nfunction applyListeners(node, [toAdd, toRemove], callback) {\n    toAdd.forEach((events, depNode) => {\n        events.forEach((event) => {\n            node.receipts.has(depNode) || node.receipts.set(depNode, {});\n            node.receipts.set(depNode, Object.assign(node.receipts.get(depNode), {\n                [event]: depNode.on(event, callback),\n            }));\n        });\n    });\n    toRemove.forEach((events, depNode) => {\n        events.forEach((event) => {\n            if (node.receipts.has(depNode)) {\n                const nodeReceipts = node.receipts.get(depNode);\n                if (nodeReceipts && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(nodeReceipts, event)) {\n                    depNode.off(nodeReceipts[event]);\n                    delete nodeReceipts[event];\n                    node.receipts.set(depNode, nodeReceipts);\n                }\n            }\n        });\n    });\n}\n/**\n * Remove all the receipts from the observed node and subtree.\n * @param receipts - The formkit observer receipts to remove\n * @public\n */\nfunction removeListeners(receipts) {\n    receipts.forEach((events, node) => {\n        for (const event in events) {\n            node.off(events[event]);\n        }\n    });\n}\n/**\n * Observes a chunk of code to dependencies, and then re-calls that chunk of\n * code when those dependencies are manipulated.\n * @param node - The node to observer\n * @param block - The block of code to observe\n * @public\n */\nasync function watch(node, block) {\n    const oldDeps = new Map(node.deps);\n    node.observe();\n    const res = block(node);\n    if (res instanceof Promise)\n        await res;\n    const newDeps = node.stopObserve();\n    applyListeners(node, diffDeps(oldDeps, newDeps), () => watch(node, block));\n}\n/**\n * Determines which nodes should be added as dependencies and which should be\n * removed.\n * @param previous - The previous watcher dependencies\n * @param current - The new/current watcher dependencies\n * @returns\n * @public\n */\nfunction diffDeps(previous, current) {\n    const toAdd = new Map();\n    const toRemove = new Map();\n    current.forEach((events, node) => {\n        if (!previous.has(node)) {\n            toAdd.set(node, events);\n        }\n        else {\n            const eventsToAdd = new Set();\n            const previousEvents = previous.get(node);\n            events.forEach((event) => !(previousEvents === null || previousEvents === void 0 ? void 0 : previousEvents.has(event)) && eventsToAdd.add(event));\n            toAdd.set(node, eventsToAdd);\n        }\n    });\n    previous.forEach((events, node) => {\n        if (!current.has(node)) {\n            toRemove.set(node, events);\n        }\n        else {\n            const eventsToRemove = new Set();\n            const newEvents = current.get(node);\n            events.forEach((event) => !(newEvents === null || newEvents === void 0 ? void 0 : newEvents.has(event)) && eventsToRemove.add(event));\n            toRemove.set(node, eventsToRemove);\n        }\n    });\n    return [toAdd, toRemove];\n}\n/**\n * Checks if the given noe is revoked.\n * @param node - Any observed node to check.\n * @returns\n * @public\n */\nfunction isKilled(node) {\n    return revokedObservers.has(node);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/observer/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/rules/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@formkit/rules/dist/index.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"accepted\": function() { return /* binding */ accepted; },\n/* harmony export */   \"alpha\": function() { return /* binding */ alpha; },\n/* harmony export */   \"alpha_spaces\": function() { return /* binding */ alpha_spaces; },\n/* harmony export */   \"alphanumeric\": function() { return /* binding */ alphanumeric; },\n/* harmony export */   \"between\": function() { return /* binding */ between; },\n/* harmony export */   \"confirm\": function() { return /* binding */ confirm; },\n/* harmony export */   \"date_after\": function() { return /* binding */ date_after; },\n/* harmony export */   \"date_before\": function() { return /* binding */ date_before; },\n/* harmony export */   \"date_between\": function() { return /* binding */ date_between; },\n/* harmony export */   \"date_format\": function() { return /* binding */ date_format; },\n/* harmony export */   \"email\": function() { return /* binding */ email; },\n/* harmony export */   \"ends_with\": function() { return /* binding */ ends_with; },\n/* harmony export */   \"is\": function() { return /* binding */ is; },\n/* harmony export */   \"length\": function() { return /* binding */ length; },\n/* harmony export */   \"matches\": function() { return /* binding */ matches; },\n/* harmony export */   \"max\": function() { return /* binding */ max; },\n/* harmony export */   \"min\": function() { return /* binding */ min; },\n/* harmony export */   \"not\": function() { return /* binding */ not; },\n/* harmony export */   \"number\": function() { return /* binding */ number; },\n/* harmony export */   \"required\": function() { return /* binding */ required; },\n/* harmony export */   \"starts_with\": function() { return /* binding */ starts_with; },\n/* harmony export */   \"url\": function() { return /* binding */ url; }\n/* harmony export */ });\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n\n\n/**\n * Determine if the given input's value was should be considered \"accepted\".\n * @param context - The FormKitValidationContext\n * @public\n */\nconst accepted = function accepted({ value }) {\n    return ['yes', 'on', '1', 1, true, 'true'].includes(value);\n};\n\n/**\n * Determine if the given input's value is after a given date.\n * Defaults to current time.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_after = function ({ value }, compare = false) {\n    const timestamp = Date.parse(compare || new Date());\n    const fieldValue = Date.parse(String(value));\n    return isNaN(fieldValue) ? false : fieldValue > timestamp;\n};\n\n/**\n * Determine if the given input's value is only alpha characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst alpha = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^[a-zA-ZÀ-ÖØ-öø-ÿĄąĆćĘęŁłŃńŚśŹźŻż]+$/,\n        latin: /^[a-zA-Z]+$/,\n    };\n    const selectedSet = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value is only alpha characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst alpha_spaces = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^[a-zA-ZÀ-ÖØ-öø-ÿĄąĆćĘęŁłŃńŚśŹźŻż ]+$/,\n        latin: /^[a-zA-Z ]+$/,\n    };\n    const selectedSet = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value is only alpha or numeric characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst alphanumeric = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^[a-zA-Z0-9À-ÖØ-öø-ÿĄąĆćĘęŁłŃńŚśŹźŻż]+$/,\n        latin: /^[a-zA-Z0-9]+$/,\n    };\n    const selectedSet = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.has)(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value before a given date.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_before = function ({ value }, compare = false) {\n    const timestamp = Date.parse(compare || new Date());\n    const fieldValue = Date.parse(String(value));\n    return isNaN(fieldValue) ? false : fieldValue < timestamp;\n};\n\n/**\n * Determine if the given input's value is between two other values.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst between = function between({ value }, from, to) {\n    if (!isNaN(value) && !isNaN(from) && !isNaN(to)) {\n        const val = 1 * value;\n        from = Number(from);\n        to = Number(to);\n        const [a, b] = from <= to ? [from, to] : [to, from];\n        return val >= 1 * a && val <= 1 * b;\n    }\n    return false;\n};\n\nconst hasConfirm = /(_confirm(?:ed)?)$/;\n/**\n * Determine if the given input's value matches another input's value\n * @param context - The FormKitValidationContext\n * @public\n */\nconst confirm = function confirm(node, address, comparison = 'loose') {\n    var _a;\n    if (!address) {\n        address = hasConfirm.test(node.name)\n            ? node.name.replace(hasConfirm, '')\n            : `${node.name}_confirm`;\n    }\n    const foreignValue = (_a = node.at(address)) === null || _a === void 0 ? void 0 : _a.value;\n    return comparison === 'strict'\n        ? node.value === foreignValue\n        : node.value == foreignValue;\n};\n\n/**\n * Determine if the given input's value is between two other dates\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_between = function date_between({ value }, dateA, dateB) {\n    dateA = dateA instanceof Date ? dateA.getTime() : Date.parse(dateA);\n    dateB = dateB instanceof Date ? dateB.getTime() : Date.parse(dateB);\n    const compareTo = value instanceof Date ? value.getTime() : Date.parse(String(value));\n    if (dateA && !dateB) {\n        dateB = dateA;\n        dateA = Date.now();\n    }\n    else if (!dateA || !compareTo) {\n        return false;\n    }\n    return compareTo >= dateA && compareTo <= dateB;\n};\n\n/**\n * Determine if the given input's value matches a specified date format\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_format = function date({ value }, format) {\n    if (format && typeof format === 'string') {\n        return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.regexForFormat)(format).test(String(value));\n    }\n    return !isNaN(Date.parse(String(value)));\n};\n\n/**\n * Determine if the given input's value is a plausible email address.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst email = function email({ value }) {\n    const isEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n    return isEmail.test(String(value));\n};\n\n/**\n * Determine if the given input's value ends with a given string\n * @param context - The FormKitValidationContext\n * @public\n */\nconst ends_with = function ends_with({ value }, ...stack) {\n    if (typeof value === 'string' && stack.length) {\n        return stack.some((item) => {\n            return value.endsWith(item);\n        });\n    }\n    else if (typeof value === 'string' && stack.length === 0) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Determine if the given input's value is in a set of possible values.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst is = function is({ value }, ...stack) {\n    return stack.some((item) => {\n        if (typeof item === 'object') {\n            return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.eq)(item, value);\n        }\n        return item == value;\n    });\n};\n\n/**\n * Determine if the given input's value length is full width.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst length = function length({ value }, first = 0, second = Infinity) {\n    first = parseInt(first);\n    second = isNaN(parseInt(second)) ? Infinity : parseInt(second);\n    const min = first <= second ? first : second;\n    const max = second >= first ? second : first;\n    if (typeof value === 'string' || Array.isArray(value)) {\n        return value.length >= min && value.length <= max;\n    }\n    else if (value && typeof value === 'object') {\n        const length = Object.keys(value).length;\n        return length >= min && length <= max;\n    }\n    return false;\n};\n\n/**\n * Determine if the given input's value matches one or more values or regular expressions.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst matches = function matches({ value }, ...stack) {\n    return stack.some((pattern) => {\n        if (typeof pattern === 'string' &&\n            pattern.substr(0, 1) === '/' &&\n            pattern.substr(-1) === '/') {\n            pattern = new RegExp(pattern.substr(1, pattern.length - 2));\n        }\n        if (pattern instanceof RegExp) {\n            return pattern.test(String(value));\n        }\n        return pattern === value;\n    });\n};\n\n/**\n * Determine if the given input's value is less than the maximum\n * @param context - The FormKitValidationContext\n * @public\n */\nconst max = function max({ value }, maximum = 10) {\n    if (Array.isArray(value)) {\n        return value.length <= maximum;\n    }\n    return Number(value) <= Number(maximum);\n};\n\n/**\n * Determine if the given input's value is less than a certain value.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst min = function min({ value }, minimum = 1) {\n    if (Array.isArray(value)) {\n        return value.length >= minimum;\n    }\n    return Number(value) >= Number(minimum);\n};\n\n/**\n * Determine if the given input's value is not in a given stack\n * @param context - The FormKitValidationContext\n * @public\n */\nconst not = function not({ value }, ...stack) {\n    return !stack.some((item) => {\n        if (typeof item === 'object') {\n            return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.eq)(item, value);\n        }\n        return item === value;\n    });\n};\n\n/**\n * Determine if the given input's value is numeric\n * @param context - The FormKitValidationContext\n * @public\n */\nconst number = function number({ value }) {\n    return !isNaN(value);\n};\n\n/**\n * Determine if the given input's value was required.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst required = function required({ value }, action = 'default') {\n    return action === 'trim' && typeof value === 'string'\n        ? !(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(value.trim())\n        : !(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(value);\n};\n/**\n * This rules should run even if the inputs is empty (obviously)\n */\nrequired.skipEmpty = false;\n\n/**\n * Determine if the given input's value starts with a substring\n * @param context - The FormKitValidationContext\n * @public\n */\nconst starts_with = function starts_with({ value }, ...stack) {\n    if (typeof value === 'string' && stack.length) {\n        return stack.some((item) => {\n            return value.startsWith(item);\n        });\n    }\n    else if (typeof value === 'string' && stack.length === 0) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Determine if the given input's value is an http url\n * @param context - The FormKitValidationContext\n * @public\n */\nconst url = function url({ value }, ...stack) {\n    try {\n        const protocols = stack.length ? stack : ['http:', 'https:'];\n        const url = new URL(String(value));\n        return protocols.includes(url.protocol);\n    }\n    catch {\n        return false;\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/rules/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/utils/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@formkit/utils/dist/index.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assignDeep\": function() { return /* binding */ assignDeep; },\n/* harmony export */   \"camel\": function() { return /* binding */ camel; },\n/* harmony export */   \"clone\": function() { return /* binding */ clone; },\n/* harmony export */   \"cloneAny\": function() { return /* binding */ cloneAny; },\n/* harmony export */   \"dedupe\": function() { return /* binding */ dedupe; },\n/* harmony export */   \"empty\": function() { return /* binding */ empty; },\n/* harmony export */   \"eq\": function() { return /* binding */ eq; },\n/* harmony export */   \"escapeExp\": function() { return /* binding */ escapeExp; },\n/* harmony export */   \"except\": function() { return /* binding */ except; },\n/* harmony export */   \"extend\": function() { return /* binding */ extend; },\n/* harmony export */   \"getAt\": function() { return /* binding */ getAt; },\n/* harmony export */   \"has\": function() { return /* binding */ has; },\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"isObject\": function() { return /* binding */ isObject; },\n/* harmony export */   \"isPojo\": function() { return /* binding */ isPojo; },\n/* harmony export */   \"isQuotedString\": function() { return /* binding */ isQuotedString; },\n/* harmony export */   \"isRecord\": function() { return /* binding */ isRecord; },\n/* harmony export */   \"kebab\": function() { return /* binding */ kebab; },\n/* harmony export */   \"nodeProps\": function() { return /* binding */ nodeProps; },\n/* harmony export */   \"nodeType\": function() { return /* binding */ nodeType; },\n/* harmony export */   \"only\": function() { return /* binding */ only; },\n/* harmony export */   \"parseArgs\": function() { return /* binding */ parseArgs; },\n/* harmony export */   \"regexForFormat\": function() { return /* binding */ regexForFormat; },\n/* harmony export */   \"rmEscapes\": function() { return /* binding */ rmEscapes; },\n/* harmony export */   \"setify\": function() { return /* binding */ setify; },\n/* harmony export */   \"shallowClone\": function() { return /* binding */ shallowClone; },\n/* harmony export */   \"slugify\": function() { return /* binding */ slugify; },\n/* harmony export */   \"spread\": function() { return /* binding */ spread; },\n/* harmony export */   \"token\": function() { return /* binding */ token; },\n/* harmony export */   \"undefine\": function() { return /* binding */ undefine; }\n/* harmony export */ });\n/**\n * Generates a random string.\n * @returns string\n * @public\n */\nfunction token() {\n    return Math.random().toString(36).substring(2, 15);\n}\n/**\n * Creates a new set of the specified type and uses the values from an Array or\n * an existing Set.\n * @param items -\n * @returns Set\n * @public\n */\nfunction setify(items) {\n    return items instanceof Set ? items : new Set(items);\n}\n/**\n * Given 2 arrays, return them as a combined array with no duplicates.\n * @param arr1 -\n * @param arr2 -\n * @returns any[]\n * @public\n */\nfunction dedupe(arr1, arr2) {\n    const original = arr1 instanceof Set ? arr1 : new Set(arr1);\n    if (arr2)\n        arr2.forEach((item) => original.add(item));\n    return [...original];\n}\n/**\n * Checks if the given property exists on the given object.\n * @param obj -\n * @param property -\n * @public\n */\nfunction has(obj, property) {\n    return Object.prototype.hasOwnProperty.call(obj, property);\n}\n/**\n * Compare two values for equality optionally at depth.\n * @param valA - Any type of input\n * @param valB - Any type of output\n * @param deep - Indicate if we should recurse into the object\n * @param explicit - Explicit keys\n * @returns boolean\n * @public\n */\nfunction eq(valA, // eslint-disable-line\nvalB, // eslint-disable-line\ndeep = true, explicit = ['__key']) {\n    if (valA === valB)\n        return true;\n    if (typeof valB === 'object' && typeof valA === 'object') {\n        if (valA instanceof Map)\n            return false;\n        if (valA instanceof Set)\n            return false;\n        if (valA instanceof Date)\n            return false;\n        if (valA === null || valB === null)\n            return false;\n        if (Object.keys(valA).length !== Object.keys(valB).length)\n            return false;\n        for (const k of explicit) {\n            if ((k in valA || k in valB) && valA[k] !== valB[k])\n                return false;\n        }\n        for (const key in valA) {\n            if (!(key in valB))\n                return false;\n            if (valA[key] !== valB[key] && !deep)\n                return false;\n            if (deep && !eq(valA[key], valB[key], deep, explicit))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if a value is empty or not.\n * @param value - any type of value that could be returned by an input.\n * @public\n */\nfunction empty(value // eslint-disable-line\n) {\n    const type = typeof value;\n    if (type === 'number')\n        return false;\n    if (value === undefined)\n        return true;\n    if (type === 'string') {\n        return value === '';\n    }\n    if (type === 'object') {\n        if (value === null)\n            return true;\n        for (const _i in value)\n            return false;\n        if (value instanceof RegExp)\n            return false;\n        if (value instanceof Date)\n            return false;\n        return true;\n    }\n    return false;\n}\n/**\n * Escape a string for use in regular expressions.\n * @param string - The string to escape.\n * @public\n */\nfunction escapeExp(string) {\n    // $& means the whole matched string\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/**\n * Given a string format (date) return a regex to match against.\n * @param format - The format of the string\n * @returns\n * @public\n */\nfunction regexForFormat(format) {\n    const escaped = `^${escapeExp(format)}$`;\n    const formats = {\n        MM: '(0[1-9]|1[012])',\n        M: '([1-9]|1[012])',\n        DD: '([012][0-9]|3[01])',\n        D: '([012]?[0-9]|3[01])',\n        YYYY: '\\\\d{4}',\n        YY: '\\\\d{2}',\n    };\n    const tokens = Object.keys(formats);\n    return new RegExp(tokens.reduce((regex, format) => {\n        return regex.replace(format, formats[format]);\n    }, escaped));\n}\n/**\n * Given a FormKit input type\n * @param type - Any FormKit input type\n * @public\n */\nfunction nodeType(type) {\n    const t = type.toLowerCase();\n    if (t === 'list')\n        return 'list';\n    if (t === 'group')\n        return 'group';\n    return 'input';\n}\n/**\n * Determines if an object is an object or not.\n * @param o - any value\n * @returns\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isRecord(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n}\n/**\n * Checks if an object is a simple array or record.\n * @param o - A value to check\n * @returns\n * @public\n */\nfunction isObject(o) {\n    return isRecord(o) || Array.isArray(o);\n}\n/**\n * Attempts to determine if an object is a plain object. Mostly lifted from\n * is-plain-object: https://github.com/jonschlinkert/is-plain-object\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * @param o - any value\n * @returns\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction isPojo(o) {\n    if (isRecord(o) === false)\n        return false;\n    if (o.__FKNode__ || o.__POJO__ === false)\n        return false;\n    const ctor = o.constructor;\n    if (ctor === undefined)\n        return true;\n    const prot = ctor.prototype;\n    if (isRecord(prot) === false)\n        return false;\n    if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Recursively merge data from additional into original returning a new object.\n * @param original - An object to extend\n * @param additional - An object to modify the original object with.\n * @param arrays - By default replaces arrays, but can also append to them.\n * @param ignoreUndefined - when true it treats undefined values as if they dont exist\n * @public\n */\nfunction extend(original, additional, extendArrays = false, ignoreUndefined = false) {\n    if (additional === null)\n        return null;\n    const merged = {};\n    if (typeof additional === 'string')\n        return additional;\n    for (const key in original) {\n        if (has(additional, key) &&\n            (additional[key] !== undefined || !ignoreUndefined)) {\n            if (extendArrays &&\n                Array.isArray(original[key]) &&\n                Array.isArray(additional[key])) {\n                merged[key] = original[key].concat(additional[key]);\n                continue;\n            }\n            if (additional[key] === undefined) {\n                continue;\n            }\n            if (isPojo(original[key]) && isPojo(additional[key])) {\n                merged[key] = extend(original[key], additional[key], extendArrays, ignoreUndefined);\n            }\n            else {\n                merged[key] = additional[key];\n            }\n        }\n        else {\n            merged[key] = original[key];\n        }\n    }\n    for (const key in additional) {\n        if (!has(merged, key) && additional[key] !== undefined) {\n            merged[key] = additional[key];\n        }\n    }\n    return merged;\n}\n/**\n * Determine if the given string is fully quoted. Examples:\n * hello - false\n * \"hello\" - true\n * 'world' - true\n * \"hello\"==\"world\" - false\n * \"hello'this'\" - false\n * \"hello\"'there' - false\n * \"hello\"\"there\" - false\n * 'hello === world' - true\n * @param str - A string to check.\n * @public\n */\nfunction isQuotedString(str) {\n    // quickly return false if the value is note quoted\n    if (str[0] !== '\"' && str[0] !== \"'\")\n        return false;\n    if (str[0] !== str[str.length - 1])\n        return false;\n    const quoteType = str[0];\n    for (let p = 1; p < str.length; p++) {\n        if (str[p] === quoteType &&\n            (p === 1 || str[p - 1] !== '\\\\') &&\n            p !== str.length - 1) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Remove extra escape characters.\n * @param str - A string to remove escape characters from.\n * @public\n */\nfunction rmEscapes(str) {\n    if (!str.length)\n        return '';\n    let clean = '';\n    let lastChar = '';\n    for (let p = 0; p < str.length; p++) {\n        const char = str.charAt(p);\n        if (char !== '\\\\' || lastChar === '\\\\') {\n            clean += char;\n        }\n        lastChar = char;\n    }\n    return clean;\n}\n/**\n * Performs a recursive Object.assign like operation.\n * @param a - An object to be extended by object b\n * @param b - An object to copy values from\n * @public\n */\nfunction assignDeep(a, b) {\n    for (const key in a) {\n        if (has(b, key) &&\n            a[key] !== b[key] &&\n            !(isPojo(a[key]) && isPojo(b[key]))) {\n            a[key] = b[key];\n        }\n        else if (isPojo(a[key]) && isPojo(b[key])) {\n            assignDeep(a[key], b[key]);\n        }\n    }\n    for (const key in b) {\n        if (!has(a, key)) {\n            a[key] = b[key];\n        }\n    }\n    return a;\n}\n/**\n * Filters out values from an object that should not be considered \"props\" of\n * a core node, like \"value\" and \"name\".\n * @param attrs - An object to extract core node config from.\n * @public\n */\nfunction nodeProps(...sets) {\n    return sets.reduce((valid, props) => {\n        const { value, name, modelValue, config, plugins, ...validProps } = props; // eslint-disable-line\n        return Object.assign(valid, validProps);\n    }, {});\n}\n/**\n * Parse a string for comma-separated arguments\n * @param str - A string to parse\n * @public\n */\nfunction parseArgs(str) {\n    const args = [];\n    let arg = '';\n    let depth = 0;\n    let quote = '';\n    let lastChar = '';\n    for (let p = 0; p < str.length; p++) {\n        const char = str.charAt(p);\n        if (char === quote && lastChar !== '\\\\') {\n            quote = '';\n        }\n        else if ((char === \"'\" || char === '\"') && !quote && lastChar !== '\\\\') {\n            quote = char;\n        }\n        else if (char === '(' && !quote) {\n            depth++;\n        }\n        else if (char === ')' && !quote) {\n            depth--;\n        }\n        if (char === ',' && !quote && depth === 0) {\n            args.push(arg);\n            arg = '';\n        }\n        else if (char !== ' ' || quote) {\n            arg += char;\n        }\n        lastChar = char;\n    }\n    if (arg) {\n        args.push(arg);\n    }\n    return args;\n}\n/**\n * Return a new (shallow) object with all properties from a given object\n * that are present in the array.\n * @param obj - An object to clone\n * @param toRemove - An array of keys to remove\n * @public\n */\nfunction except(obj, toRemove) {\n    const clean = {};\n    const exps = toRemove.filter((n) => n instanceof RegExp);\n    const keysToRemove = new Set(toRemove);\n    for (const key in obj) {\n        if (!keysToRemove.has(key) && !exps.some((exp) => exp.test(key))) {\n            clean[key] = obj[key];\n        }\n    }\n    return clean;\n}\n/**\n * Extracts a set of keys from a given object. Importantly, this will extract\n * values even if they are not set on the original object they will just have an\n * undefined value.\n * @param obj - An object to extract values from\n * @param include - A set of keys to extract\n * @returns\n * @public\n */\nfunction only(obj, include) {\n    const clean = {};\n    const exps = include.filter((n) => n instanceof RegExp);\n    include.forEach((key) => {\n        if (!(key instanceof RegExp)) {\n            clean[key] = obj[key];\n        }\n    });\n    Object.keys(obj).forEach((key) => {\n        if (exps.some((exp) => exp.test(key))) {\n            clean[key] = obj[key];\n        }\n    });\n    return clean;\n}\n/**\n * This converts kebab-case to camelCase. It ONLY converts from kebab for\n * efficiency stake.\n * @param str - String to convert.\n * @public\n */\nfunction camel(str) {\n    return str.replace(/-([a-z0-9])/gi, (_s, g) => g.toUpperCase());\n}\n/**\n * This converts camel-case to kebab case. It ONLY converts from camel to kebab.\n * @param str - Converts camel to kebab\n * @returns\n * @public\n */\nfunction kebab(str) {\n    return str\n        .replace(/([a-z0-9])([A-Z])/g, (_s, trail, cap) => trail + '-' + cap.toLowerCase())\n        .replace(' ', '-')\n        .toLowerCase();\n}\n/**\n * Very shallowly clones the given object.\n * @param obj - The object to shallow clone\n * @returns\n * @public\n */\nfunction shallowClone(obj, explicit = ['__key', '__init']) {\n    if (obj !== null && typeof obj === 'object') {\n        let returnObject;\n        if (Array.isArray(obj))\n            returnObject = [...obj];\n        else if (isPojo(obj))\n            returnObject = { ...obj };\n        if (returnObject) {\n            applyExplicit(obj, returnObject, explicit);\n            return returnObject;\n        }\n    }\n    return obj;\n}\n/**\n * Perform a recursive clone on a given object. This only intended to be used\n * for simple objects like arrays and pojos.\n * @param obj - Object to clone\n * @public\n */\nfunction clone(obj, explicit = ['__key', '__init']) {\n    if (obj === null ||\n        obj instanceof RegExp ||\n        obj instanceof Date ||\n        obj instanceof Map ||\n        obj instanceof Set ||\n        (typeof File === 'function' && obj instanceof File))\n        return obj;\n    let returnObject;\n    if (Array.isArray(obj)) {\n        returnObject = obj.map((value) => {\n            if (typeof value === 'object')\n                return clone(value, explicit);\n            return value;\n        });\n    }\n    else {\n        returnObject = Object.keys(obj).reduce((newObj, key) => {\n            newObj[key] =\n                typeof obj[key] === 'object'\n                    ? clone(obj[key], explicit)\n                    : obj[key];\n            return newObj;\n        }, {});\n    }\n    for (const key of explicit) {\n        if (key in obj) {\n            Object.defineProperty(returnObject, key, {\n                enumerable: false,\n                value: obj[key],\n            });\n        }\n    }\n    return returnObject;\n}\n/**\n * Clones anything. If the item is scalar, no worries, it passes it back. if it\n * is an object, it performs a (fast/loose) clone operation.\n * @param obj - The object to clone\n * @public\n */\nfunction cloneAny(obj) {\n    return typeof obj === 'object'\n        ? clone(obj)\n        : obj;\n}\n/**\n * Get a specific value via dot notation.\n * @param obj - An object to fetch data from\n * @param addr - An \"address\" in dot notation\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction getAt(obj, addr) {\n    if (!obj || typeof obj !== 'object')\n        return null;\n    const segments = addr.split('.');\n    let o = obj;\n    for (const i in segments) {\n        const segment = segments[i];\n        if (has(o, segment)) {\n            o = o[segment];\n        }\n        if (+i === segments.length - 1)\n            return o;\n        if (!o || typeof o !== 'object')\n            return null;\n    }\n    return null;\n}\n/**\n * Determines if the value of a prop that is either present (true) or not\n * present (false). For example the prop disabled should disable\n * by just existing, but what if it is set to the string \"false\" — then it\n * should not be disabled.\n * @param value - value to be checked\n * @returns\n * @public\n */\nfunction undefine(value) {\n    return value !== undefined && value !== 'false' && value !== false\n        ? true\n        : undefined;\n}\n/**\n * Defines an object as an initial value.\n * @param obj - Object\n * @returns\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nfunction init(obj) {\n    return !Object.isFrozen(obj)\n        ? Object.defineProperty(obj, '__init', {\n            enumerable: false,\n            value: true,\n        })\n        : obj;\n}\n/**\n * Turn any string into a URL/DOM safe string.\n * @public\n */\nfunction slugify(str) {\n    return str\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[^a-z0-9]/g, ' ')\n        .trim()\n        .replace(/\\s+/g, '-');\n}\n/**\n * Spreads an object or an array, otherwise returns the same value.\n * @param obj - Any value, but will spread objects and arrays\n * @public\n */\nfunction spread(obj, explicit = ['__key', '__init']) {\n    if (obj && typeof obj === 'object') {\n        if (obj instanceof RegExp)\n            return obj;\n        if (obj instanceof Date)\n            return obj;\n        let spread;\n        if (Array.isArray(obj)) {\n            spread = [...obj];\n        }\n        else {\n            spread = { ...obj };\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        return applyExplicit(obj, spread, explicit);\n    }\n    return obj;\n}\n/**\n * Apply non enumerable properties to an object.\n * @param obj - The object to apply non-enumerable properties to\n * @param explicit - An array of non-enumerable properties to apply\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction applyExplicit(original, obj, explicit) {\n    for (const key of explicit) {\n        if (key in original) {\n            Object.defineProperty(obj, key, {\n                enumerable: false,\n                value: original[key],\n            });\n        }\n    }\n    return obj;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/utils/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/validation/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@formkit/validation/dist/index.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createValidationPlugin\": function() { return /* binding */ createValidationPlugin; }\n/* harmony export */ });\n/* harmony import */ var _formkit_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/core */ \"./node_modules/@formkit/core/dist/index.mjs\");\n/* harmony import */ var _formkit_observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formkit/observer */ \"./node_modules/@formkit/observer/dist/index.mjs\");\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n\n\n\n\n/**\n * Message that gets set when the node is awaiting validation.\n */\nconst validatingMessage = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createMessage)({\n    type: 'state',\n    blocking: true,\n    visible: false,\n    value: true,\n    key: 'validating',\n});\n/**\n * The actual validation plugin function, everything must be bootstrapped here.\n * @param node - The node to bind validation to.\n * @public\n */\nfunction createValidationPlugin(baseRules = {}) {\n    return function validationPlugin(node) {\n        const availableRules = Object.assign({}, baseRules, node.props.validationRules);\n        // create an observed node\n        let observedNode = (0,_formkit_observer__WEBPACK_IMPORTED_MODULE_1__.createObserver)(node);\n        const state = { input: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.token)(), rerun: null, isPassing: true };\n        let validation = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.cloneAny)(node.props.validation);\n        // If the node's validation prop changes, update the rules:\n        node.on('prop:validation', ({ payload: value }) => {\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.eq)(validation, value))\n                return;\n            validation = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.cloneAny)(value);\n            // Destroy all observers that may re-trigger validation on an old stack\n            (0,_formkit_observer__WEBPACK_IMPORTED_MODULE_1__.removeListeners)(observedNode.receipts);\n            // Remove all existing messages before re-validating\n            node.store.filter(() => false, 'validation');\n            node.props.parsedRules = parseRules(value, availableRules);\n            observedNode.kill();\n            observedNode = (0,_formkit_observer__WEBPACK_IMPORTED_MODULE_1__.createObserver)(node);\n            validate(observedNode, node.props.parsedRules, state);\n        });\n        // Validate the field when this plugin is initialized\n        node.props.parsedRules = parseRules(validation, availableRules);\n        validate(observedNode, node.props.parsedRules, state);\n    };\n}\n/**\n * Given parsed validations, a value and a node, run the validations and set\n * the appropriate store messages on the node.\n * @param value - The value being validated\n * @param node - The Node this value belongs to\n * @param rules - The rules\n */\nfunction validate(node, validations, state) {\n    if ((0,_formkit_observer__WEBPACK_IMPORTED_MODULE_1__.isKilled)(node))\n        return;\n    state.input = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.token)();\n    state.isPassing = true;\n    node.store.filter((message) => !message.meta.removeImmediately, 'validation');\n    validations.forEach((validation) => validation.debounce && clearTimeout(validation.timer));\n    if (validations.length) {\n        node.store.set(validatingMessage);\n        run(0, validations, node, state, false, () => {\n            node.store.remove(validatingMessage.key);\n        });\n    }\n}\n/**\n * Runs validation rules recursively while collecting dependencies allowing for\n * cross-node validation rules that automatically re-trigger when a foreign\n * value is changed.\n * @param current - The index of the current validation rule\n * @param validations - The remaining validation rule stack to run\n * @param node - An observed node, the owner of this validation stack\n * @param state - An object of state information about this run\n * @param removeImmediately - Should messages created during this call be removed immediately when a new commit takes place?\n * @returns\n */\nfunction run(current, validations, node, state, removeImmediately, complete) {\n    const validation = validations[current];\n    if (!validation)\n        return complete();\n    const currentRun = state.input;\n    validation.state = null;\n    function next(async, result) {\n        state.isPassing = state.isPassing && !!result;\n        validation.queued = false;\n        const newDeps = node.stopObserve();\n        (0,_formkit_observer__WEBPACK_IMPORTED_MODULE_1__.applyListeners)(node, (0,_formkit_observer__WEBPACK_IMPORTED_MODULE_1__.diffDeps)(validation.deps, newDeps), () => {\n            validation.queued = true;\n            if (state.rerun)\n                clearTimeout(state.rerun);\n            state.rerun = setTimeout(validate, 0, node, validations, state);\n        });\n        validation.deps = newDeps;\n        if (state.input === currentRun) {\n            validation.state = result;\n            if (result === false) {\n                createFailedMessage(node, validation, removeImmediately || async);\n            }\n            else {\n                removeMessage(node, validation);\n            }\n            if (validations.length > current + 1) {\n                run(current + 1, validations, node, state, removeImmediately || async, complete);\n            }\n            else {\n                // The validation has completed\n                complete();\n            }\n        }\n    }\n    if ((!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.empty)(node.value) || !validation.skipEmpty) &&\n        (state.isPassing || validation.force)) {\n        if (validation.queued) {\n            runRule(validation, node, (result) => {\n                result instanceof Promise\n                    ? result.then((r) => next(true, r))\n                    : next(false, result);\n            });\n        }\n        else {\n            // In this case our rule is not queued, so literally nothing happened that\n            // would affect it, we just need to move past this rule and make no\n            // modifications to state\n            run(current + 1, validations, node, state, removeImmediately, complete);\n        }\n    }\n    else {\n        // This rule is not being run because either:\n        //  1. The field is empty and this rule should not run when empty\n        //  2. A previous validation rule is failing and this one is not forced\n        // In this case we should call next validation.\n        if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.empty)(node.value) && validation.skipEmpty && state.isPassing) {\n            // This node has an empty value so its validation was skipped. So we\n            // need to queue it up, we do that by starting an observation and just\n            // touching the value attribute.\n            node.observe();\n            node.value;\n        }\n        next(false, null);\n    }\n}\n/**\n * Run a validation rule debounced or not.\n * @param validation - A validation to debounce\n */\nfunction runRule(validation, node, after) {\n    if (validation.debounce) {\n        validation.timer = setTimeout(() => {\n            node.observe();\n            after(validation.rule(node, ...validation.args));\n        }, validation.debounce);\n    }\n    else {\n        node.observe();\n        after(validation.rule(node, ...validation.args));\n    }\n}\n/**\n * The messages given to this function have already been set on the node, but\n * any other validation messages on the node that are not included in this\n * stack should be removed because they have been resolved.\n * @param node - The node to operate on.\n * @param messages - A new stack of messages\n */\nfunction removeMessage(node, validation) {\n    const key = `rule_${validation.name}`;\n    if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(node.store, key)) {\n        node.store.remove(key);\n    }\n}\n/**\n *\n * @param value - The value that is failing\n * @param validation - The validation object\n */\nfunction createFailedMessage(node, validation, removeImmediately) {\n    const i18nArgs = createI18nArgs(node, validation);\n    const customMessage = createCustomMessage(node, validation, i18nArgs);\n    // Here we short circuit the i18n system to force the output.\n    const message = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createMessage)({\n        blocking: validation.blocking,\n        key: `rule_${validation.name}`,\n        meta: {\n            /**\n             * Use this key instead of the message root key to produce i18n validation\n             * messages.\n             */\n            messageKey: validation.name,\n            /**\n             * For messages that were created *by or after* a debounced or async\n             * validation rule — we make note of it so we can immediately remove them\n             * as soon as the next commit happens.\n             */\n            removeImmediately,\n            /**\n             * Determines if this message should be passed to localization.\n             */\n            localize: !customMessage,\n            /**\n             * The arguments that will be passed to the validation rules\n             */\n            i18nArgs,\n        },\n        type: 'validation',\n        value: customMessage || 'This field is not valid.',\n    });\n    node.store.set(message);\n    return message;\n}\n/**\n * Returns a custom validation message if applicable.\n * @param node - FormKit Node\n * @param validation - The validation rule being processed.\n */\nfunction createCustomMessage(node, validation, i18nArgs) {\n    const customMessage = node.props.validationMessages &&\n        (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(node.props.validationMessages, validation.name)\n        ? node.props.validationMessages[validation.name]\n        : undefined;\n    if (typeof customMessage === 'function') {\n        return customMessage(...i18nArgs);\n    }\n    return customMessage;\n}\n/**\n * Creates the arguments passed to the i18n\n * @param node - The node that performed the validation\n * @param validation - The validation that failed\n */\nfunction createI18nArgs(node, validation) {\n    // If a custom message has been found, short circuit the i18n system.\n    return [\n        {\n            node,\n            name: createMessageName(node),\n            args: validation.args,\n        },\n    ];\n}\n/**\n * The name used in validation messages.\n * @param node - The node to display\n * @returns\n */\nfunction createMessageName(node) {\n    if (typeof node.props.validationLabel === 'function') {\n        return node.props.validationLabel(node);\n    }\n    return (node.props.validationLabel ||\n        node.props.label ||\n        node.props.name ||\n        String(node.name));\n}\n/**\n * Describes hints, must also be changed in the debounceExtractor.\n */\nconst hintPattern = '(?:[\\\\*+?()0-9]+)';\n/**\n * A pattern to describe rule names. Rules names can only contain letters,\n * numbers, and underscores and must start with a letter.\n */\nconst rulePattern = '[a-zA-Z][a-zA-Z0-9_]+';\n/**\n * Regular expression for extracting rule data.\n */\nconst ruleExtractor = new RegExp(`^(${hintPattern}?${rulePattern})(?:\\\\:(.*)+)?$`, 'i');\n/**\n * Validation hints are special characters preceding a validation rule, like\n * !phone\n */\nconst hintExtractor = new RegExp(`^(${hintPattern})(${rulePattern})$`, 'i');\n/**\n * Given a hint string like ^(200)? or ^? or (200)?^ extract the hints to\n * matches.\n */\nconst debounceExtractor = /([\\*+?]+)?(\\(\\d+\\))([\\*+?]+)?/;\n/**\n * Determines if a given string is in the proper debounce format.\n */\nconst hasDebounce = /\\(\\d+\\)/;\n/**\n * The default values of the available validation hints.\n */\nconst defaultHints = {\n    blocking: true,\n    debounce: 0,\n    force: false,\n    skipEmpty: true,\n    name: '',\n};\n/**\n * Parse validation intents and strings into validation rule stacks.\n * @param validation - Either a string a validation rules, or proper array of structured rules.\n * @internal\n */\nfunction parseRules(validation, rules) {\n    if (!validation)\n        return [];\n    const intents = typeof validation === 'string'\n        ? extractRules(validation)\n        : (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.clone)(validation);\n    return intents.reduce((validations, args) => {\n        let rule = args.shift();\n        const hints = {};\n        if (typeof rule === 'string') {\n            const [ruleName, parsedHints] = parseHints(rule);\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(rules, ruleName)) {\n                rule = rules[ruleName];\n                Object.assign(hints, parsedHints);\n            }\n        }\n        if (typeof rule === 'function') {\n            validations.push({\n                rule,\n                args,\n                timer: 0,\n                state: null,\n                queued: true,\n                deps: new Map(),\n                ...defaultHints,\n                ...fnHints(hints, rule),\n            });\n        }\n        return validations;\n    }, []);\n}\n/**\n * A string of validation rules written in FormKitRule notation.\n * @param validation - The string of rules\n * @internal\n */\nfunction extractRules(validation) {\n    return validation.split('|').reduce((rules, rule) => {\n        const parsedRule = parseRule(rule);\n        if (parsedRule) {\n            rules.push(parsedRule);\n        }\n        return rules;\n    }, []);\n}\n/**\n * Given a rule like confirm:password_confirm produce a FormKitValidationIntent\n * @param rule - A string representing a validation rule.\n * @returns\n */\nfunction parseRule(rule) {\n    const trimmed = rule.trim();\n    if (trimmed) {\n        const matches = trimmed.match(ruleExtractor);\n        if (matches && typeof matches[1] === 'string') {\n            const ruleName = matches[1].trim();\n            const args = matches[2] && typeof matches[2] === 'string'\n                ? matches[2].split(',').map((s) => s.trim())\n                : [];\n            return [ruleName, ...args];\n        }\n    }\n    return false;\n}\n/**\n * Given a rule name, detect if there are any additional hints like !\n * @param ruleName - string representing a rule name\n * @returns\n */\nfunction parseHints(ruleName) {\n    const matches = ruleName.match(hintExtractor);\n    if (!matches) {\n        return [ruleName, { name: ruleName }];\n    }\n    const map = {\n        '*': { force: true },\n        '+': { skipEmpty: false },\n        '?': { blocking: false },\n    };\n    const [, hints, rule] = matches;\n    const hintGroups = hasDebounce.test(hints)\n        ? hints.match(debounceExtractor) || []\n        : [, hints];\n    return [\n        rule,\n        [hintGroups[1], hintGroups[2], hintGroups[3]].reduce((hints, group) => {\n            if (!group)\n                return hints;\n            if (hasDebounce.test(group)) {\n                hints.debounce = parseInt(group.substr(1, group.length - 1));\n            }\n            else {\n                group\n                    .split('')\n                    .forEach((hint) => (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(map, hint) && Object.assign(hints, map[hint]));\n            }\n            return hints;\n        }, { name: rule }),\n    ];\n}\n/**\n * Extracts hint properties from the validation rule function itself and applies\n * them if they are not already in the set of validation hints extracted from\n * strings.\n * @param existingHints - An existing set of hints already parsed\n * @param rule - The actual rule function, which can contain hint properties\n * @returns\n */\nfunction fnHints(existingHints, rule) {\n    if (!existingHints.name) {\n        existingHints.name = rule.ruleName || rule.name;\n    }\n    return ['skipEmpty', 'force', 'debounce', 'blocking'].reduce((hints, hint) => {\n        if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(rule, hint) && !(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(hints, hint)) {\n            Object.assign(hints, {\n                [hint]: rule[hint],\n            });\n        }\n        return hints;\n    }, existingHints);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZvcm1raXQvdmFsaWRhdGlvbi9kaXN0L2luZGV4Lm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0Bmb3Jta2l0L3ZhbGlkYXRpb24vZGlzdC9pbmRleC5tanM/NjE1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVNZXNzYWdlIH0gZnJvbSAnQGZvcm1raXQvY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVPYnNlcnZlciwgcmVtb3ZlTGlzdGVuZXJzLCBpc0tpbGxlZCwgYXBwbHlMaXN0ZW5lcnMsIGRpZmZEZXBzIH0gZnJvbSAnQGZvcm1raXQvb2JzZXJ2ZXInO1xuaW1wb3J0IHsgdG9rZW4sIGNsb25lQW55LCBlcSwgZW1wdHksIGNsb25lLCBoYXMgfSBmcm9tICdAZm9ybWtpdC91dGlscyc7XG5cbi8qKlxuICogTWVzc2FnZSB0aGF0IGdldHMgc2V0IHdoZW4gdGhlIG5vZGUgaXMgYXdhaXRpbmcgdmFsaWRhdGlvbi5cbiAqL1xuY29uc3QgdmFsaWRhdGluZ01lc3NhZ2UgPSBjcmVhdGVNZXNzYWdlKHtcbiAgICB0eXBlOiAnc3RhdGUnLFxuICAgIGJsb2NraW5nOiB0cnVlLFxuICAgIHZpc2libGU6IGZhbHNlLFxuICAgIHZhbHVlOiB0cnVlLFxuICAgIGtleTogJ3ZhbGlkYXRpbmcnLFxufSk7XG4vKipcbiAqIFRoZSBhY3R1YWwgdmFsaWRhdGlvbiBwbHVnaW4gZnVuY3Rpb24sIGV2ZXJ5dGhpbmcgbXVzdCBiZSBib290c3RyYXBwZWQgaGVyZS5cbiAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gYmluZCB2YWxpZGF0aW9uIHRvLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0aW9uUGx1Z2luKGJhc2VSdWxlcyA9IHt9KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRpb25QbHVnaW4obm9kZSkge1xuICAgICAgICBjb25zdCBhdmFpbGFibGVSdWxlcyA9IE9iamVjdC5hc3NpZ24oe30sIGJhc2VSdWxlcywgbm9kZS5wcm9wcy52YWxpZGF0aW9uUnVsZXMpO1xuICAgICAgICAvLyBjcmVhdGUgYW4gb2JzZXJ2ZWQgbm9kZVxuICAgICAgICBsZXQgb2JzZXJ2ZWROb2RlID0gY3JlYXRlT2JzZXJ2ZXIobm9kZSk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0geyBpbnB1dDogdG9rZW4oKSwgcmVydW46IG51bGwsIGlzUGFzc2luZzogdHJ1ZSB9O1xuICAgICAgICBsZXQgdmFsaWRhdGlvbiA9IGNsb25lQW55KG5vZGUucHJvcHMudmFsaWRhdGlvbik7XG4gICAgICAgIC8vIElmIHRoZSBub2RlJ3MgdmFsaWRhdGlvbiBwcm9wIGNoYW5nZXMsIHVwZGF0ZSB0aGUgcnVsZXM6XG4gICAgICAgIG5vZGUub24oJ3Byb3A6dmFsaWRhdGlvbicsICh7IHBheWxvYWQ6IHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChlcSh2YWxpZGF0aW9uLCB2YWx1ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IGNsb25lQW55KHZhbHVlKTtcbiAgICAgICAgICAgIC8vIERlc3Ryb3kgYWxsIG9ic2VydmVycyB0aGF0IG1heSByZS10cmlnZ2VyIHZhbGlkYXRpb24gb24gYW4gb2xkIHN0YWNrXG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMob2JzZXJ2ZWROb2RlLnJlY2VpcHRzKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgZXhpc3RpbmcgbWVzc2FnZXMgYmVmb3JlIHJlLXZhbGlkYXRpbmdcbiAgICAgICAgICAgIG5vZGUuc3RvcmUuZmlsdGVyKCgpID0+IGZhbHNlLCAndmFsaWRhdGlvbicpO1xuICAgICAgICAgICAgbm9kZS5wcm9wcy5wYXJzZWRSdWxlcyA9IHBhcnNlUnVsZXModmFsdWUsIGF2YWlsYWJsZVJ1bGVzKTtcbiAgICAgICAgICAgIG9ic2VydmVkTm9kZS5raWxsKCk7XG4gICAgICAgICAgICBvYnNlcnZlZE5vZGUgPSBjcmVhdGVPYnNlcnZlcihub2RlKTtcbiAgICAgICAgICAgIHZhbGlkYXRlKG9ic2VydmVkTm9kZSwgbm9kZS5wcm9wcy5wYXJzZWRSdWxlcywgc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIGZpZWxkIHdoZW4gdGhpcyBwbHVnaW4gaXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgbm9kZS5wcm9wcy5wYXJzZWRSdWxlcyA9IHBhcnNlUnVsZXModmFsaWRhdGlvbiwgYXZhaWxhYmxlUnVsZXMpO1xuICAgICAgICB2YWxpZGF0ZShvYnNlcnZlZE5vZGUsIG5vZGUucHJvcHMucGFyc2VkUnVsZXMsIHN0YXRlKTtcbiAgICB9O1xufVxuLyoqXG4gKiBHaXZlbiBwYXJzZWQgdmFsaWRhdGlvbnMsIGEgdmFsdWUgYW5kIGEgbm9kZSwgcnVuIHRoZSB2YWxpZGF0aW9ucyBhbmQgc2V0XG4gKiB0aGUgYXBwcm9wcmlhdGUgc3RvcmUgbWVzc2FnZXMgb24gdGhlIG5vZGUuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgYmVpbmcgdmFsaWRhdGVkXG4gKiBAcGFyYW0gbm9kZSAtIFRoZSBOb2RlIHRoaXMgdmFsdWUgYmVsb25ncyB0b1xuICogQHBhcmFtIHJ1bGVzIC0gVGhlIHJ1bGVzXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUsIHZhbGlkYXRpb25zLCBzdGF0ZSkge1xuICAgIGlmIChpc0tpbGxlZChub2RlKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHN0YXRlLmlucHV0ID0gdG9rZW4oKTtcbiAgICBzdGF0ZS5pc1Bhc3NpbmcgPSB0cnVlO1xuICAgIG5vZGUuc3RvcmUuZmlsdGVyKChtZXNzYWdlKSA9PiAhbWVzc2FnZS5tZXRhLnJlbW92ZUltbWVkaWF0ZWx5LCAndmFsaWRhdGlvbicpO1xuICAgIHZhbGlkYXRpb25zLmZvckVhY2goKHZhbGlkYXRpb24pID0+IHZhbGlkYXRpb24uZGVib3VuY2UgJiYgY2xlYXJUaW1lb3V0KHZhbGlkYXRpb24udGltZXIpKTtcbiAgICBpZiAodmFsaWRhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIG5vZGUuc3RvcmUuc2V0KHZhbGlkYXRpbmdNZXNzYWdlKTtcbiAgICAgICAgcnVuKDAsIHZhbGlkYXRpb25zLCBub2RlLCBzdGF0ZSwgZmFsc2UsICgpID0+IHtcbiAgICAgICAgICAgIG5vZGUuc3RvcmUucmVtb3ZlKHZhbGlkYXRpbmdNZXNzYWdlLmtleSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogUnVucyB2YWxpZGF0aW9uIHJ1bGVzIHJlY3Vyc2l2ZWx5IHdoaWxlIGNvbGxlY3RpbmcgZGVwZW5kZW5jaWVzIGFsbG93aW5nIGZvclxuICogY3Jvc3Mtbm9kZSB2YWxpZGF0aW9uIHJ1bGVzIHRoYXQgYXV0b21hdGljYWxseSByZS10cmlnZ2VyIHdoZW4gYSBmb3JlaWduXG4gKiB2YWx1ZSBpcyBjaGFuZ2VkLlxuICogQHBhcmFtIGN1cnJlbnQgLSBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgdmFsaWRhdGlvbiBydWxlXG4gKiBAcGFyYW0gdmFsaWRhdGlvbnMgLSBUaGUgcmVtYWluaW5nIHZhbGlkYXRpb24gcnVsZSBzdGFjayB0byBydW5cbiAqIEBwYXJhbSBub2RlIC0gQW4gb2JzZXJ2ZWQgbm9kZSwgdGhlIG93bmVyIG9mIHRoaXMgdmFsaWRhdGlvbiBzdGFja1xuICogQHBhcmFtIHN0YXRlIC0gQW4gb2JqZWN0IG9mIHN0YXRlIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgcnVuXG4gKiBAcGFyYW0gcmVtb3ZlSW1tZWRpYXRlbHkgLSBTaG91bGQgbWVzc2FnZXMgY3JlYXRlZCBkdXJpbmcgdGhpcyBjYWxsIGJlIHJlbW92ZWQgaW1tZWRpYXRlbHkgd2hlbiBhIG5ldyBjb21taXQgdGFrZXMgcGxhY2U/XG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBydW4oY3VycmVudCwgdmFsaWRhdGlvbnMsIG5vZGUsIHN0YXRlLCByZW1vdmVJbW1lZGlhdGVseSwgY29tcGxldGUpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdGlvbnNbY3VycmVudF07XG4gICAgaWYgKCF2YWxpZGF0aW9uKVxuICAgICAgICByZXR1cm4gY29tcGxldGUoKTtcbiAgICBjb25zdCBjdXJyZW50UnVuID0gc3RhdGUuaW5wdXQ7XG4gICAgdmFsaWRhdGlvbi5zdGF0ZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gbmV4dChhc3luYywgcmVzdWx0KSB7XG4gICAgICAgIHN0YXRlLmlzUGFzc2luZyA9IHN0YXRlLmlzUGFzc2luZyAmJiAhIXJlc3VsdDtcbiAgICAgICAgdmFsaWRhdGlvbi5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgbmV3RGVwcyA9IG5vZGUuc3RvcE9ic2VydmUoKTtcbiAgICAgICAgYXBwbHlMaXN0ZW5lcnMobm9kZSwgZGlmZkRlcHModmFsaWRhdGlvbi5kZXBzLCBuZXdEZXBzKSwgKCkgPT4ge1xuICAgICAgICAgICAgdmFsaWRhdGlvbi5xdWV1ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlcnVuKVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzdGF0ZS5yZXJ1bik7XG4gICAgICAgICAgICBzdGF0ZS5yZXJ1biA9IHNldFRpbWVvdXQodmFsaWRhdGUsIDAsIG5vZGUsIHZhbGlkYXRpb25zLCBzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YWxpZGF0aW9uLmRlcHMgPSBuZXdEZXBzO1xuICAgICAgICBpZiAoc3RhdGUuaW5wdXQgPT09IGN1cnJlbnRSdW4pIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24uc3RhdGUgPSByZXN1bHQ7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNyZWF0ZUZhaWxlZE1lc3NhZ2Uobm9kZSwgdmFsaWRhdGlvbiwgcmVtb3ZlSW1tZWRpYXRlbHkgfHwgYXN5bmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTWVzc2FnZShub2RlLCB2YWxpZGF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWxpZGF0aW9ucy5sZW5ndGggPiBjdXJyZW50ICsgMSkge1xuICAgICAgICAgICAgICAgIHJ1bihjdXJyZW50ICsgMSwgdmFsaWRhdGlvbnMsIG5vZGUsIHN0YXRlLCByZW1vdmVJbW1lZGlhdGVseSB8fCBhc3luYywgY29tcGxldGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHZhbGlkYXRpb24gaGFzIGNvbXBsZXRlZFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCghZW1wdHkobm9kZS52YWx1ZSkgfHwgIXZhbGlkYXRpb24uc2tpcEVtcHR5KSAmJlxuICAgICAgICAoc3RhdGUuaXNQYXNzaW5nIHx8IHZhbGlkYXRpb24uZm9yY2UpKSB7XG4gICAgICAgIGlmICh2YWxpZGF0aW9uLnF1ZXVlZCkge1xuICAgICAgICAgICAgcnVuUnVsZSh2YWxpZGF0aW9uLCBub2RlLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdC50aGVuKChyKSA9PiBuZXh0KHRydWUsIHIpKVxuICAgICAgICAgICAgICAgICAgICA6IG5leHQoZmFsc2UsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSBvdXIgcnVsZSBpcyBub3QgcXVldWVkLCBzbyBsaXRlcmFsbHkgbm90aGluZyBoYXBwZW5lZCB0aGF0XG4gICAgICAgICAgICAvLyB3b3VsZCBhZmZlY3QgaXQsIHdlIGp1c3QgbmVlZCB0byBtb3ZlIHBhc3QgdGhpcyBydWxlIGFuZCBtYWtlIG5vXG4gICAgICAgICAgICAvLyBtb2RpZmljYXRpb25zIHRvIHN0YXRlXG4gICAgICAgICAgICBydW4oY3VycmVudCArIDEsIHZhbGlkYXRpb25zLCBub2RlLCBzdGF0ZSwgcmVtb3ZlSW1tZWRpYXRlbHksIGNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBydWxlIGlzIG5vdCBiZWluZyBydW4gYmVjYXVzZSBlaXRoZXI6XG4gICAgICAgIC8vICAxLiBUaGUgZmllbGQgaXMgZW1wdHkgYW5kIHRoaXMgcnVsZSBzaG91bGQgbm90IHJ1biB3aGVuIGVtcHR5XG4gICAgICAgIC8vICAyLiBBIHByZXZpb3VzIHZhbGlkYXRpb24gcnVsZSBpcyBmYWlsaW5nIGFuZCB0aGlzIG9uZSBpcyBub3QgZm9yY2VkXG4gICAgICAgIC8vIEluIHRoaXMgY2FzZSB3ZSBzaG91bGQgY2FsbCBuZXh0IHZhbGlkYXRpb24uXG4gICAgICAgIGlmIChlbXB0eShub2RlLnZhbHVlKSAmJiB2YWxpZGF0aW9uLnNraXBFbXB0eSAmJiBzdGF0ZS5pc1Bhc3NpbmcpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBoYXMgYW4gZW1wdHkgdmFsdWUgc28gaXRzIHZhbGlkYXRpb24gd2FzIHNraXBwZWQuIFNvIHdlXG4gICAgICAgICAgICAvLyBuZWVkIHRvIHF1ZXVlIGl0IHVwLCB3ZSBkbyB0aGF0IGJ5IHN0YXJ0aW5nIGFuIG9ic2VydmF0aW9uIGFuZCBqdXN0XG4gICAgICAgICAgICAvLyB0b3VjaGluZyB0aGUgdmFsdWUgYXR0cmlidXRlLlxuICAgICAgICAgICAgbm9kZS5vYnNlcnZlKCk7XG4gICAgICAgICAgICBub2RlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG5leHQoZmFsc2UsIG51bGwpO1xuICAgIH1cbn1cbi8qKlxuICogUnVuIGEgdmFsaWRhdGlvbiBydWxlIGRlYm91bmNlZCBvciBub3QuXG4gKiBAcGFyYW0gdmFsaWRhdGlvbiAtIEEgdmFsaWRhdGlvbiB0byBkZWJvdW5jZVxuICovXG5mdW5jdGlvbiBydW5SdWxlKHZhbGlkYXRpb24sIG5vZGUsIGFmdGVyKSB7XG4gICAgaWYgKHZhbGlkYXRpb24uZGVib3VuY2UpIHtcbiAgICAgICAgdmFsaWRhdGlvbi50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgbm9kZS5vYnNlcnZlKCk7XG4gICAgICAgICAgICBhZnRlcih2YWxpZGF0aW9uLnJ1bGUobm9kZSwgLi4udmFsaWRhdGlvbi5hcmdzKSk7XG4gICAgICAgIH0sIHZhbGlkYXRpb24uZGVib3VuY2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5vYnNlcnZlKCk7XG4gICAgICAgIGFmdGVyKHZhbGlkYXRpb24ucnVsZShub2RlLCAuLi52YWxpZGF0aW9uLmFyZ3MpKTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBtZXNzYWdlcyBnaXZlbiB0byB0aGlzIGZ1bmN0aW9uIGhhdmUgYWxyZWFkeSBiZWVuIHNldCBvbiB0aGUgbm9kZSwgYnV0XG4gKiBhbnkgb3RoZXIgdmFsaWRhdGlvbiBtZXNzYWdlcyBvbiB0aGUgbm9kZSB0aGF0IGFyZSBub3QgaW5jbHVkZWQgaW4gdGhpc1xuICogc3RhY2sgc2hvdWxkIGJlIHJlbW92ZWQgYmVjYXVzZSB0aGV5IGhhdmUgYmVlbiByZXNvbHZlZC5cbiAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gb3BlcmF0ZSBvbi5cbiAqIEBwYXJhbSBtZXNzYWdlcyAtIEEgbmV3IHN0YWNrIG9mIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZU1lc3NhZ2Uobm9kZSwgdmFsaWRhdGlvbikge1xuICAgIGNvbnN0IGtleSA9IGBydWxlXyR7dmFsaWRhdGlvbi5uYW1lfWA7XG4gICAgaWYgKGhhcyhub2RlLnN0b3JlLCBrZXkpKSB7XG4gICAgICAgIG5vZGUuc3RvcmUucmVtb3ZlKGtleSk7XG4gICAgfVxufVxuLyoqXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRoYXQgaXMgZmFpbGluZ1xuICogQHBhcmFtIHZhbGlkYXRpb24gLSBUaGUgdmFsaWRhdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRmFpbGVkTWVzc2FnZShub2RlLCB2YWxpZGF0aW9uLCByZW1vdmVJbW1lZGlhdGVseSkge1xuICAgIGNvbnN0IGkxOG5BcmdzID0gY3JlYXRlSTE4bkFyZ3Mobm9kZSwgdmFsaWRhdGlvbik7XG4gICAgY29uc3QgY3VzdG9tTWVzc2FnZSA9IGNyZWF0ZUN1c3RvbU1lc3NhZ2Uobm9kZSwgdmFsaWRhdGlvbiwgaTE4bkFyZ3MpO1xuICAgIC8vIEhlcmUgd2Ugc2hvcnQgY2lyY3VpdCB0aGUgaTE4biBzeXN0ZW0gdG8gZm9yY2UgdGhlIG91dHB1dC5cbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlTWVzc2FnZSh7XG4gICAgICAgIGJsb2NraW5nOiB2YWxpZGF0aW9uLmJsb2NraW5nLFxuICAgICAgICBrZXk6IGBydWxlXyR7dmFsaWRhdGlvbi5uYW1lfWAsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlIHRoaXMga2V5IGluc3RlYWQgb2YgdGhlIG1lc3NhZ2Ugcm9vdCBrZXkgdG8gcHJvZHVjZSBpMThuIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAqIG1lc3NhZ2VzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtZXNzYWdlS2V5OiB2YWxpZGF0aW9uLm5hbWUsXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZvciBtZXNzYWdlcyB0aGF0IHdlcmUgY3JlYXRlZCAqYnkgb3IgYWZ0ZXIqIGEgZGVib3VuY2VkIG9yIGFzeW5jXG4gICAgICAgICAgICAgKiB2YWxpZGF0aW9uIHJ1bGUg4oCUIHdlIG1ha2Ugbm90ZSBvZiBpdCBzbyB3ZSBjYW4gaW1tZWRpYXRlbHkgcmVtb3ZlIHRoZW1cbiAgICAgICAgICAgICAqIGFzIHNvb24gYXMgdGhlIG5leHQgY29tbWl0IGhhcHBlbnMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZUltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoaXMgbWVzc2FnZSBzaG91bGQgYmUgcGFzc2VkIHRvIGxvY2FsaXphdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbG9jYWxpemU6ICFjdXN0b21NZXNzYWdlLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgYXJndW1lbnRzIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHZhbGlkYXRpb24gcnVsZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaTE4bkFyZ3MsXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6ICd2YWxpZGF0aW9uJyxcbiAgICAgICAgdmFsdWU6IGN1c3RvbU1lc3NhZ2UgfHwgJ1RoaXMgZmllbGQgaXMgbm90IHZhbGlkLicsXG4gICAgfSk7XG4gICAgbm9kZS5zdG9yZS5zZXQobWVzc2FnZSk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG4vKipcbiAqIFJldHVybnMgYSBjdXN0b20gdmFsaWRhdGlvbiBtZXNzYWdlIGlmIGFwcGxpY2FibGUuXG4gKiBAcGFyYW0gbm9kZSAtIEZvcm1LaXQgTm9kZVxuICogQHBhcmFtIHZhbGlkYXRpb24gLSBUaGUgdmFsaWRhdGlvbiBydWxlIGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ3VzdG9tTWVzc2FnZShub2RlLCB2YWxpZGF0aW9uLCBpMThuQXJncykge1xuICAgIGNvbnN0IGN1c3RvbU1lc3NhZ2UgPSBub2RlLnByb3BzLnZhbGlkYXRpb25NZXNzYWdlcyAmJlxuICAgICAgICBoYXMobm9kZS5wcm9wcy52YWxpZGF0aW9uTWVzc2FnZXMsIHZhbGlkYXRpb24ubmFtZSlcbiAgICAgICAgPyBub2RlLnByb3BzLnZhbGlkYXRpb25NZXNzYWdlc1t2YWxpZGF0aW9uLm5hbWVdXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgY3VzdG9tTWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gY3VzdG9tTWVzc2FnZSguLi5pMThuQXJncyk7XG4gICAgfVxuICAgIHJldHVybiBjdXN0b21NZXNzYWdlO1xufVxuLyoqXG4gKiBDcmVhdGVzIHRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBpMThuXG4gKiBAcGFyYW0gbm9kZSAtIFRoZSBub2RlIHRoYXQgcGVyZm9ybWVkIHRoZSB2YWxpZGF0aW9uXG4gKiBAcGFyYW0gdmFsaWRhdGlvbiAtIFRoZSB2YWxpZGF0aW9uIHRoYXQgZmFpbGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUkxOG5BcmdzKG5vZGUsIHZhbGlkYXRpb24pIHtcbiAgICAvLyBJZiBhIGN1c3RvbSBtZXNzYWdlIGhhcyBiZWVuIGZvdW5kLCBzaG9ydCBjaXJjdWl0IHRoZSBpMThuIHN5c3RlbS5cbiAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgbmFtZTogY3JlYXRlTWVzc2FnZU5hbWUobm9kZSksXG4gICAgICAgICAgICBhcmdzOiB2YWxpZGF0aW9uLmFyZ3MsXG4gICAgICAgIH0sXG4gICAgXTtcbn1cbi8qKlxuICogVGhlIG5hbWUgdXNlZCBpbiB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICogQHBhcmFtIG5vZGUgLSBUaGUgbm9kZSB0byBkaXNwbGF5XG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlTmFtZShub2RlKSB7XG4gICAgaWYgKHR5cGVvZiBub2RlLnByb3BzLnZhbGlkYXRpb25MYWJlbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbm9kZS5wcm9wcy52YWxpZGF0aW9uTGFiZWwobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiAobm9kZS5wcm9wcy52YWxpZGF0aW9uTGFiZWwgfHxcbiAgICAgICAgbm9kZS5wcm9wcy5sYWJlbCB8fFxuICAgICAgICBub2RlLnByb3BzLm5hbWUgfHxcbiAgICAgICAgU3RyaW5nKG5vZGUubmFtZSkpO1xufVxuLyoqXG4gKiBEZXNjcmliZXMgaGludHMsIG11c3QgYWxzbyBiZSBjaGFuZ2VkIGluIHRoZSBkZWJvdW5jZUV4dHJhY3Rvci5cbiAqL1xuY29uc3QgaGludFBhdHRlcm4gPSAnKD86W1xcXFwqKz8oKTAtOV0rKSc7XG4vKipcbiAqIEEgcGF0dGVybiB0byBkZXNjcmliZSBydWxlIG5hbWVzLiBSdWxlcyBuYW1lcyBjYW4gb25seSBjb250YWluIGxldHRlcnMsXG4gKiBudW1iZXJzLCBhbmQgdW5kZXJzY29yZXMgYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci5cbiAqL1xuY29uc3QgcnVsZVBhdHRlcm4gPSAnW2EtekEtWl1bYS16QS1aMC05X10rJztcbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBleHRyYWN0aW5nIHJ1bGUgZGF0YS5cbiAqL1xuY29uc3QgcnVsZUV4dHJhY3RvciA9IG5ldyBSZWdFeHAoYF4oJHtoaW50UGF0dGVybn0/JHtydWxlUGF0dGVybn0pKD86XFxcXDooLiopKyk/JGAsICdpJyk7XG4vKipcbiAqIFZhbGlkYXRpb24gaGludHMgYXJlIHNwZWNpYWwgY2hhcmFjdGVycyBwcmVjZWRpbmcgYSB2YWxpZGF0aW9uIHJ1bGUsIGxpa2VcbiAqICFwaG9uZVxuICovXG5jb25zdCBoaW50RXh0cmFjdG9yID0gbmV3IFJlZ0V4cChgXigke2hpbnRQYXR0ZXJufSkoJHtydWxlUGF0dGVybn0pJGAsICdpJyk7XG4vKipcbiAqIEdpdmVuIGEgaGludCBzdHJpbmcgbGlrZSBeKDIwMCk/IG9yIF4/IG9yICgyMDApP14gZXh0cmFjdCB0aGUgaGludHMgdG9cbiAqIG1hdGNoZXMuXG4gKi9cbmNvbnN0IGRlYm91bmNlRXh0cmFjdG9yID0gLyhbXFwqKz9dKyk/KFxcKFxcZCtcXCkpKFtcXCorP10rKT8vO1xuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gc3RyaW5nIGlzIGluIHRoZSBwcm9wZXIgZGVib3VuY2UgZm9ybWF0LlxuICovXG5jb25zdCBoYXNEZWJvdW5jZSA9IC9cXChcXGQrXFwpLztcbi8qKlxuICogVGhlIGRlZmF1bHQgdmFsdWVzIG9mIHRoZSBhdmFpbGFibGUgdmFsaWRhdGlvbiBoaW50cy5cbiAqL1xuY29uc3QgZGVmYXVsdEhpbnRzID0ge1xuICAgIGJsb2NraW5nOiB0cnVlLFxuICAgIGRlYm91bmNlOiAwLFxuICAgIGZvcmNlOiBmYWxzZSxcbiAgICBza2lwRW1wdHk6IHRydWUsXG4gICAgbmFtZTogJycsXG59O1xuLyoqXG4gKiBQYXJzZSB2YWxpZGF0aW9uIGludGVudHMgYW5kIHN0cmluZ3MgaW50byB2YWxpZGF0aW9uIHJ1bGUgc3RhY2tzLlxuICogQHBhcmFtIHZhbGlkYXRpb24gLSBFaXRoZXIgYSBzdHJpbmcgYSB2YWxpZGF0aW9uIHJ1bGVzLCBvciBwcm9wZXIgYXJyYXkgb2Ygc3RydWN0dXJlZCBydWxlcy5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBwYXJzZVJ1bGVzKHZhbGlkYXRpb24sIHJ1bGVzKSB7XG4gICAgaWYgKCF2YWxpZGF0aW9uKVxuICAgICAgICByZXR1cm4gW107XG4gICAgY29uc3QgaW50ZW50cyA9IHR5cGVvZiB2YWxpZGF0aW9uID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGV4dHJhY3RSdWxlcyh2YWxpZGF0aW9uKVxuICAgICAgICA6IGNsb25lKHZhbGlkYXRpb24pO1xuICAgIHJldHVybiBpbnRlbnRzLnJlZHVjZSgodmFsaWRhdGlvbnMsIGFyZ3MpID0+IHtcbiAgICAgICAgbGV0IHJ1bGUgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IGhpbnRzID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IFtydWxlTmFtZSwgcGFyc2VkSGludHNdID0gcGFyc2VIaW50cyhydWxlKTtcbiAgICAgICAgICAgIGlmIChoYXMocnVsZXMsIHJ1bGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJ1bGUgPSBydWxlc1tydWxlTmFtZV07XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihoaW50cywgcGFyc2VkSGludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsaWRhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgcnVsZSxcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIHRpbWVyOiAwLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkZXBzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdEhpbnRzLFxuICAgICAgICAgICAgICAgIC4uLmZuSGludHMoaGludHMsIHJ1bGUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25zO1xuICAgIH0sIFtdKTtcbn1cbi8qKlxuICogQSBzdHJpbmcgb2YgdmFsaWRhdGlvbiBydWxlcyB3cml0dGVuIGluIEZvcm1LaXRSdWxlIG5vdGF0aW9uLlxuICogQHBhcmFtIHZhbGlkYXRpb24gLSBUaGUgc3RyaW5nIG9mIHJ1bGVzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFJ1bGVzKHZhbGlkYXRpb24pIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvbi5zcGxpdCgnfCcpLnJlZHVjZSgocnVsZXMsIHJ1bGUpID0+IHtcbiAgICAgICAgY29uc3QgcGFyc2VkUnVsZSA9IHBhcnNlUnVsZShydWxlKTtcbiAgICAgICAgaWYgKHBhcnNlZFJ1bGUpIHtcbiAgICAgICAgICAgIHJ1bGVzLnB1c2gocGFyc2VkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgIH0sIFtdKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBydWxlIGxpa2UgY29uZmlybTpwYXNzd29yZF9jb25maXJtIHByb2R1Y2UgYSBGb3JtS2l0VmFsaWRhdGlvbkludGVudFxuICogQHBhcmFtIHJ1bGUgLSBBIHN0cmluZyByZXByZXNlbnRpbmcgYSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBwYXJzZVJ1bGUocnVsZSkge1xuICAgIGNvbnN0IHRyaW1tZWQgPSBydWxlLnRyaW0oKTtcbiAgICBpZiAodHJpbW1lZCkge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gdHJpbW1lZC5tYXRjaChydWxlRXh0cmFjdG9yKTtcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgdHlwZW9mIG1hdGNoZXNbMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IG1hdGNoZXNbMV0udHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IG1hdGNoZXNbMl0gJiYgdHlwZW9mIG1hdGNoZXNbMl0gPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBtYXRjaGVzWzJdLnNwbGl0KCcsJykubWFwKChzKSA9PiBzLnRyaW0oKSlcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgcmV0dXJuIFtydWxlTmFtZSwgLi4uYXJnc107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBHaXZlbiBhIHJ1bGUgbmFtZSwgZGV0ZWN0IGlmIHRoZXJlIGFyZSBhbnkgYWRkaXRpb25hbCBoaW50cyBsaWtlICFcbiAqIEBwYXJhbSBydWxlTmFtZSAtIHN0cmluZyByZXByZXNlbnRpbmcgYSBydWxlIG5hbWVcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGludHMocnVsZU5hbWUpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gcnVsZU5hbWUubWF0Y2goaGludEV4dHJhY3Rvcik7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBbcnVsZU5hbWUsIHsgbmFtZTogcnVsZU5hbWUgfV07XG4gICAgfVxuICAgIGNvbnN0IG1hcCA9IHtcbiAgICAgICAgJyonOiB7IGZvcmNlOiB0cnVlIH0sXG4gICAgICAgICcrJzogeyBza2lwRW1wdHk6IGZhbHNlIH0sXG4gICAgICAgICc/JzogeyBibG9ja2luZzogZmFsc2UgfSxcbiAgICB9O1xuICAgIGNvbnN0IFssIGhpbnRzLCBydWxlXSA9IG1hdGNoZXM7XG4gICAgY29uc3QgaGludEdyb3VwcyA9IGhhc0RlYm91bmNlLnRlc3QoaGludHMpXG4gICAgICAgID8gaGludHMubWF0Y2goZGVib3VuY2VFeHRyYWN0b3IpIHx8IFtdXG4gICAgICAgIDogWywgaGludHNdO1xuICAgIHJldHVybiBbXG4gICAgICAgIHJ1bGUsXG4gICAgICAgIFtoaW50R3JvdXBzWzFdLCBoaW50R3JvdXBzWzJdLCBoaW50R3JvdXBzWzNdXS5yZWR1Y2UoKGhpbnRzLCBncm91cCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFncm91cClcbiAgICAgICAgICAgICAgICByZXR1cm4gaGludHM7XG4gICAgICAgICAgICBpZiAoaGFzRGVib3VuY2UudGVzdChncm91cCkpIHtcbiAgICAgICAgICAgICAgICBoaW50cy5kZWJvdW5jZSA9IHBhcnNlSW50KGdyb3VwLnN1YnN0cigxLCBncm91cC5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBncm91cFxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChoaW50KSA9PiBoYXMobWFwLCBoaW50KSAmJiBPYmplY3QuYXNzaWduKGhpbnRzLCBtYXBbaGludF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoaW50cztcbiAgICAgICAgfSwgeyBuYW1lOiBydWxlIH0pLFxuICAgIF07XG59XG4vKipcbiAqIEV4dHJhY3RzIGhpbnQgcHJvcGVydGllcyBmcm9tIHRoZSB2YWxpZGF0aW9uIHJ1bGUgZnVuY3Rpb24gaXRzZWxmIGFuZCBhcHBsaWVzXG4gKiB0aGVtIGlmIHRoZXkgYXJlIG5vdCBhbHJlYWR5IGluIHRoZSBzZXQgb2YgdmFsaWRhdGlvbiBoaW50cyBleHRyYWN0ZWQgZnJvbVxuICogc3RyaW5ncy5cbiAqIEBwYXJhbSBleGlzdGluZ0hpbnRzIC0gQW4gZXhpc3Rpbmcgc2V0IG9mIGhpbnRzIGFscmVhZHkgcGFyc2VkXG4gKiBAcGFyYW0gcnVsZSAtIFRoZSBhY3R1YWwgcnVsZSBmdW5jdGlvbiwgd2hpY2ggY2FuIGNvbnRhaW4gaGludCBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBmbkhpbnRzKGV4aXN0aW5nSGludHMsIHJ1bGUpIHtcbiAgICBpZiAoIWV4aXN0aW5nSGludHMubmFtZSkge1xuICAgICAgICBleGlzdGluZ0hpbnRzLm5hbWUgPSBydWxlLnJ1bGVOYW1lIHx8IHJ1bGUubmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIFsnc2tpcEVtcHR5JywgJ2ZvcmNlJywgJ2RlYm91bmNlJywgJ2Jsb2NraW5nJ10ucmVkdWNlKChoaW50cywgaGludCkgPT4ge1xuICAgICAgICBpZiAoaGFzKHJ1bGUsIGhpbnQpICYmICFoYXMoaGludHMsIGhpbnQpKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGhpbnRzLCB7XG4gICAgICAgICAgICAgICAgW2hpbnRdOiBydWxlW2hpbnRdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpbnRzO1xuICAgIH0sIGV4aXN0aW5nSGludHMpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVWYWxpZGF0aW9uUGx1Z2luIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@formkit/validation/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@formkit/vue/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@formkit/vue/dist/index.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormKit\": function() { return /* binding */ FormKit; },\n/* harmony export */   \"FormKitSchema\": function() { return /* binding */ FormKitSchema; },\n/* harmony export */   \"bindings\": function() { return /* binding */ vueBindings; },\n/* harmony export */   \"clearErrors\": function() { return /* reexport safe */ _formkit_core__WEBPACK_IMPORTED_MODULE_0__.clearErrors; },\n/* harmony export */   \"configSymbol\": function() { return /* binding */ configSymbol; },\n/* harmony export */   \"createInput\": function() { return /* binding */ createInput; },\n/* harmony export */   \"defaultConfig\": function() { return /* binding */ defaultConfig; },\n/* harmony export */   \"errorHandler\": function() { return /* reexport safe */ _formkit_core__WEBPACK_IMPORTED_MODULE_0__.errorHandler; },\n/* harmony export */   \"optionsSymbol\": function() { return /* binding */ optionsSymbol; },\n/* harmony export */   \"parentSymbol\": function() { return /* binding */ parentSymbol; },\n/* harmony export */   \"plugin\": function() { return /* binding */ plugin; },\n/* harmony export */   \"reset\": function() { return /* reexport safe */ _formkit_core__WEBPACK_IMPORTED_MODULE_0__.reset; },\n/* harmony export */   \"resetCount\": function() { return /* reexport safe */ _formkit_core__WEBPACK_IMPORTED_MODULE_0__.resetCount; },\n/* harmony export */   \"setErrors\": function() { return /* reexport safe */ _formkit_core__WEBPACK_IMPORTED_MODULE_0__.setErrors; },\n/* harmony export */   \"submitForm\": function() { return /* reexport safe */ _formkit_core__WEBPACK_IMPORTED_MODULE_0__.submitForm; },\n/* harmony export */   \"useInput\": function() { return /* binding */ useInput; },\n/* harmony export */   \"watchVerbose\": function() { return /* binding */ watchVerbose; }\n/* harmony export */ });\n/* harmony import */ var _formkit_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formkit/core */ \"./node_modules/@formkit/core/dist/index.mjs\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/* harmony import */ var _formkit_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @formkit/utils */ \"./node_modules/@formkit/utils/dist/index.mjs\");\n/* harmony import */ var _formkit_inputs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formkit/inputs */ \"./node_modules/@formkit/inputs/dist/index.mjs\");\n/* harmony import */ var _formkit_rules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @formkit/rules */ \"./node_modules/@formkit/rules/dist/index.mjs\");\n/* harmony import */ var _formkit_validation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @formkit/validation */ \"./node_modules/@formkit/validation/dist/index.mjs\");\n/* harmony import */ var _formkit_i18n__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @formkit/i18n */ \"./node_modules/@formkit/i18n/dist/index.mjs\");\n/* harmony import */ var _formkit_observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @formkit/observer */ \"./node_modules/@formkit/observer/dist/index.mjs\");\n/* harmony import */ var _formkit_dev__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @formkit/dev */ \"./node_modules/@formkit/dev/dist/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A registry of memoized schemas (in JSON) to their respective render function\n * and provider registry.\n */\nconst memo = {};\n/**\n * This symbol represents the current component instance during render. It is\n * critical for linking the current instance to the data required for render.\n */\nlet instanceKey;\n/**\n * A registry of scoped data produced during runtime that is keyed by the\n * instance symbol. For example data from: for-loop instances and slot data.\n */\nconst instanceScopes = new Map();\n/**\n * Indicates the a section of the schema is raw.\n */\nconst raw = '__raw__';\n/**\n * Is a class prop.\n */\nconst isClassProp = /[a-zA-Z0-9\\-][cC]lass$/;\n/**\n * Returns a reference as a placeholder to a specific location on an object.\n * @param data - A reactive data object\n * @param token - A dot-syntax string representing the object path\n * @returns\n */\nfunction getRef(token, data) {\n    const value = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(null);\n    if (token === 'get') {\n        const nodeRefs = {};\n        value.value = get$1.bind(null, nodeRefs);\n        return value;\n    }\n    const path = token.split('.');\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => (value.value = getValue(data, path)));\n    return value;\n}\n/**\n * Returns a value inside a set of data objects.\n * @param sets - An array of objects to search through\n * @param path - A array of string paths easily produced by split()\n * @returns\n */\nfunction getValue(set, path) {\n    if (Array.isArray(set)) {\n        for (const subset of set) {\n            const value = subset !== false && getValue(subset, path);\n            if (value !== undefined)\n                return value;\n        }\n        return undefined;\n    }\n    let foundValue = undefined;\n    path.reduce((obj, segment, i, arr) => {\n        if (typeof obj !== 'object') {\n            foundValue = undefined;\n            return arr.splice(1); // Forces an exit\n        }\n        const currentValue = obj[segment];\n        if (i === path.length - 1 && currentValue !== undefined) {\n            foundValue = currentValue;\n        }\n        return obj[segment];\n    }, set);\n    return foundValue;\n}\n/**\n * Get the node from the global registry\n * @param id - A dot-syntax string where the node is located.\n */\nfunction get$1(nodeRefs, id) {\n    if (typeof id !== 'string')\n        return (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.warn)(650);\n    if (!(id in nodeRefs))\n        nodeRefs[id] = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(undefined);\n    if (nodeRefs[id].value === undefined) {\n        nodeRefs[id].value = null;\n        const root = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.getNode)(id);\n        if (root)\n            nodeRefs[id].value = root.context;\n        (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.watchRegistry)(id, ({ payload: node }) => {\n            nodeRefs[id].value = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isNode)(node) ? node.context : node;\n        });\n    }\n    return nodeRefs[id].value;\n}\n/**\n *\n * @param library - A library of concrete components to use\n * @param schema -\n * @returns\n */\nfunction parseSchema(library, schema) {\n    /**\n     * Given an if/then/else schema node, pre-compile the node and return the\n     * artifacts for the render function.\n     * @param data - The schema context object\n     * @param library - The available components\n     * @param node - The node to parse\n     */\n    function parseCondition(library, node) {\n        const condition = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(node.if), { if: true });\n        const children = createElements(library, node.then);\n        const alternate = node.else ? createElements(library, node.else) : null;\n        return [condition, children, alternate];\n    }\n    /**\n     * Parses a conditional if/then/else attribute statement.\n     * @param data - The data object\n     * @param attr - The attribute\n     * @param _default - The default value\n     * @returns\n     */\n    function parseConditionAttr(attr, _default) {\n        var _a, _b;\n        const condition = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(attr.if));\n        let b = () => _default;\n        let a = () => _default;\n        if (typeof attr.then === 'object') {\n            a = parseAttrs(attr.then, undefined);\n        }\n        else if (typeof attr.then === 'string' && ((_a = attr.then) === null || _a === void 0 ? void 0 : _a.startsWith('$'))) {\n            a = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(attr.then));\n        }\n        else {\n            a = () => attr.then;\n        }\n        if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(attr, 'else')) {\n            if (typeof attr.else === 'object') {\n                b = parseAttrs(attr.else);\n            }\n            else if (typeof attr.else === 'string' && ((_b = attr.else) === null || _b === void 0 ? void 0 : _b.startsWith('$'))) {\n                b = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(attr.else));\n            }\n            else {\n                b = () => attr.else;\n            }\n        }\n        return () => (condition() ? a() : b());\n    }\n    /**\n     * Parse attributes for dynamic content.\n     * @param attrs - Object of attributes\n     * @returns\n     */\n    function parseAttrs(unparsedAttrs, bindExp, _default = {}) {\n        const explicitAttrs = new Set(Object.keys(unparsedAttrs || {}));\n        const boundAttrs = bindExp ? provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(bindExp)) : () => ({});\n        const staticAttrs = {};\n        const setters = [\n            (attrs) => {\n                const bound = boundAttrs();\n                for (const attr in bound) {\n                    if (!explicitAttrs.has(attr)) {\n                        attrs[attr] = bound[attr];\n                    }\n                }\n            },\n        ];\n        if (unparsedAttrs) {\n            if ((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isConditional)(unparsedAttrs)) {\n                // This is a root conditional object that must produce an object of\n                // attributes.\n                const condition = parseConditionAttr(unparsedAttrs, _default);\n                return condition;\n            }\n            // Some attributes are explicitly bound, we need to parse those ones\n            // using the compiler and create a dynamic \"setter\".\n            for (let attr in unparsedAttrs) {\n                const value = unparsedAttrs[attr];\n                let getValue;\n                const isStr = typeof value === 'string';\n                if (attr.startsWith(raw)) {\n                    // attributes prefixed with __raw__ should not be parsed\n                    attr = attr.substring(7);\n                    getValue = () => value;\n                }\n                else if (isStr &&\n                    value.startsWith('$') &&\n                    value.length > 1 &&\n                    !(value.startsWith('$reset') && isClassProp.test(attr))) {\n                    // Most attribute values starting with $ should be compiled\n                    // -class attributes starting with `$reset` should not be compiled\n                    getValue = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(value));\n                }\n                else if (typeof value === 'object' && (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isConditional)(value)) {\n                    // Conditional attrs require further processing\n                    getValue = parseConditionAttr(value, undefined);\n                }\n                else if (typeof value === 'object' && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.isPojo)(value)) {\n                    // Sub-parse pojos\n                    getValue = parseAttrs(value);\n                }\n                else {\n                    // In all other cases, the value is static\n                    getValue = () => value;\n                    staticAttrs[attr] = value;\n                }\n                setters.push((attrs) => {\n                    attrs[attr] = getValue();\n                });\n            }\n        }\n        return () => {\n            const attrs = {};\n            setters.forEach((setter) => setter(attrs));\n            return attrs;\n        };\n    }\n    /**\n     * Given a single schema node, parse it and extract the value.\n     * @param data - A state object provided to each node\n     * @param node - The schema node being parsed\n     * @returns\n     */\n    function parseNode(library, _node) {\n        let element = null;\n        let attrs = () => null;\n        let condition = false;\n        let children = null;\n        let alternate = null;\n        let iterator = null;\n        let resolve = false;\n        const node = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.sugar)(_node);\n        if ((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isDOM)(node)) {\n            // This is an actual HTML DOM element\n            element = node.$el;\n            attrs =\n                node.$el !== 'text' ? parseAttrs(node.attrs, node.bind) : () => null;\n        }\n        else if ((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isComponent)(node)) {\n            // This is a Vue Component\n            if (typeof node.$cmp === 'string') {\n                if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(library, node.$cmp)) {\n                    element = library[node.$cmp];\n                }\n                else {\n                    element = node.$cmp;\n                    resolve = true;\n                }\n            }\n            else {\n                // in this case it must be an actual component\n                element = node.$cmp;\n            }\n            attrs = parseAttrs(node.props, node.bind);\n        }\n        else if ((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isConditional)(node)) {\n            [condition, children, alternate] = parseCondition(library, node);\n        }\n        // This is the same as a \"v-if\" statement — not an if/else statement\n        if (!(0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isConditional)(node) && 'if' in node) {\n            condition = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(node.if));\n        }\n        else if (!(0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isConditional)(node) && element === null) {\n            // In this odd case our element is actually a partial and\n            // we only want to render the children.\n            condition = () => true;\n        }\n        // Compile children down to a function\n        if ('children' in node && node.children) {\n            if (typeof node.children === 'string') {\n                // We are dealing with a raw string value\n                if (node.children.startsWith('$slots.')) {\n                    // this is a lone text node, turn it into a slot\n                    element = element === 'text' ? 'slot' : element;\n                    children = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(node.children));\n                }\n                else if (node.children.startsWith('$') && node.children.length > 1) {\n                    const value = provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(node.children));\n                    children = () => String(value());\n                }\n                else {\n                    children = () => String(node.children);\n                }\n            }\n            else if (Array.isArray(node.children)) {\n                // We are dealing with node sub-children\n                children = createElements(library, node.children);\n            }\n            else {\n                // This is a conditional if/else clause\n                const [childCondition, c, a] = parseCondition(library, node.children);\n                children = (iterationData) => childCondition && childCondition()\n                    ? c && c(iterationData)\n                    : a && a(iterationData);\n            }\n        }\n        if ((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.isComponent)(node)) {\n            if (children) {\n                // Children of components need to be provided as an object of slots\n                // so we provide an object with the default slot provided as children.\n                // We also create a new scope for this default slot, and then on each\n                // render pass the scoped slot props to the scope.\n                const produceChildren = children;\n                children = (iterationData) => {\n                    return {\n                        default(slotData, key) {\n                            var _a, _b, _c, _d;\n                            // We need to switch the current instance key back to the one that\n                            // originally called this component's render function.\n                            const currentKey = instanceKey;\n                            if (key)\n                                instanceKey = key;\n                            if (slotData)\n                                (_a = instanceScopes.get(instanceKey)) === null || _a === void 0 ? void 0 : _a.unshift(slotData);\n                            if (iterationData)\n                                (_b = instanceScopes.get(instanceKey)) === null || _b === void 0 ? void 0 : _b.unshift(iterationData);\n                            const c = produceChildren(iterationData);\n                            // Ensure our instance key never changed during runtime\n                            if (slotData)\n                                (_c = instanceScopes.get(instanceKey)) === null || _c === void 0 ? void 0 : _c.shift();\n                            if (iterationData)\n                                (_d = instanceScopes.get(instanceKey)) === null || _d === void 0 ? void 0 : _d.shift();\n                            instanceKey = currentKey;\n                            return c;\n                        },\n                    };\n                };\n                children.slot = true;\n            }\n            else {\n                // If we dont have any children, we still need to provide an object\n                // instead of an empty array (which raises a warning in vue)\n                children = () => ({});\n            }\n        }\n        // Compile the for loop down\n        if ('for' in node && node.for) {\n            const values = node.for.length === 3 ? node.for[2] : node.for[1];\n            const getValues = typeof values === 'string' && values.startsWith('$')\n                ? provider((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.compile)(values))\n                : () => values;\n            iterator = [\n                getValues,\n                node.for[0],\n                node.for.length === 3 ? String(node.for[1]) : null,\n            ];\n        }\n        return [condition, element, attrs, children, alternate, iterator, resolve];\n    }\n    /**\n     * Given a particular function that produces children, ensure that the second\n     * argument of all these slots is the original instance key being used to\n     * render the slots.\n     * @param children - The children() function that will produce slots\n     */\n    function createSlots(children, iterationData) {\n        const slots = children(iterationData);\n        const currentKey = instanceKey;\n        return Object.keys(slots).reduce((allSlots, slotName) => {\n            const slotFn = slots && slots[slotName];\n            allSlots[slotName] = (data) => {\n                return (slotFn && slotFn(data, currentKey)) || null;\n            };\n            return allSlots;\n        }, {});\n    }\n    /**\n     * Creates an element\n     * @param data - The context data available to the node\n     * @param node - The schema node to render\n     * @returns\n     */\n    function createElement(library, node) {\n        // Parses the schema node into pertinent parts\n        const [condition, element, attrs, children, alternate, iterator, resolve] = parseNode(library, node);\n        // This is a sub-render function (called within a render function). It must\n        // only use pre-compiled features, and be organized in the most efficient\n        // manner possible.\n        let createNodes = ((iterationData) => {\n            if (condition && element === null && children) {\n                // Handle conditional if/then statements\n                return condition()\n                    ? children(iterationData)\n                    : alternate && alternate(iterationData);\n            }\n            if (element && (!condition || condition())) {\n                // handle text nodes\n                if (element === 'text' && children) {\n                    return (0,vue__WEBPACK_IMPORTED_MODULE_1__.createTextVNode)(String(children()));\n                }\n                // Handle lone slots\n                if (element === 'slot' && children)\n                    return children(iterationData);\n                // Handle resolving components\n                const el = resolve ? (0,vue__WEBPACK_IMPORTED_MODULE_1__.resolveComponent)(element) : element;\n                // If we are rendering slots as children, ensure their instanceKey is properly added\n                const slots = (children === null || children === void 0 ? void 0 : children.slot)\n                    ? createSlots(children, iterationData)\n                    : null;\n                // Handle dom elements and components\n                return (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(el, attrs(), (slots || (children ? children(iterationData) : [])));\n            }\n            return typeof alternate === 'function'\n                ? alternate(iterationData)\n                : alternate;\n        });\n        if (iterator) {\n            const repeatedNode = createNodes;\n            const [getValues, valueName, keyName] = iterator;\n            createNodes = (() => {\n                const _v = getValues();\n                const values = !isNaN(_v)\n                    ? Array(Number(_v))\n                        .fill(0)\n                        .map((_, i) => i)\n                    : _v;\n                const fragment = [];\n                if (typeof values !== 'object')\n                    return null;\n                const instanceScope = instanceScopes.get(instanceKey) || [];\n                for (const key in values) {\n                    const iterationData = Object.defineProperty({\n                        ...instanceScope.reduce((previousIterationData, scopedData) => {\n                            if (previousIterationData.__idata) {\n                                return { ...previousIterationData, ...scopedData };\n                            }\n                            return scopedData;\n                        }, {}),\n                        [valueName]: values[key],\n                        ...(keyName !== null ? { [keyName]: key } : {}),\n                    }, '__idata', { enumerable: false, value: true });\n                    instanceScope.unshift(iterationData);\n                    fragment.push(repeatedNode.bind(null, iterationData)());\n                    instanceScope.shift();\n                }\n                return fragment;\n            });\n        }\n        return createNodes;\n    }\n    /**\n     * Given a schema, parse it and return the resulting renderable nodes.\n     * @param data - The schema context object\n     * @param library - The available components\n     * @param node - The node to parse\n     * @returns\n     */\n    function createElements(library, schema) {\n        if (Array.isArray(schema)) {\n            const els = schema.map(createElement.bind(null, library));\n            return (iterationData) => els.map((element) => element(iterationData));\n        }\n        // Single node to render\n        const element = createElement(library, schema);\n        return (iterationData) => element(iterationData);\n    }\n    /**\n     * Data providers produced as a result of the compiler.\n     */\n    const providers = [];\n    /**\n     * Append the requisite compiler provider and return the compiled function.\n     * @param compiled - A compiled function\n     * @returns\n     */\n    function provider(compiled, hints = {}) {\n        const compiledFns = {};\n        providers.push((callback, key) => {\n            compiledFns[key] = compiled.provide((tokens) => callback(tokens, hints));\n        });\n        return () => compiledFns[instanceKey]();\n    }\n    /**\n     * Creates a new instance of a given schema — this either comes from a\n     * memoized copy of the parsed schema or a freshly parsed version. An symbol\n     * instance key, and dataProvider functions are passed in.\n     * @param providerCallback - A function that is called for each required provider\n     * @param key - a symbol representing the current instance\n     */\n    return function createInstance(providerCallback, key) {\n        const memoKey = JSON.stringify(schema);\n        const [render, compiledProviders] = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(memo, memoKey)\n            ? memo[memoKey]\n            : [createElements(library, schema), providers];\n        memo[memoKey] = [render, compiledProviders];\n        compiledProviders.forEach((compiledProvider) => {\n            compiledProvider(providerCallback, key);\n        });\n        return () => {\n            instanceKey = key;\n            return render();\n        };\n    };\n}\n/**\n * Checks the current runtime scope for data.\n * @param token - The token to lookup in the current scope\n * @param defaultValue - The default ref value to use if no scope is found.\n */\nfunction useScope(token, defaultValue) {\n    const scopedData = instanceScopes.get(instanceKey) || [];\n    let scopedValue = undefined;\n    if (scopedData.length) {\n        scopedValue = getValue(scopedData, token.split('.'));\n    }\n    return scopedValue === undefined ? defaultValue : scopedValue;\n}\n/**\n * Get the current scoped data and flatten it.\n */\nfunction slotData(data, key) {\n    return new Proxy(data, {\n        get(...args) {\n            let data = undefined;\n            const property = args[1];\n            if (typeof property === 'string') {\n                const prevKey = instanceKey;\n                instanceKey = key;\n                data = useScope(property, undefined);\n                instanceKey = prevKey;\n            }\n            return data !== undefined ? data : Reflect.get(...args);\n        },\n    });\n}\n/**\n * Provides data to a parsed schema.\n * @param provider - The SchemaProvider (output of calling parseSchema)\n * @param data - Data to fetch values from\n * @returns\n */\nfunction createRenderFn(instanceCreator, data, instanceKey) {\n    return instanceCreator((requirements, hints = {}) => {\n        return requirements.reduce((tokens, token) => {\n            if (token.startsWith('slots.')) {\n                const slot = token.substring(6);\n                const hasSlot = data.slots && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(data.slots, slot);\n                if (hints.if) {\n                    // If statement — dont render the slot, check if it exists\n                    tokens[token] = () => hasSlot;\n                }\n                else if (data.slots && hasSlot) {\n                    // Render the slot with current scope data\n                    const scopedData = slotData(data, instanceKey);\n                    tokens[token] = () => data.slots[slot](scopedData);\n                    return tokens;\n                }\n            }\n            const value = getRef(token, data);\n            tokens[token] = () => useScope(token, value.value);\n            return tokens;\n        }, {});\n    }, instanceKey);\n}\nlet i = 0;\n/**\n * The FormKitSchema vue component:\n * @public\n */\nconst FormKitSchema = (0,vue__WEBPACK_IMPORTED_MODULE_1__.defineComponent)({\n    name: 'FormKitSchema',\n    props: {\n        schema: {\n            type: [Array, Object],\n            required: true,\n        },\n        data: {\n            type: Object,\n            default: () => ({}),\n        },\n        library: {\n            type: Object,\n            default: () => ({}),\n        },\n    },\n    setup(props, context) {\n        const instance = (0,vue__WEBPACK_IMPORTED_MODULE_1__.getCurrentInstance)();\n        let instanceKey = Symbol(String(i++));\n        instanceScopes.set(instanceKey, []);\n        let provider = parseSchema(props.library, props.schema);\n        let render;\n        let data;\n        // Re-parse the schema if it changes:\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.watch)(() => props.schema, (newSchema, oldSchema) => {\n            var _a;\n            instanceKey = Symbol(String(i++));\n            provider = parseSchema(props.library, props.schema);\n            render = createRenderFn(provider, data, instanceKey);\n            if (newSchema === oldSchema) {\n                ((_a = instance === null || instance === void 0 ? void 0 : instance.proxy) === null || _a === void 0 ? void 0 : _a.$forceUpdate)();\n            }\n        }, { deep: true });\n        // Watch the data object explicitly\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => {\n            data = Object.assign((0,vue__WEBPACK_IMPORTED_MODULE_1__.reactive)(props.data), {\n                slots: context.slots,\n            });\n            render = createRenderFn(provider, data, instanceKey);\n        });\n        return () => render();\n    },\n});\n\n/**\n * All the explicit FormKit props.\n */\nconst nativeProps = {\n    config: {\n        type: Object,\n        default: {},\n    },\n    classes: {\n        type: Object,\n        required: false,\n    },\n    delay: {\n        type: Number,\n        required: false,\n    },\n    errors: {\n        type: Array,\n        default: [],\n    },\n    inputErrors: {\n        type: Object,\n        default: () => ({}),\n    },\n    index: {\n        type: Number,\n        required: false,\n    },\n    id: {\n        type: String,\n        required: false,\n    },\n    modelValue: {\n        required: false,\n    },\n    name: {\n        type: String,\n        required: false,\n    },\n    parent: {\n        type: Object,\n        required: false,\n    },\n    plugins: {\n        type: Array,\n        default: [],\n    },\n    sectionsSchema: {\n        type: Object,\n        default: {},\n    },\n    type: {\n        type: [String, Object],\n        default: 'text',\n    },\n    validation: {\n        type: [String, Array],\n        required: false,\n    },\n    validationMessages: {\n        type: Object,\n        required: false,\n    },\n    validationRules: {\n        type: Object,\n        required: false,\n    },\n    validationLabel: {\n        type: [String, Function],\n        required: false,\n    },\n};\n/**\n * The FormKit props object.\n * @internal\n */\nconst props = nativeProps;\n\n/**\n * The symbol that represents the formkit parent injection value.\n * @public\n */\nconst parentSymbol = Symbol('FormKitParent');\n/**\n * The root FormKit component.\n * @public\n */\nconst FormKit = (0,vue__WEBPACK_IMPORTED_MODULE_1__.defineComponent)({\n    props,\n    emits: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        input: (_value, _node) => true,\n        inputRaw: (_value, _node) => true,\n        'update:modelValue': (_value) => true,\n        node: (node) => !!node,\n        submit: (_data, _node) => true,\n        submitRaw: (_event, _node) => true,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n    },\n    inheritAttrs: false,\n    setup(props, context) {\n        const node = useInput(props, context);\n        if (!node.props.definition)\n            (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.error)(600, node);\n        if (node.props.definition.component) {\n            return () => {\n                var _a;\n                return (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)((_a = node.props.definition) === null || _a === void 0 ? void 0 : _a.component, {\n                    context: node.context,\n                }, { ...context.slots });\n            };\n        }\n        const schema = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)([]);\n        const generateSchema = () => {\n            var _a, _b;\n            const schemaDefinition = (_b = (_a = node.props) === null || _a === void 0 ? void 0 : _a.definition) === null || _b === void 0 ? void 0 : _b.schema;\n            if (!schemaDefinition)\n                (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.error)(601, node);\n            schema.value =\n                typeof schemaDefinition === 'function'\n                    ? schemaDefinition({ ...props.sectionsSchema })\n                    : schemaDefinition;\n        };\n        generateSchema();\n        // If someone emits the schema event, we re-generate the schema\n        node.on('schema', generateSchema);\n        context.emit('node', node);\n        const library = node.props.definition.library;\n        // Expose the FormKitNode to template refs.\n        context.expose({ node });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(FormKitSchema, { schema: schema.value, data: node.context, library }, { ...context.slots });\n    },\n});\n\n/**\n * The Create a new instance of the FormKit plugin for Vue.\n * @param app - A Vue application\n * @param config - FormKit Vue plugin configuration options\n */\nfunction createPlugin(app, options) {\n    app\n        .component(options.alias || 'FormKit', FormKit)\n        .component(options.schemaAlias || 'FormKitSchema', FormKitSchema);\n    return {\n        get: _formkit_core__WEBPACK_IMPORTED_MODULE_0__.getNode,\n        setLocale: (locale) => {\n            var _a;\n            if ((_a = options.config) === null || _a === void 0 ? void 0 : _a.rootConfig) {\n                options.config.rootConfig.locale = locale;\n            }\n        },\n        clearErrors: _formkit_core__WEBPACK_IMPORTED_MODULE_0__.clearErrors,\n        setErrors: _formkit_core__WEBPACK_IMPORTED_MODULE_0__.setErrors,\n        submit: _formkit_core__WEBPACK_IMPORTED_MODULE_0__.submitForm,\n        reset: _formkit_core__WEBPACK_IMPORTED_MODULE_0__.reset,\n    };\n}\n/**\n * The symbol key for accessing the FormKit node options.\n * @public\n */\nconst optionsSymbol = Symbol.for('FormKitOptions');\n/**\n * The symbol key for accessing FormKit root configuration.\n * @public\n */\nconst configSymbol = Symbol.for('FormKitConfig');\n/**\n * Create the FormKit plugin.\n * @public\n */\nconst plugin = {\n    install(app, _options) {\n        /**\n         * Extend the default configuration options.\n         */\n        const options = Object.assign({\n            alias: 'FormKit',\n            schemaAlias: 'FormKitSchema',\n        }, typeof _options === 'function' ? _options() : _options);\n        /**\n         * The root configuration options.\n         */\n        const rootConfig = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createConfig)(options.config || {});\n        /**\n         * We dont want to explicitly provide any \"config\" options, only a root\n         * config option — so here we override the existing config options.\n         */\n        options.config = { rootConfig };\n        /**\n         * Register the global $formkit plugin property.\n         */\n        app.config.globalProperties.$formkit = createPlugin(app, options);\n        /**\n         * Provide the config to the application for injection.\n         */\n        app.provide(optionsSymbol, options);\n        /**\n         * Provide the root config to the application.\n         */\n        app.provide(configSymbol, rootConfig);\n    },\n};\n\n/**\n * Indicates that the path that was requested is no longer valid in the object.\n */\nconst invalidGet = Symbol();\n/**\n *\n * @param obj - An object to observe at depth\n * @param callback - A callback that\n * @public\n */\nfunction watchVerbose(obj, callback) {\n    const watchers = {};\n    const applyWatch = (paths) => {\n        // Watch each property\n        for (const path of paths) {\n            // Stops pre-existing watchers at a given location to prevent dupes:\n            if (path.__str in watchers)\n                watchers[path.__str]();\n            watchers[path.__str] = (0,vue__WEBPACK_IMPORTED_MODULE_1__.watch)(touch.bind(null, obj, path), dispatcher.bind(null, path), { deep: false });\n        }\n    };\n    /**\n     * Clear any watchers deeper than this path.\n     * @param path - The path to start from\n     */\n    const clearWatch = (path) => {\n        if (!path.length)\n            return;\n        for (const key in watchers) {\n            if (`${key}`.startsWith(`${path.__str}.`)) {\n                watchers[key]();\n                delete watchers[key];\n            }\n        }\n    };\n    const dispatcher = createDispatcher(obj, callback, applyWatch, clearWatch);\n    applyWatch(getPaths(obj));\n}\n/**\n * This function synchronously dispatches to the watch callbacks. It uses the\n * knowledge that the getPath function is a depth-first-search thus lower\n * specificity (lower tree nodes) will always have their watchers called first.\n * If a lower specificity watcher is triggered we want to ignore the higher\n * specificity watcher.\n * @param obj - The object to dispatch\n * @param callback - The callback function to emit\n * @param applyWatch - A way to apply watchers to update objects\n * @returns\n */\nfunction createDispatcher(obj, callback, applyWatch, clearChildWatches) {\n    // let dispatchedPaths: Record<string, ObjectPath> = {}\n    // let clear: Promise<void> | null = null\n    return (path) => {\n        const value = get(obj, path);\n        if (value === invalidGet)\n            return;\n        if (path.__deep)\n            clearChildWatches(path);\n        if (typeof value === 'object')\n            applyWatch(getPaths(value, [path], ...path));\n        callback(path, value, obj);\n    };\n}\n/**\n * \"Touches\" a given property for reactivity tracking purposes, if the value at\n * the given path is an object, we flatten it to just its keys since we will\n * already be tracking sub properties independently.\n * @param obj - A ref to traverse for a given path\n * @param path - An array of strings representing the path to locate\n * @returns\n */\nfunction touch(obj, path) {\n    const value = get(obj, path);\n    return value && typeof value === 'object' ? Object.keys(value) : value;\n}\n/**\n * \"Touches\" a given property for reactivity tracking purposes.\n * @param obj - A ref to traverse for a given path\n * @param path - An array of strings representing the path to locate\n * @returns\n */\nfunction get(obj, path) {\n    if ((0,vue__WEBPACK_IMPORTED_MODULE_1__.isRef)(obj)) {\n        if (path.length === 0)\n            return obj.value;\n        obj = obj.value;\n    }\n    return path.reduce((value, segment) => {\n        if (value === invalidGet)\n            return value;\n        if (value === null || typeof value !== 'object') {\n            return invalidGet;\n        }\n        return value[segment];\n    }, obj);\n}\n/**\n * Recursively retrieves all enumerable property paths from the origination\n * object. For example:\n * ```js\n * const obj = {\n *   a: {\n *     b: 123\n *   },\n *   c: 567\n * }\n * const paths = getPaths(obj)\n * // [\n * //   ['a'],\n * //   ['a', 'b'],\n * //   ['c']\n * // ]\n * ```\n * @param obj - An object to retrieve paths for.\n * @param parents - An array of parent paths.\n * @returns\n * @internal\n */\nfunction getPaths(obj, paths = [], ...parents) {\n    if (obj === null)\n        return paths;\n    if (!parents.length) {\n        const path = Object.defineProperty([], '__str', {\n            value: '',\n        });\n        obj = (0,vue__WEBPACK_IMPORTED_MODULE_1__.isRef)(obj) ? obj.value : obj;\n        if (obj && typeof obj === 'object') {\n            Object.defineProperty(path, '__deep', { value: true });\n            paths.push(path);\n        }\n        else {\n            return [path];\n        }\n    }\n    if (obj === null || typeof obj !== 'object')\n        return paths;\n    for (const key in obj) {\n        const path = parents.concat(key);\n        Object.defineProperty(path, '__str', { value: path.join('.') });\n        const value = obj[key];\n        if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.isPojo)(value) || Array.isArray(value)) {\n            paths.push(Object.defineProperty(path, '__deep', { value: true }));\n            paths = paths.concat(getPaths(value, [], ...path));\n        }\n        else {\n            paths.push(path);\n        }\n    }\n    return paths;\n}\n\n/**\n * Gets the raw underlying target object from a Vue Ref or Reactive object.\n * @param obj - Get the underlying target object, or no-op.\n * @returns\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction useRaw(obj) {\n    if (obj === null || typeof obj !== 'object')\n        return obj;\n    if ((0,vue__WEBPACK_IMPORTED_MODULE_1__.isReactive)(obj)) {\n        obj = (0,vue__WEBPACK_IMPORTED_MODULE_1__.toRaw)(obj);\n    }\n    else if ((0,vue__WEBPACK_IMPORTED_MODULE_1__.isRef)(obj)) {\n        obj = ((0,vue__WEBPACK_IMPORTED_MODULE_1__.isReactive)(obj.value) ? useRaw(obj.value) : obj.value);\n    }\n    return obj;\n}\n\n/**\n * Props that are extracted from the attrs object.\n * TODO: Currently local, this should probably exported to a inputs or another\n * package.\n */\nconst pseudoProps = [\n    'help',\n    'label',\n    'ignore',\n    'disabled',\n    'preserve',\n    /^preserve(-e|E)rrors/,\n    /^[a-z]+(?:-visibility|Visibility)$/,\n    /^[a-zA-Z-]+(?:-class|Class)$/,\n];\n/**\n * Given some props, map those props to individualized props internally.\n * @param node - A formkit node\n * @param props - Some props that may include a classes object\n */\nfunction classesToNodeProps(node, props) {\n    if (props.classes) {\n        Object.keys(props.classes).forEach((key) => {\n            if (typeof key === 'string') {\n                node.props[`_${key}Class`] = props.classes[key];\n                // We need to ensure Vue is aware that we want to actually observe the\n                // child values too, so we touch them here.\n                if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.isObject)(props.classes[key]) && key === 'inner')\n                    Object.values(props.classes[key]);\n            }\n        });\n    }\n}\n/**\n * Extracts known FormKit listeners.\n * @param props - Extract known FormKit listeners.\n * @returns\n */\nfunction onlyListeners(props) {\n    if (!props)\n        return {};\n    const knownListeners = ['Submit', 'SubmitRaw'].reduce((listeners, listener) => {\n        const name = `on${listener}`;\n        if (name in props) {\n            if (typeof props[name] === 'function') {\n                listeners[name] = props[name];\n            }\n        }\n        return listeners;\n    }, {});\n    return knownListeners;\n}\n/**\n * A composable for creating a new FormKit node.\n * @param type - The type of node (input, group, list)\n * @param attrs - The FormKit \"props\" — which is really the attrs list.\n * @returns\n * @public\n */\nfunction useInput(props, context, options = {}) {\n    /**\n     * The configuration options, these are provided by either the plugin or by\n     * explicit props.\n     */\n    const config = Object.assign({}, (0,vue__WEBPACK_IMPORTED_MODULE_1__.inject)(optionsSymbol) || {}, options);\n    /**\n     * The current instance.\n     */\n    const instance = (0,vue__WEBPACK_IMPORTED_MODULE_1__.getCurrentInstance)();\n    /**\n     * Extracts the listeners.\n     */\n    const listeners = onlyListeners(instance === null || instance === void 0 ? void 0 : instance.vnode.props);\n    /**\n     * Determines if the prop is v-modeled.\n     */\n    const isVModeled = props.modelValue !== undefined;\n    /**\n     * Determines if the object being passed as a v-model is reactive.\n     */\n    // const isReactiveVModel = isVModeled && isReactive(props.modelValue)\n    /**\n     * Define the initial component\n     */\n    const value = props.modelValue !== undefined\n        ? props.modelValue\n        : (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.cloneAny)(context.attrs.value);\n    /**\n     * Creates the node's initial props from the context, props, and definition\n     * @returns\n     */\n    function createInitialProps() {\n        const initialProps = {\n            ...(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.nodeProps)(props),\n            ...listeners,\n        };\n        const attrs = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.except)((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.nodeProps)(context.attrs), pseudoProps);\n        initialProps.attrs = attrs;\n        const propValues = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.only)((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.nodeProps)(context.attrs), pseudoProps);\n        for (const propName in propValues) {\n            initialProps[(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.camel)(propName)] = propValues[propName];\n        }\n        const classesProps = { props: {} };\n        classesToNodeProps(classesProps, props);\n        Object.assign(initialProps, classesProps.props);\n        if (typeof initialProps.type !== 'string') {\n            initialProps.definition = initialProps.type;\n            delete initialProps.type;\n        }\n        return initialProps;\n    }\n    /**\n     * Create the FormKitNode.\n     */\n    const initialProps = createInitialProps();\n    /**\n     * The parent node.\n     */\n    const parent = initialProps.ignore\n        ? null\n        : props.parent || (0,vue__WEBPACK_IMPORTED_MODULE_1__.inject)(parentSymbol, null);\n    const node = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createNode)((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.extend)(config || {}, {\n        name: props.name || undefined,\n        value,\n        parent,\n        plugins: (config.plugins || []).concat(props.plugins),\n        config: props.config,\n        props: initialProps,\n        index: props.index,\n    }, false, true));\n    /**\n     * If no definition has been assigned at this point — we're out!\n     */\n    if (!node.props.definition)\n        (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.error)(600, node);\n    /**\n     * All props that are bound \"late\" (after node creation) — are added to a set\n     * which is used to watch the context.attrs object.\n     */\n    const lateBoundProps = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(new Set(node.props.definition.props || []));\n    /**\n     * Any additional props added at a \"later\" time should also be part of the\n     * late bound props.\n     */\n    node.on('added-props', ({ payload: lateProps }) => {\n        if (Array.isArray(lateProps))\n            lateProps.forEach((newProp) => lateBoundProps.value.add(newProp));\n    });\n    /**\n     * These prop names must be assigned.\n     */\n    const pseudoPropNames = (0,vue__WEBPACK_IMPORTED_MODULE_1__.computed)(() => pseudoProps.concat([...lateBoundProps.value]).reduce((names, prop) => {\n        if (typeof prop === 'string') {\n            names.push((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.camel)(prop));\n            names.push((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.kebab)(prop));\n        }\n        else {\n            names.push(prop);\n        }\n        return names;\n    }, []));\n    /* Splits Classes object into discrete props for each key */\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => classesToNodeProps(node, props));\n    /**\n     * The props object already has properties even if they start as \"undefined\"\n     * so we can loop over them and individual watchEffect to prevent responding\n     * inappropriately.\n     */\n    const passThrough = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.nodeProps)(props);\n    for (const prop in passThrough) {\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.watch)(() => props[prop], () => {\n            if (props[prop] !== undefined) {\n                node.props[prop] = props[prop];\n            }\n        });\n    }\n    /**\n     * Watch \"pseudoProp\" attributes explicitly.\n     */\n    const attributeWatchers = new Set();\n    const possibleProps = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.nodeProps)(context.attrs);\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => {\n        watchAttributes((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.only)(possibleProps, pseudoPropNames.value));\n    });\n    /**\n     * Defines attributes that should be used as props.\n     * @param attrProps - Attributes that should be used as props instead\n     */\n    function watchAttributes(attrProps) {\n        attributeWatchers.forEach((stop) => {\n            stop();\n            attributeWatchers.delete(stop);\n        });\n        for (const prop in attrProps) {\n            const camelName = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.camel)(prop);\n            attributeWatchers.add((0,vue__WEBPACK_IMPORTED_MODULE_1__.watch)(() => context.attrs[prop], () => {\n                node.props[camelName] = context.attrs[prop];\n            }));\n        }\n    }\n    /**\n     * Watch and dynamically set attribute values, those values that are not\n     * props and are not pseudoProps\n     */\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => {\n        const attrs = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.except)((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.nodeProps)(context.attrs), pseudoPropNames.value);\n        node.props.attrs = Object.assign({}, node.props.attrs || {}, attrs);\n    });\n    /**\n     * Add any/all \"prop\" errors to the store.\n     */\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => {\n        const messages = props.errors.map((error) => (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createMessage)({\n            key: (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.slugify)(error),\n            type: 'error',\n            value: error,\n            meta: { source: 'prop' },\n        }));\n        node.store.apply(messages, (message) => message.type === 'error' && message.meta.source === 'prop');\n    });\n    /**\n     * Add input errors.\n     */\n    if (node.type !== 'input') {\n        const sourceKey = `${node.name}-prop`;\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => {\n            const keys = Object.keys(props.inputErrors);\n            const messages = keys.reduce((messages, key) => {\n                let value = props.inputErrors[key];\n                if (typeof value === 'string')\n                    value = [value];\n                if (Array.isArray(value)) {\n                    messages[key] = value.map((error) => (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createMessage)({\n                        key: error,\n                        type: 'error',\n                        value: error,\n                        meta: { source: sourceKey },\n                    }));\n                }\n                return messages;\n            }, {});\n            node.store.apply(messages, (message) => message.type === 'error' && message.meta.source === sourceKey);\n        });\n    }\n    /**\n     * Watch the config prop for any changes.\n     */\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watchEffect)(() => Object.assign(node.config, props.config));\n    /**\n     * Produce another parent object.\n     */\n    if (node.type !== 'input') {\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.provide)(parentSymbol, node);\n    }\n    let inputTimeout;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const mutex = new WeakSet();\n    /**\n     * Explicitly watch the input value, and emit changes (lazy)\n     */\n    node.on('modelUpdated', () => {\n        var _a, _b;\n        // Emit the values after commit\n        context.emit('inputRaw', (_a = node.context) === null || _a === void 0 ? void 0 : _a.value, node);\n        clearTimeout(inputTimeout);\n        inputTimeout = setTimeout(context.emit, 20, 'input', (_b = node.context) === null || _b === void 0 ? void 0 : _b.value, node);\n        if (isVModeled && node.context) {\n            const newValue = useRaw(node.context.value);\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.isObject)(newValue) && useRaw(props.modelValue) !== newValue) {\n                // If this is an object that has been mutated inside FormKit core then\n                // we know when it is emitted it will \"return\" in the watchVerbose so\n                // we pro-actively add it to the mutex.\n                mutex.add(newValue);\n            }\n            context.emit('update:modelValue', newValue);\n        }\n    });\n    /**\n     * Enabled support for v-model, using this for groups/lists is not recommended\n     */\n    if (isVModeled) {\n        watchVerbose((0,vue__WEBPACK_IMPORTED_MODULE_1__.toRef)(props, 'modelValue'), (path, value) => {\n            var _a;\n            const rawValue = useRaw(value);\n            if ((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.isObject)(rawValue) && mutex.has(rawValue)) {\n                return mutex.delete(rawValue);\n            }\n            if (!path.length)\n                node.input(value, false);\n            else\n                (_a = node.at(path)) === null || _a === void 0 ? void 0 : _a.input(value, false);\n        });\n    }\n    /**\n     * When this input shuts down, we need to \"delete\" the node too.\n     */\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.onUnmounted)(() => node.destroy());\n    return node;\n}\n\nlet totalCreated = 1;\n/**\n * Determine if the given object is a vue component.\n *\n * @param obj - Object or function\n * @returns\n * @public\n */\nfunction isComponent(obj) {\n    return ((typeof obj === 'function' && obj.length === 2) ||\n        (typeof obj === 'object' &&\n            !Array.isArray(obj) &&\n            !('$el' in obj) &&\n            !('$cmp' in obj) &&\n            !('if' in obj)));\n}\n/**\n * Creates a new input from schema or a Vue component with the \"standard\"\n * FormKit features in place such as labels, help text, validation messages, and\n * class support.\n *\n * @param schemaOrComponent - The actual schema of the input.\n * @public\n */\nfunction createInput(schemaOrComponent, definitionOptions = {}) {\n    const definition = {\n        type: 'input',\n        ...definitionOptions,\n    };\n    let schema = undefined;\n    if (isComponent(schemaOrComponent)) {\n        const cmpName = `SchemaComponent${totalCreated++}`;\n        schema = () => ({\n            $cmp: cmpName,\n            props: {\n                context: '$node.context',\n            },\n        });\n        definition.library = { [cmpName]: (0,vue__WEBPACK_IMPORTED_MODULE_1__.markRaw)(schemaOrComponent) };\n    }\n    else {\n        schema = schemaOrComponent;\n    }\n    // Use the default wrapping schema\n    definition.schema = (0,_formkit_inputs__WEBPACK_IMPORTED_MODULE_3__.useSchema)(schema || 'Schema undefined');\n    return definition;\n}\n\n/**\n * A plugin that creates Vue-specific context object on each given node.\n * @param node - FormKitNode to create the context on.\n * @public\n */\nconst vueBindings = function vueBindings(node) {\n    /**\n     * Start a validity counter on all blocking messages.\n     */\n    node.ledger.count('blocking', (m) => m.blocking);\n    const isValid = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(!node.ledger.value('blocking'));\n    /**\n     * Start an error message counter.\n     */\n    node.ledger.count('errors', (m) => m.type === 'error');\n    const hasErrors = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(!!node.ledger.value('errors'));\n    /**\n     * Keep track of the first time a Vue tick cycle has passed.\n     */\n    let hasTicked = false;\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.nextTick)(() => {\n        hasTicked = true;\n    });\n    /**\n     * All messages with the visibility state set to true.\n     */\n    const availableMessages = (0,vue__WEBPACK_IMPORTED_MODULE_1__.reactive)(node.store.reduce((store, message) => {\n        if (message.visible) {\n            store[message.key] = message;\n        }\n        return store;\n    }, {}));\n    /**\n     * A flag that determines when validation messages should be displayed.\n     */\n    const validationVisibility = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(node.props.validationVisibility || 'blur');\n    node.on('prop:validationVisibility', ({ payload }) => {\n        validationVisibility.value = payload;\n    });\n    /**\n     * Keep track of if this input has ever shown validation errors.\n     */\n    const hasShownErrors = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(validationVisibility.value === 'live');\n    /**\n     * The current visibility state of validation messages.\n     */\n    const validationVisible = (0,vue__WEBPACK_IMPORTED_MODULE_1__.computed)(() => {\n        if (context.state.submitted)\n            return true;\n        if (!hasShownErrors.value && !context.state.settled) {\n            return false;\n        }\n        switch (validationVisibility.value) {\n            case 'live':\n                return true;\n            case 'blur':\n                return context.state.blurred;\n            case 'dirty':\n                return context.state.dirty;\n            default:\n                return false;\n        }\n    });\n    /**\n     * Determines if the input should be considered \"complete\".\n     */\n    const isComplete = (0,vue__WEBPACK_IMPORTED_MODULE_1__.computed)(() => {\n        return hasValidation.value\n            ? isValid.value && !hasErrors.value\n            : context.state.dirty && !(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.empty)(context.value);\n    });\n    /**\n     * If the input has validation rules or not.\n     */\n    const hasValidation = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(Array.isArray(node.props.parsedRules) && node.props.parsedRules.length > 0);\n    node.on('prop:parsedRules', ({ payload: rules }) => {\n        hasValidation.value = Array.isArray(rules) && rules.length > 0;\n    });\n    /**\n     * All messages that are currently on display to an end user. This changes\n     * based on the current message type visibility, like errorVisibility.\n     */\n    const messages = (0,vue__WEBPACK_IMPORTED_MODULE_1__.computed)(() => {\n        const visibleMessages = {};\n        for (const key in availableMessages) {\n            const message = availableMessages[key];\n            if (message.type !== 'validation' || validationVisible.value) {\n                visibleMessages[key] = message;\n            }\n        }\n        return visibleMessages;\n    });\n    /**\n     * UI Messages.\n     */\n    const ui = (0,vue__WEBPACK_IMPORTED_MODULE_1__.reactive)(node.store.reduce((messages, message) => {\n        if (message.type === 'ui' && message.visible)\n            messages[message.key] = message;\n        return messages;\n    }, {}));\n    /**\n     * This is the reactive data object that is provided to all schemas and\n     * forms. It is a subset of data in the core node object.\n     */\n    const cachedClasses = (0,vue__WEBPACK_IMPORTED_MODULE_1__.reactive)({});\n    const classes = new Proxy(cachedClasses, {\n        get(...args) {\n            const [target, property] = args;\n            let className = Reflect.get(...args);\n            if (!className && typeof property === 'string') {\n                if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(target, property) && !property.startsWith('__v')) {\n                    const observedNode = (0,_formkit_observer__WEBPACK_IMPORTED_MODULE_7__.createObserver)(node);\n                    observedNode.watch((node) => {\n                        const rootClasses = typeof node.config.rootClasses === 'function'\n                            ? node.config.rootClasses(property, node)\n                            : {};\n                        const globalConfigClasses = node.config.classes\n                            ? (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createClasses)(property, node, node.config.classes[property])\n                            : {};\n                        const classesPropClasses = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createClasses)(property, node, node.props[`_${property}Class`]);\n                        const sectionPropClasses = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createClasses)(property, node, node.props[`${property}Class`]);\n                        className = (0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.generateClassList)(node, property, rootClasses, globalConfigClasses, classesPropClasses, sectionPropClasses);\n                        target[property] = className;\n                    });\n                }\n            }\n            return className;\n        },\n    });\n    const describedBy = (0,vue__WEBPACK_IMPORTED_MODULE_1__.computed)(() => {\n        const describers = [];\n        if (context.help) {\n            describers.push(`help-${node.props.id}`);\n        }\n        for (const key in messages.value) {\n            describers.push(`${node.props.id}-${key}`);\n        }\n        return describers.length ? describers.join(' ') : undefined;\n    });\n    const value = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(node.value);\n    const _value = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(node.value);\n    const context = (0,vue__WEBPACK_IMPORTED_MODULE_1__.reactive)({\n        _value,\n        attrs: node.props.attrs,\n        disabled: node.props.disabled,\n        describedBy,\n        fns: {\n            length: (obj) => Object.keys(obj).length,\n            number: (value) => Number(value),\n            string: (value) => String(value),\n            json: (value) => JSON.stringify(value),\n            eq: _formkit_utils__WEBPACK_IMPORTED_MODULE_2__.eq,\n        },\n        handlers: {\n            blur: () => node.store.set((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createMessage)({ key: 'blurred', visible: false, value: true })),\n            touch: () => {\n                node.store.set((0,_formkit_core__WEBPACK_IMPORTED_MODULE_0__.createMessage)({ key: 'dirty', visible: false, value: true }));\n            },\n            DOMInput: (e) => {\n                node.input(e.target.value);\n                node.emit('dom-input-event', e);\n            },\n        },\n        help: node.props.help,\n        id: node.props.id,\n        label: node.props.label,\n        messages,\n        node: (0,vue__WEBPACK_IMPORTED_MODULE_1__.markRaw)(node),\n        options: node.props.options,\n        state: {\n            blurred: false,\n            complete: isComplete,\n            dirty: false,\n            submitted: false,\n            settled: node.isSettled,\n            valid: isValid,\n            errors: hasErrors,\n            rules: hasValidation,\n            validationVisible,\n        },\n        type: node.props.type,\n        ui,\n        value,\n        classes,\n    });\n    /**\n     * Ensure the context object is properly configured after booting up.\n     */\n    node.on('created', () => {\n        if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.eq)(context.value, node.value)) {\n            _value.value = node.value;\n            value.value = node.value;\n            (0,vue__WEBPACK_IMPORTED_MODULE_1__.triggerRef)(value);\n            (0,vue__WEBPACK_IMPORTED_MODULE_1__.triggerRef)(_value);\n        }\n    });\n    /**\n     * Sets the settled state.\n     */\n    node.on('settled', ({ payload: isSettled }) => {\n        context.state.settled = isSettled;\n    });\n    /**\n     * Observes node.props properties explicitly and updates them in the context\n     * object.\n     * @param observe - Props to observe and register as context data.\n     */\n    function observeProps(observe) {\n        observe.forEach((prop) => {\n            prop = (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.camel)(prop);\n            if (!(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(context, prop) && (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.has)(node.props, prop)) {\n                context[prop] = node.props[prop];\n            }\n            node.on(`prop:${prop}`, ({ payload }) => {\n                context[prop] = payload;\n            });\n        });\n    }\n    /**\n     * We use a node observer to individually observe node props.\n     */\n    const rootProps = [\n        'help',\n        'label',\n        'disabled',\n        'options',\n        'type',\n        'attrs',\n        'preserve',\n        'preserveErrors',\n        'id',\n    ];\n    observeProps(rootProps);\n    /**\n     * Once the input is defined, deal with it.\n     * @param definition - Type definition.\n     */\n    function definedAs(definition) {\n        if (definition.props)\n            observeProps(definition.props);\n    }\n    node.props.definition && definedAs(node.props.definition);\n    /**\n     * When new props are added to the core node as \"props\" (ie not attrs) then\n     * we automatically need to start tracking them here.\n     */\n    node.on('added-props', ({ payload }) => observeProps(payload));\n    /**\n     * Watch for input events from core.\n     */\n    node.on('input', ({ payload }) => {\n        _value.value = payload;\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.triggerRef)(_value);\n    });\n    /**\n     * Watch for input commits from core.\n     */\n    node.on('commit', ({ payload }) => {\n        value.value = _value.value = payload;\n        (0,vue__WEBPACK_IMPORTED_MODULE_1__.triggerRef)(value);\n        node.emit('modelUpdated');\n        // The input is dirty after a value has been input by a user\n        if (!context.state.dirty && node.isCreated && hasTicked)\n            context.handlers.touch();\n        if (isComplete &&\n            node.type === 'input' &&\n            hasErrors.value &&\n            !(0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.undefine)(node.props.preserveErrors)) {\n            node.store.filter((message) => { var _a; return !(message.type === 'error' && ((_a = message.meta) === null || _a === void 0 ? void 0 : _a.autoClear) === true); });\n        }\n    });\n    /**\n     * Update the local state in response to messages.\n     * @param message - A formkit message\n     */\n    const updateState = async (message) => {\n        if (message.type === 'ui' &&\n            message.visible &&\n            !message.meta.showAsMessage) {\n            ui[message.key] = message;\n        }\n        else if (message.visible) {\n            availableMessages[message.key] = message;\n        }\n        else if (message.type === 'state') {\n            // await node.settled\n            context.state[message.key] = !!message.value;\n        }\n    };\n    /**\n     * Listen to message events and modify the local message data values.\n     */\n    node.on('message-added', (e) => updateState(e.payload));\n    node.on('message-updated', (e) => updateState(e.payload));\n    node.on('message-removed', ({ payload: message }) => {\n        delete ui[message.key];\n        delete availableMessages[message.key];\n        delete context.state[message.key];\n    });\n    node.on('settled:blocking', () => {\n        isValid.value = true;\n    });\n    node.on('unsettled:blocking', () => {\n        isValid.value = false;\n    });\n    node.on('settled:errors', () => {\n        hasErrors.value = false;\n    });\n    node.on('unsettled:errors', () => {\n        hasErrors.value = true;\n    });\n    /**\n     * Watch the validation visible prop and set the hasShownErrors state.\n     */\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watch)(validationVisible, (value) => {\n        if (value) {\n            hasShownErrors.value = true;\n        }\n    });\n    node.context = context;\n    // The context is complete\n    node.emit('context', node, false);\n};\n\n/**\n * Default configuration options. Includes all validation rules,\n * en i18n messages.\n * @public\n */\nconst defaultConfig = (options = {}) => {\n    const { rules = {}, locales = {}, inputs: inputs$1 = {}, messages = {}, locale = undefined, ...nodeOptions } = options;\n    /**\n     * The default configuration includes the validation plugin,\n     * with all core-available validation rules.\n     */\n    const validation = (0,_formkit_validation__WEBPACK_IMPORTED_MODULE_5__.createValidationPlugin)({\n        ..._formkit_rules__WEBPACK_IMPORTED_MODULE_4__,\n        ...(rules || {}),\n    });\n    /**\n     * Includes the i18n plugin with only the english language\n     * messages.\n     */\n    const i18n = (0,_formkit_i18n__WEBPACK_IMPORTED_MODULE_6__.createI18nPlugin)((0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.extend)({ en: _formkit_i18n__WEBPACK_IMPORTED_MODULE_6__.en, ...(locales || {}) }, messages));\n    /**\n     * Create the library of inputs that are generally available. This default\n     * config imports all \"native\" inputs by default, but\n     */\n    const library = (0,_formkit_inputs__WEBPACK_IMPORTED_MODULE_3__.createLibraryPlugin)(_formkit_inputs__WEBPACK_IMPORTED_MODULE_3__.inputs, inputs$1);\n    return (0,_formkit_utils__WEBPACK_IMPORTED_MODULE_2__.extend)({\n        plugins: [library, vueBindings, i18n, validation],\n        ...(!locale ? {} : { config: { locale } }),\n    }, nodeOptions || {}, true);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formkit/vue/dist/index.mjs\n");

/***/ })

});